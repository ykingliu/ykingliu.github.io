<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhisheng的博客</title>
  <subtitle>放码过来！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-21T06:53:05.630Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhisheng Tian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HBase 集群监控</title>
    <link href="http://yoursite.com/2017/10/21/HBase-metrics/"/>
    <id>http://yoursite.com/2017/10/21/HBase-metrics/</id>
    <published>2017-10-21T06:49:14.105Z</published>
    <updated>2017-10-21T06:53:05.630Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb8.jpg-1" alt=""></p>
<h3 id="为什么需要监控？"><a href="#为什么需要监控？" class="headerlink" title="为什么需要监控？"></a>为什么需要监控？</h3><p>为了保证系统的稳定性，可靠性，可运维性。<br><a id="more"></a></p>
<ol>
<li>掌控集群的核心性能指标，了解集群的性能表现。</li>
<li>集群出现问题时及时报警，便于运维同学及时修复问题。</li>
<li>集群重要指标值异常时进行预警，将问题扼杀在摇篮中，不用等集群真正不可用时才采取行动。</li>
<li>当集群出现问题时，监控系统可以帮助我们更快的定位问题和解决问题</li>
</ol>
<h3 id="如何构建-HBase-集群监控系统？"><a href="#如何构建-HBase-集群监控系统？" class="headerlink" title="如何构建 HBase 集群监控系统？"></a>如何构建 HBase 集群监控系统？</h3><p>公司有自己的监控系统，我们所要做的就是将 HBase 中我们关心的指标项发送到监控系统去，问题就转换为我们开发，采集并返回哪些 HBase 集群监控指标项。</p>
<h3 id="HBase-集群监控指标"><a href="#HBase-集群监控指标" class="headerlink" title="HBase 集群监控指标"></a>HBase 集群监控指标</h3><p>采集的监控数据主要包括以下几个方面：某台机器 OS 层面上的数据，例如 CPU、内存、磁盘、网络、load、网络流量等；某台 regionserver（或master）机器 jvm 的状态，例如关于线程的信息，GC 的次数和时间，内存使用状况，以及 ERROR、WARN、Fatal 事件出现的次数；regionserver（或 master）进程中的统计信息。</p>
<p>可以通过以下地址获取 HBase 提供的 JMX 信息的 web 页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://your_master:60010/jmx  //所有的bean</div></pre></td></tr></table></figure>
<p>JMX web 页面的数据格式是<code>json</code>格式，信息很多！</p>
<h4 id="OS-监控数据"><a href="#OS-监控数据" class="headerlink" title="OS 监控数据"></a>OS 监控数据</h4><p>HBase 中对于 OS 的监控数据，主要是 OperatingSystem 的对象来进行的，如下就是我提取出来的 JSON 信息，</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span> : <span class="string">"java.lang:type=OperatingSystem"</span>,</div><div class="line">    <span class="attr">"modelerType"</span> : <span class="string">"com.sun.management.UnixOperatingSystem"</span>,</div><div class="line">    <span class="attr">"MaxFileDescriptorCount"</span> : <span class="number">1000000</span>,</div><div class="line">    <span class="attr">"OpenFileDescriptorCount"</span> : <span class="number">413</span>,</div><div class="line">    <span class="attr">"CommittedVirtualMemorySize"</span> : <span class="number">1892225024</span>,</div><div class="line">    <span class="attr">"FreePhysicalMemorySize"</span> : <span class="number">284946432</span>,</div><div class="line">    <span class="attr">"FreeSwapSpaceSize"</span> : <span class="number">535703552</span>,</div><div class="line">    <span class="attr">"ProcessCpuLoad"</span> : <span class="number">0.0016732901066722444</span>,</div><div class="line">    <span class="attr">"ProcessCpuTime"</span> : <span class="number">59306210000000</span>,</div><div class="line">    <span class="attr">"SystemCpuLoad"</span> : <span class="number">0.018197029910060655</span>,</div><div class="line">    <span class="attr">"TotalPhysicalMemorySize"</span> : <span class="number">16660848640</span>,</div><div class="line">    <span class="attr">"TotalSwapSpaceSize"</span> : <span class="number">536862720</span>,</div><div class="line">    <span class="attr">"AvailableProcessors"</span> : <span class="number">8</span>,</div><div class="line">    <span class="attr">"Arch"</span> : <span class="string">"amd64"</span>,</div><div class="line">    <span class="attr">"SystemLoadAverage"</span> : <span class="number">0.0</span>,</div><div class="line">    <span class="attr">"Name"</span> : <span class="string">"Linux"</span>,</div><div class="line">    <span class="attr">"Version"</span> : <span class="string">"2.6.32-431.11.7.el6.ucloud.x86_64"</span>,</div><div class="line">    <span class="attr">"ObjectName"</span> : <span class="string">"java.lang:type=OperatingSystem"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>其中比较重要的指标有 <code>OpenFileDescriptorCount</code> ,  <code>FreePhysicalMemorySize</code> ,  <code>ProcessCpuLoad</code> , <code>SystemCpuLoad</code> ,  <code>AvailableProcessors</code> ,  <code>SystemLoadAverage</code></p>
<h4 id="JVM-监控数据"><a href="#JVM-监控数据" class="headerlink" title="JVM 监控数据"></a>JVM 监控数据</h4><p>Hbase 中对于 JVM 的监控数据，主要是 JvmMetrics 的对象来进行的，如下就是我提取出来的 JSON 信息，</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span> : <span class="string">"Hadoop:service=HBase,name=JvmMetrics"</span>,</div><div class="line">    <span class="attr">"modelerType"</span> : <span class="string">"JvmMetrics"</span>,</div><div class="line">    <span class="attr">"tag.Context"</span> : <span class="string">"jvm"</span>,</div><div class="line">    <span class="attr">"tag.ProcessName"</span> : <span class="string">"Master"</span>,</div><div class="line">    <span class="attr">"tag.SessionId"</span> : <span class="string">""</span>,</div><div class="line">    <span class="attr">"tag.Hostname"</span> : <span class="string">"uhadoop-qrljqo-master2"</span>,</div><div class="line">    <span class="attr">"MemNonHeapUsedM"</span> : <span class="number">53.846107</span>,</div><div class="line">    <span class="attr">"MemNonHeapCommittedM"</span> : <span class="number">85.84375</span>,</div><div class="line">    <span class="attr">"MemNonHeapMaxM"</span> : <span class="number">130.0</span>,</div><div class="line">    <span class="attr">"MemHeapUsedM"</span> : <span class="number">79.05823</span>,</div><div class="line">    <span class="attr">"MemHeapCommittedM"</span> : <span class="number">240.125</span>,</div><div class="line">    <span class="attr">"MemHeapMaxM"</span> : <span class="number">989.875</span>,</div><div class="line">    <span class="attr">"MemMaxM"</span> : <span class="number">989.875</span>,</div><div class="line">    <span class="attr">"GcCountParNew"</span> : <span class="number">15190</span>,</div><div class="line">    <span class="attr">"GcTimeMillisParNew"</span> : <span class="number">72300</span>,</div><div class="line">    <span class="attr">"GcCountConcurrentMarkSweep"</span> : <span class="number">2</span>,</div><div class="line">    <span class="attr">"GcTimeMillisConcurrentMarkSweep"</span> : <span class="number">319</span>,</div><div class="line">    <span class="attr">"GcCount"</span> : <span class="number">15192</span>,</div><div class="line">    <span class="attr">"GcTimeMillis"</span> : <span class="number">72619</span>,</div><div class="line">    <span class="attr">"ThreadsNew"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"ThreadsRunnable"</span> : <span class="number">21</span>,</div><div class="line">    <span class="attr">"ThreadsBlocked"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"ThreadsWaiting"</span> : <span class="number">144</span>,</div><div class="line">    <span class="attr">"ThreadsTimedWaiting"</span> : <span class="number">18</span>,</div><div class="line">    <span class="attr">"ThreadsTerminated"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"LogFatal"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"LogError"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"LogWarn"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"LogInfo"</span> : <span class="number">0</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p> JvmMetrics 主要统计的信息包括：内存的使用状态信息；GC的统计信息；线程的统计信息；以及事件的统计信息。</p>
<p>内存的统计信息主要是：JVM 当前已经使用的 NonHeapMemory 的大小、以及配置的 NonHeapMemory 的大小；JVM 当前已经使用的 HeapMemory 的大小、以及配置的 HeapMemory 的大小； JVM 运行时的可以使用的最大的内存的大小。</p>
<p>GC 的统计较为简单，仅统计了进程在固定间隔内 GC 的次数和花费的总时间。</p>
<p>线程的统计，主要是统计进程内当前线程的处于 NEW 、RUNNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED 这六种状态下的线程数量。</p>
<p>对于事件的统计，主要统计固定时间间隔内的 Fatal、Error、Warn 以及 Info 的数量。(这块好像不怎么重要)</p>
<h4 id="Region-Servers-健康"><a href="#Region-Servers-健康" class="headerlink" title="Region Servers 健康"></a>Region Servers 健康</h4><p>你也可以通过如下地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://your_master:60010/jmx?qry=Hadoop:service=HBase,name=Master,sub=Server</div></pre></td></tr></table></figure>
<p>获得到 Region Servers 健康值：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span> : <span class="string">"Hadoop:service=HBase,name=Master,sub=Server"</span>,</div><div class="line">    <span class="attr">"modelerType"</span> : <span class="string">"Master,sub=Server"</span>,</div><div class="line">    <span class="attr">"tag.liveRegionServers"</span> : <span class="string">"xxx"</span>,</div><div class="line">    <span class="attr">"tag.deadRegionServers"</span> : <span class="string">""</span>,</div><div class="line">    <span class="attr">"tag.zookeeperQuorum"</span> : <span class="string">"xxx"</span>,</div><div class="line">    <span class="attr">"tag.serverName"</span> : <span class="string">"xxx2,60000,1495683310213"</span>,</div><div class="line">    <span class="attr">"tag.clusterId"</span> : <span class="string">"e5e044a3-ef9f-48f7-ba63-637376f5fa90"</span>,</div><div class="line">    <span class="attr">"tag.isActiveMaster"</span> : <span class="string">"true"</span>,</div><div class="line">    <span class="attr">"tag.Context"</span> : <span class="string">"master"</span>,</div><div class="line">    <span class="attr">"tag.Hostname"</span> : <span class="string">"xxx"</span>,</div><div class="line">    <span class="attr">"masterActiveTime"</span> : <span class="number">1495683312239</span>,</div><div class="line">    <span class="attr">"masterStartTime"</span> : <span class="number">1495683310213</span>,</div><div class="line">    <span class="attr">"averageLoad"</span> : <span class="number">143.66666666666666</span>,</div><div class="line">    <span class="attr">"numRegionServers"</span> : <span class="number">3</span>,</div><div class="line">    <span class="attr">"numDeadRegionServers"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"clusterRequests"</span> : <span class="number">1297834323</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="MemoryPool"><a href="#MemoryPool" class="headerlink" title="MemoryPool"></a>MemoryPool</h4><p>从全部的 JSON 值中你会看到很多种 MemoryPool 值，比如 Par Eden Space 、CMS Perm Gen、Par Survivor Space、CMS Old Gen、Code Cache ，按需获取吧。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>任何一个服务的监控系统都是一个不断迭代，不断优化的过程，不可能一开始就做到最好。监控总是比问题发生来的更早一些，而每一次出问题，又进一步加强相应方面的监控，我们需要让监控系统从出问题时才报警到可能出现问题时就预警逐渐过渡，最终让监控系统成为我们保证系统稳定性的一个有力工具。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>监控指标有很多，但请按需获取 ! 转载文章请注明原出处，谢谢支持！  <a href="http://www.54tianzhisheng.cn/2017/10/21/HBase-metrics/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/10/21/HBase-metrics/</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://www.tuicool.com/articles/zQNrM3" target="_blank" rel="external">hbase性能监控（一）</a></p>
<p>2、<a href="https://www.tuicool.com/articles/YbQbIj" target="_blank" rel="external">hbase性能监控（二）</a></p>
<p>3、<a href="https://www.tuicool.com/articles/imArAb" target="_blank" rel="external">hbase性能监控（三）</a></p>
<p>4、<a href="https://blog.bcmeng.com/post/hbase-monitor.html" target="_blank" rel="external">HBase 集群监控系统构建</a></p>
<p>5、<a href="http://blog.csdn.net/englishsname/article/details/53883682" target="_blank" rel="external">hbase jmx常用监控指标</a></p>
<h3 id="推荐相关文章"><a href="#推荐相关文章" class="headerlink" title="推荐相关文章"></a>推荐相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/" target="_blank" rel="external">ElasticSearch 单个节点监控</a></p>
<p>2、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="external">ElasticSearch 集群监控</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb8.jpg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;为什么需要监控？&quot;&gt;&lt;a href=&quot;#为什么需要监控？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要监控？&quot;&gt;&lt;/a&gt;为什么需要监控？&lt;/h3&gt;&lt;p&gt;为了保证系统的稳定性，可靠性，可运维性。&lt;br&gt;
    
    </summary>
    
    
      <category term="HBase" scheme="http://yoursite.com/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 单个节点监控</title>
    <link href="http://yoursite.com/2017/10/18/ElasticSearch-nodes-metrics/"/>
    <id>http://yoursite.com/2017/10/18/ElasticSearch-nodes-metrics/</id>
    <published>2017-10-18T07:09:05.837Z</published>
    <updated>2017-10-18T14:50:51.653Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb6.jpeg-1" alt=""></p>
<p>集群健康监控是对集群信息进行高度的概括，节点统计值 API 提供了集群中每个节点的统计值。节点统计值很多，在监控的时候仍需要我们清楚哪些指标是最值得关注的。</p>
<p>集群健康监控可以参考这篇文章：<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="external">ElasticSearch 集群监控</a><br><a id="more"></a></p>
<h3 id="节点信息-Node-Info"><a href="#节点信息-Node-Info" class="headerlink" title="节点信息   Node Info :"></a>节点信息   Node Info :</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET &apos;http://localhost:9200/_nodes&apos;</div></pre></td></tr></table></figure>
<p>执行上述命令可以获取所有 node 的信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">_nodes: &#123;</div><div class="line">  total: 2,</div><div class="line">  successful: 2,</div><div class="line">  failed: 0</div><div class="line">&#125;,</div><div class="line">cluster_name: "elasticsearch",</div><div class="line">nodes: &#123;</div><div class="line">	MSQ_CZ7mTNyOSlYIfrvHag: &#123;</div><div class="line">	name: "node0",</div><div class="line">    transport_address: "192.168.180.110:9300",</div><div class="line">    host: "192.168.180.110",</div><div class="line">    ip: "192.168.180.110",</div><div class="line">    version: "5.5.0",</div><div class="line">    build_hash: "260387d",</div><div class="line">    total_indexing_buffer: 103887667,</div><div class="line">    roles:&#123;...&#125;,</div><div class="line">    settings: &#123;...&#125;,</div><div class="line">    os: &#123;</div><div class="line">      refresh_interval_in_millis: 1000,</div><div class="line">      name: "Linux",</div><div class="line">      arch: "amd64",</div><div class="line">      version: "3.10.0-229.el7.x86_64",</div><div class="line">      available_processors: 4,</div><div class="line">      allocated_processors: 4</div><div class="line">	&#125;,</div><div class="line">	process: &#123;</div><div class="line">      refresh_interval_in_millis: 1000,</div><div class="line">      id: 3022,</div><div class="line">      mlockall: false</div><div class="line">	&#125;,</div><div class="line">	jvm: &#123;</div><div class="line">      pid: 3022,</div><div class="line">      version: "1.8.0_121",</div><div class="line">      vm_name: "Java HotSpot(TM) 64-Bit Server VM",</div><div class="line">      vm_version: "25.121-b13",</div><div class="line">      vm_vendor: "Oracle Corporation",</div><div class="line">      start_time_in_millis: 1507515225302,</div><div class="line">      mem: &#123;</div><div class="line">      heap_init_in_bytes: 1073741824,</div><div class="line">      heap_max_in_bytes: 1038876672,</div><div class="line">      non_heap_init_in_bytes: 2555904,</div><div class="line">      non_heap_max_in_bytes: 0,</div><div class="line">      direct_max_in_bytes: 1038876672</div><div class="line">      &#125;,</div><div class="line">      gc_collectors: [],</div><div class="line">      memory_pools: [],</div><div class="line">      using_compressed_ordinary_object_pointers: "true",</div><div class="line">      input_arguments:&#123;&#125;</div><div class="line">    &#125;</div><div class="line">    thread_pool:&#123;</div><div class="line">      force_merge: &#123;&#125;,</div><div class="line">      fetch_shard_started: &#123;&#125;,</div><div class="line">      listener: &#123;&#125;,</div><div class="line">      index: &#123;&#125;,</div><div class="line">      refresh: &#123;&#125;,</div><div class="line">      generic: &#123;&#125;,</div><div class="line">      warmer: &#123;&#125;,</div><div class="line">      search: &#123;&#125;,</div><div class="line">      flush: &#123;&#125;,</div><div class="line">      fetch_shard_store: &#123;&#125;,</div><div class="line">      management: &#123;&#125;,</div><div class="line">      get: &#123;&#125;,</div><div class="line">      bulk: &#123;&#125;,</div><div class="line">      snapshot: &#123;&#125;</div><div class="line">    &#125;</div><div class="line">    transport: &#123;...&#125;,</div><div class="line">    http: &#123;...&#125;,</div><div class="line">    plugins: [],</div><div class="line">    modules: [],</div><div class="line">    ingest: &#123;...&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>上面是我已经简写了很多数据之后的返回值，但是指标还是很多，有些是一些常规的指标，对于监控来说，没必要拿取。从上面我们可以主要关注以下这些指标:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">os, process, jvm, thread_pool, transport, http, ingest and indices</div></pre></td></tr></table></figure>
<h3 id="节点统计-nodes-statistics"><a href="#节点统计-nodes-statistics" class="headerlink" title="节点统计     nodes-statistics"></a>节点统计     nodes-statistics</h3><p>节点统计值 API 可通过如下命令获取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /_nodes/stats</div></pre></td></tr></table></figure>
<p>得到：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div></pre></td><td class="code"><pre><div class="line">_nodes: &#123;</div><div class="line">  total: 2,</div><div class="line">  successful: 2,</div><div class="line">  failed: 0</div><div class="line">&#125;,</div><div class="line">cluster_name: "elasticsearch",</div><div class="line">nodes: &#123;</div><div class="line">  MSQ_CZ7mTNyOSlYI0yvHag: &#123;</div><div class="line">    timestamp: 1508312932354,</div><div class="line">    name: "node0",</div><div class="line">    transport_address: "192.168.180.110:9300",</div><div class="line">    host: "192.168.180.110",</div><div class="line">    ip: "192.168.180.110:9300",</div><div class="line">    roles: [],</div><div class="line">    indices: &#123;</div><div class="line">      docs: &#123;</div><div class="line">           count: 6163666,</div><div class="line">           deleted: 0</div><div class="line">        &#125;,</div><div class="line">      store: &#123;</div><div class="line">           size_in_bytes: 2301398179,</div><div class="line">           throttle_time_in_millis: 122850</div><div class="line">        &#125;,</div><div class="line">      indexing: &#123;&#125;,</div><div class="line">      get: &#123;&#125;,</div><div class="line">      search: &#123;&#125;,</div><div class="line">      merges: &#123;&#125;,</div><div class="line">      refresh: &#123;&#125;,</div><div class="line">      flush: &#123;&#125;,</div><div class="line">      warmer: &#123;&#125;,</div><div class="line">      query_cache: &#123;&#125;,</div><div class="line">      fielddata: &#123;&#125;,</div><div class="line">      completion: &#123;&#125;,</div><div class="line">      segments: &#123;&#125;,</div><div class="line">      translog: &#123;&#125;,</div><div class="line">      request_cache: &#123;&#125;,</div><div class="line">      recovery: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  os: &#123;</div><div class="line">    timestamp: 1508312932369,</div><div class="line">    cpu: &#123;</div><div class="line">      percent: 0,</div><div class="line">      load_average: &#123;</div><div class="line">        1m: 0.09,</div><div class="line">        5m: 0.12,</div><div class="line">        15m: 0.08</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    mem: &#123;</div><div class="line">      total_in_bytes: 8358301696,</div><div class="line">      free_in_bytes: 1381613568,</div><div class="line">      used_in_bytes: 6976688128,</div><div class="line">      free_percent: 17,</div><div class="line">      used_percent: 83</div><div class="line">    &#125;,</div><div class="line">    swap: &#123;</div><div class="line">      total_in_bytes: 8455712768,</div><div class="line">      free_in_bytes: 8455299072,</div><div class="line">      used_in_bytes: 413696</div><div class="line">    &#125;,</div><div class="line">    cgroup: &#123;</div><div class="line">      cpuacct: &#123;&#125;,</div><div class="line">      cpu: &#123;</div><div class="line">        control_group: "/user.slice",</div><div class="line">        cfs_period_micros: 100000,</div><div class="line">        cfs_quota_micros: -1,</div><div class="line">        stat: &#123;&#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">process: &#123;</div><div class="line">  timestamp: 1508312932369,</div><div class="line">  open_file_descriptors: 228,</div><div class="line">  max_file_descriptors: 65536,</div><div class="line">  cpu: &#123;</div><div class="line">    percent: 0,</div><div class="line">    total_in_millis: 2495040</div><div class="line">  &#125;,</div><div class="line">  mem: &#123;</div><div class="line">    total_virtual_in_bytes: 5002465280</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">jvm: &#123;</div><div class="line">  timestamp: 1508312932369,</div><div class="line">  uptime_in_millis: 797735804,</div><div class="line">  mem: &#123;</div><div class="line">    heap_used_in_bytes: 318233768,</div><div class="line">    heap_used_percent: 30,</div><div class="line">    heap_committed_in_bytes: 1038876672,</div><div class="line">    heap_max_in_bytes: 1038876672,</div><div class="line">    non_heap_used_in_bytes: 102379784,</div><div class="line">    non_heap_committed_in_bytes: 108773376,</div><div class="line">  pools: &#123;</div><div class="line">    young: &#123;</div><div class="line">      used_in_bytes: 62375176,</div><div class="line">      max_in_bytes: 279183360,</div><div class="line">      peak_used_in_bytes: 279183360,</div><div class="line">      peak_max_in_bytes: 279183360</div><div class="line">    &#125;,</div><div class="line">    survivor: &#123;</div><div class="line">      used_in_bytes: 175384,</div><div class="line">      max_in_bytes: 34865152,</div><div class="line">      peak_used_in_bytes: 34865152,</div><div class="line">      peak_max_in_bytes: 34865152</div><div class="line">    &#125;,</div><div class="line">    old: &#123;</div><div class="line">      used_in_bytes: 255683208,</div><div class="line">      max_in_bytes: 724828160,</div><div class="line">      peak_used_in_bytes: 255683208,</div><div class="line">      peak_max_in_bytes: 724828160</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;,</div><div class="line">  threads: &#123;&#125;,</div><div class="line">  gc: &#123;&#125;,</div><div class="line">  buffer_pools: &#123;&#125;,</div><div class="line">  classes: &#123;&#125;</div><div class="line">&#125;,</div><div class="line">  thread_pool: &#123;</div><div class="line">    bulk: &#123;&#125;,</div><div class="line">    fetch_shard_started: &#123;&#125;,</div><div class="line">    fetch_shard_store: &#123;&#125;,</div><div class="line">    flush: &#123;&#125;,</div><div class="line">    force_merge: &#123;&#125;,</div><div class="line">    generic: &#123;&#125;,</div><div class="line">    get: &#123;&#125;,</div><div class="line">    index: &#123;</div><div class="line">       threads: 1,</div><div class="line">       queue: 0,</div><div class="line">       active: 0,</div><div class="line">       rejected: 0,</div><div class="line">       largest: 1,</div><div class="line">       completed: 1</div><div class="line">    &#125;</div><div class="line">    listener: &#123;&#125;,</div><div class="line">    management: &#123;&#125;,</div><div class="line">    refresh: &#123;&#125;,</div><div class="line">    search: &#123;&#125;,</div><div class="line">    snapshot: &#123;&#125;,</div><div class="line">    warmer: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  fs: &#123;&#125;,</div><div class="line">  transport: &#123;</div><div class="line">    server_open: 13,</div><div class="line">    rx_count: 11696,</div><div class="line">    rx_size_in_bytes: 1525774,</div><div class="line">    tx_count: 10282,</div><div class="line">    tx_size_in_bytes: 1440101928</div><div class="line">  &#125;,</div><div class="line">  http: &#123;</div><div class="line">    current_open: 4,</div><div class="line">    total_opened: 23</div><div class="line">  &#125;,</div><div class="line">  breakers: &#123;&#125;,</div><div class="line">  script: &#123;&#125;,</div><div class="line">  discovery: &#123;&#125;,</div><div class="line">  ingest: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>节点名是一个 UUID，上面列举了很多指标，下面讲解下：</p>
<h4 id="索引部分-indices"><a href="#索引部分-indices" class="headerlink" title="索引部分 indices"></a>索引部分 indices</h4><p>这部分列出了这个节点上所有索引的聚合过的统计值 ：</p>
<ul>
<li><p><code>docs</code> 展示节点内存有多少文档，包括还没有从段里清除的已删除文档数量。</p>
</li>
<li><p><code>store</code> 部分显示节点耗用了多少物理存储。这个指标包括主分片和副本分片在内。如果限流时间很大，那可能表明你的磁盘限流设置得过低。</p>
</li>
<li><p><code>indexing</code> 显示已经索引了多少文档。这个值是一个累加计数器。在文档被删除的时候，数值不会下降。还要注意的是，在发生内部 索引操作的时候，这个值也会增加，比如说文档更新。</p>
<p>还列出了索引操作耗费的时间，正在索引的文档数量，以及删除操作的类似统计值。</p>
</li>
<li><p><code>get</code> 显示通过 ID 获取文档的接口相关的统计值。包括对单个文档的 <code>GET</code> 和 <code>HEAD</code> 请求。</p>
</li>
<li><p><code>search</code> 描述在活跃中的搜索（ <code>open_contexts</code> ）数量、查询的总数量、以及自节点启动以来在查询上消耗的总时间。用 <code>query_time_in_millis / query_total</code> 计算的比值，可以用来粗略的评价你的查询有多高效。比值越大，每个查询花费的时间越多，你应该要考虑调优了。</p>
<p>fetch 统计值展示了查询处理的后一半流程（query-then-fetch 里的 <em>fetch</em> ）。如果 fetch 耗时比 query 还多，说明磁盘较慢，或者获取了太多文档，或者可能搜索请求设置了太大的分页（比如， <code>size: 10000</code> ）。</p>
</li>
<li><p><code>merges</code> 包括了 Lucene 段合并相关的信息。它会告诉你目前在运行几个合并，合并涉及的文档数量，正在合并的段的总大小，以及在合并操作上消耗的总时间。</p>
</li>
<li><p><code>filter_cache</code> 展示了已缓存的过滤器位集合所用的内存数量，以及过滤器被驱逐出内存的次数。过多的驱逐数 <em>可能</em> 说明你需要加大过滤器缓存的大小，或者你的过滤器不太适合缓存（比如它们因为高基数而在大量产生，就像是缓存一个 <code>now</code> 时间表达式）。</p>
<p>不过，驱逐数是一个很难评定的指标。过滤器是在每个段的基础上缓存的，而从一个小的段里驱逐过滤器，代价比从一个大的段里要廉价的多。有可能你有很大的驱逐数，但是它们都发生在小段上，也就意味着这些对查询性能只有很小的影响。</p>
<p>把驱逐数指标作为一个粗略的参考。如果你看到数字很大，检查一下你的过滤器，确保他们都是正常缓存的。不断驱逐着的过滤器，哪怕都发生在很小的段上，效果也比正确缓存住了的过滤器差很多。</p>
</li>
<li><p><code>field_data</code> 显示 fielddata 使用的内存， 用以聚合、排序等等。这里也有一个驱逐计数。和 <code>filter_cache</code> 不同的是，这里的驱逐计数是很有用的：这个数应该或者至少是接近于 0。因为 fielddata 不是缓存，任何驱逐都消耗巨大，应该避免掉。如果你在这里看到驱逐数，你需要重新评估你的内存情况，fielddata 限制，请求语句，或者这三者。</p>
</li>
<li><p><code>segments</code> 会展示这个节点目前正在服务中的 Lucene 段的数量。 这是一个重要的数字。大多数索引会有大概 50–150 个段，哪怕它们存有 TB 级别的数十亿条文档。段数量过大表明合并出现了问题（比如，合并速度跟不上段的创建）。注意这个统计值是节点上所有索引的汇聚总数。记住这点。</p>
<p><code>memory</code> 统计值展示了 Lucene 段自己用掉的内存大小。 这里包括底层数据结构，比如倒排表，字典，和布隆过滤器等。太大的段数量会增加这些数据结构带来的开销，这个内存使用量就是一个方便用来衡量开销的度量值。</p>
</li>
</ul>
<h4 id="操作系统和进程部分"><a href="#操作系统和进程部分" class="headerlink" title="操作系统和进程部分"></a>操作系统和进程部分</h4><p><code>OS</code> 和 <code>Process</code> 部分基本是自描述的，不会在细节中展开讲解。它们列出来基础的资源统计值，比如 CPU 和负载。<code>OS</code> 部分描述了整个操作系统，而 <code>Process</code> 部分只显示 Elasticsearch 的 JVM 进程使用的资源情况。</p>
<p>这些都是非常有用的指标，不过通常在你的监控技术栈里已经都测量好了。统计值包括下面这些：</p>
<ul>
<li>CPU</li>
<li>负载</li>
<li>内存使用率 （mem.used_percent）</li>
<li>Swap 使用率</li>
<li>打开的文件描述符 （open_file_descriptors）</li>
</ul>
<h4 id="JVM-部分"><a href="#JVM-部分" class="headerlink" title="JVM 部分"></a>JVM 部分</h4><p><code>jvm</code> 部分包括了运行 Elasticsearch 的 JVM 进程一些很关键的信息。 最重要的，它包括了垃圾回收的细节，这对你的 Elasticsearch 集群的稳定性有着重大影响。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">jvm: &#123;</div><div class="line">  timestamp: 1508312932369,</div><div class="line">  uptime_in_millis: 797735804,</div><div class="line">  mem: &#123;</div><div class="line">    heap_used_in_bytes: 318233768,</div><div class="line">    heap_used_percent: 30,</div><div class="line">    heap_committed_in_bytes: 1038876672,</div><div class="line">    heap_max_in_bytes: 1038876672,</div><div class="line">    non_heap_used_in_bytes: 102379784,</div><div class="line">    non_heap_committed_in_bytes: 108773376,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>jvm</code> 部分首先列出一些和 heap 内存使用有关的常见统计值。你可以看到有多少 heap 被使用了，多少被指派了（当前被分配给进程的），以及 heap 被允许分配的最大值。理想情况下，<code>heap_committed_in_bytes</code> 应该等于 <code>heap_max_in_bytes</code> 。如果指派的大小更小，JVM 最终会被迫调整 heap 大小——这是一个非常昂贵的操作。如果你的数字不相等，阅读 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/heap-sizing.html" target="_blank" rel="external">堆内存:大小和交换</a> 学习如何正确的配置它。</p>
<p><code>heap_used_percent</code> 指标是值得关注的一个数字。Elasticsearch 被配置为当 heap 达到 75% 的时候开始 GC。如果你的节点一直 &gt;= 75%，你的节点正处于 <em>内存压力</em> 状态。这是个危险信号，不远的未来可能就有慢 GC 要出现了。</p>
<p>如果 heap 使用率一直 &gt;=85%，你就麻烦了。Heap 在 90–95% 之间，则面临可怕的性能风险，此时最好的情况是长达 10–30s 的 GC，最差的情况就是内存溢出（OOM）异常。</p>
<h4 id="线程池部分"><a href="#线程池部分" class="headerlink" title="线程池部分"></a>线程池部分</h4><p>Elasticsearch 在内部维护了线程池。 这些线程池相互协作完成任务，有必要的话相互间还会传递任务。通常来说，你不需要配置或者调优线程池，不过查看它们的统计值有时候还是有用的，可以洞察你的集群表现如何。</p>
<p>每个线程池会列出已配置的线程数量（ <code>threads</code> ），当前在处理任务的线程数量（ <code>active</code> ），以及在队列中等待处理的任务单元数量（ <code>queue</code> ）。</p>
<p>如果队列中任务单元数达到了极限，新的任务单元会开始被拒绝，你会在 <code>rejected</code> 统计值上看到它反映出来。这通常是你的集群在某些资源上碰到瓶颈的信号。因为队列满意味着你的节点或集群在用最高速度运行，但依然跟不上工作的蜂拥而入。</p>
<p>这里的一系列的线程池，大多数你可以忽略，但是有一小部分还是值得关注的：</p>
<ul>
<li><code>indexing</code>    普通的索引请求的线程池</li>
<li><code>bulk</code>    批量请求，和单条的索引请求不同的线程池</li>
<li><code>get</code>     Get-by-ID 操作</li>
<li><code>search</code>    所有的搜索和查询请求</li>
<li><code>merging</code>   专用于管理 Lucene 合并的线程池</li>
</ul>
<h4 id="网络部分"><a href="#网络部分" class="headerlink" title="网络部分"></a>网络部分</h4><ul>
<li><code>transport</code> 显示和 <em>传输地址</em> 相关的一些基础统计值。包括节点间的通信（通常是 9300 端口）以及任意传输客户端或者节点客户端的连接。如果看到这里有很多连接数不要担心；Elasticsearch 在节点之间维护了大量的连接。</li>
<li><code>http</code> 显示 HTTP 端口（通常是 9200）的统计值。如果你看到 <code>total_opened</code> 数很大而且还在一直上涨，这是一个明确信号，说明你的 HTTP 客户端里有没启用 keep-alive 长连接的。持续的 keep-alive 长连接对性能很重要，因为连接、断开套接字是很昂贵的（而且浪费文件描述符）。请确认你的客户端都配置正确。</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-info.html" target="_blank" rel="external">nodes-info</a></p>
<p>2、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-stats.html" target="_blank" rel="external">nodes-stats</a></p>
<p>3、<a href="http://www.oneapm.com/ci/elasticsearch.html" target="_blank" rel="external">ES监控指标</a></p>
<h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p>转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb6.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;集群健康监控是对集群信息进行高度的概括，节点统计值 API 提供了集群中每个节点的统计值。节点统计值很多，在监控的时候仍需要我们清楚哪些指标是最值得关注的。&lt;/p&gt;
&lt;p&gt;集群健康监控可以参考这篇文章：&lt;a href=&quot;http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/&quot;&gt;ElasticSearch 集群监控&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 集群监控</title>
    <link href="http://yoursite.com/2017/10/15/ElasticSearch-cluster-health-metrics/"/>
    <id>http://yoursite.com/2017/10/15/ElasticSearch-cluster-health-metrics/</id>
    <published>2017-10-15T12:35:47.137Z</published>
    <updated>2017-10-15T12:34:01.227Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb5.jpeg-1" alt=""></p>
<p>最近在做 ElasticSearch 的信息（集群和节点）监控，特此稍微整理下学到的东西。这篇文章主要介绍集群的监控。<br><a id="more"></a></p>
<h3 id="要监控哪些-ElasticSearch-metrics"><a href="#要监控哪些-ElasticSearch-metrics" class="headerlink" title="要监控哪些 ElasticSearch metrics"></a>要监控哪些 ElasticSearch metrics</h3><p><img src="https://datadog-prod.imgix.net/img/blog/monitor-elasticsearch-performance-metrics/elasticsearch-dashboard-final2.png?fit=max" alt=""></p>
<p>Elasticsearch 提供了大量的 Metric，可以帮助您检测到问题的迹象，在遇到节点不可用、out-of-memory、long garbage collection times 的时候采取相应措施。但是指标太多了，有时我们并不需要这么多，这就需要我们进行筛选。</p>
<h3 id="集群健康"><a href="#集群健康" class="headerlink" title="集群健康"></a>集群健康</h3><p>一个 Elasticsearch 集群至少包括一个节点和一个索引。或者它 可能有一百个数据节点、三个单独的主节点，以及一小打客户端节点——这些共同操作一千个索引（以及上万个分片）。</p>
<p>不管集群扩展到多大规模，你都会想要一个快速获取集群状态的途径。<code>Cluster Health</code> API 充当的就是这个角色。你可以把它想象成是在一万英尺的高度鸟瞰集群。它可以告诉你安心吧一切都好，或者警告你集群某个地方有问题。</p>
<p>让我们执行一下 <code>cluster-health</code> API 然后看看响应体是什么样子的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET _cluster/health</div></pre></td></tr></table></figure>
<p>和 Elasticsearch 里其他 API 一样，<code>cluster-health</code> 会返回一个 JSON 响应。这对自动化和告警系统来说，非常便于解析。响应中包含了和你集群有关的一些关键信息：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch_zach"</span>,</div><div class="line">   <span class="attr">"status"</span>: <span class="string">"green"</span>,</div><div class="line">   <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</div><div class="line">   <span class="attr">"number_of_nodes"</span>: <span class="number">1</span>,</div><div class="line">   <span class="attr">"number_of_data_nodes"</span>: <span class="number">1</span>,</div><div class="line">   <span class="attr">"active_primary_shards"</span>: <span class="number">10</span>,</div><div class="line">   <span class="attr">"active_shards"</span>: <span class="number">10</span>,</div><div class="line">   <span class="attr">"relocating_shards"</span>: <span class="number">0</span>,</div><div class="line">   <span class="attr">"initializing_shards"</span>: <span class="number">0</span>,</div><div class="line">   <span class="attr">"unassigned_shards"</span>: <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>响应信息中最重要的一块就是 <code>status</code> 字段。状态可能是下列三个值之一 :</p>
<table>
<thead>
<tr>
<th style="text-align:center">status</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">green</td>
<td style="text-align:center">所有的主分片和副本分片都已分配。你的集群是 100% 可用的。</td>
</tr>
<tr>
<td style="text-align:center">yellow</td>
<td style="text-align:center">所有的主分片已经分片了，但至少还有一个副本是缺失的。不会有数据丢失，所以搜索结果依然是完整的。不过，你的高可用性在某种程度上被弱化。如果 更多的 分片消失，你就会丢数据了。把 yellow 想象成一个需要及时调查的警告。</td>
</tr>
<tr>
<td style="text-align:center">red</td>
<td style="text-align:center">至少一个主分片（以及它的全部副本）都在缺失中。这意味着你在缺少数据：搜索只能返回部分数据，而分配到这个分片上的写入请求会返回一个异常。</td>
</tr>
</tbody>
</table>
<ul>
<li><code>number_of_nodes</code> 和 <code>number_of_data_nodes</code> 这个命名完全是自描述的。</li>
<li><code>active_primary_shards</code> 指出你集群中的主分片数量。这是涵盖了所有索引的汇总值。</li>
<li><code>active_shards</code> 是涵盖了所有索引的所有分片的汇总值，即包括副本分片。</li>
<li><code>relocating_shards</code> 显示当前正在从一个节点迁往其他节点的分片的数量。通常来说应该是 0，不过在 Elasticsearch 发现集群不太均衡时，该值会上涨。比如说：添加了一个新节点，或者下线了一个节点。</li>
<li><code>initializing_shards</code> 是刚刚创建的分片的个数。比如，当你刚创建第一个索引，分片都会短暂的处于 <code>initializing</code> 状态。这通常会是一个临时事件，分片不应该长期停留在 <code>initializing</code>状态。你还可能在节点刚重启的时候看到 <code>initializing</code> 分片：当分片从磁盘上加载后，它们会从<code>initializing</code> 状态开始。</li>
<li><code>unassigned_shards</code> 是已经在集群状态中存在的分片，但是实际在集群里又找不着。通常未分配分片的来源是未分配的副本。比如，一个有 5 分片和 1 副本的索引，在单节点集群上，就会有 5 个未分配副本分片。如果你的集群是 <code>red</code> 状态，也会长期保有未分配分片（因为缺少主分片）。</li>
</ul>
<h3 id="集群统计"><a href="#集群统计" class="headerlink" title="集群统计"></a>集群统计</h3><p>集群统计信息包含 集群的分片数，文档数，存储空间，缓存信息，内存作用率，插件内容，文件系统内容，JVM 作用状况，系统 CPU，OS 信息，段信息。</p>
<p>查看全部统计信息命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET &apos;http://localhost:9200/_cluster/stats?human&amp;pretty&apos;</div></pre></td></tr></table></figure>
<p>返回 JSON 结果：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"timestamp"</span>: <span class="number">1459427693515</span>,</div><div class="line">   <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</div><div class="line">   <span class="attr">"status"</span>: <span class="string">"green"</span>,</div><div class="line">   <span class="attr">"indices"</span>: &#123;</div><div class="line">      <span class="attr">"count"</span>: <span class="number">2</span>,</div><div class="line">      <span class="attr">"shards"</span>: &#123;</div><div class="line">         <span class="attr">"total"</span>: <span class="number">10</span>,</div><div class="line">         <span class="attr">"primaries"</span>: <span class="number">10</span>,</div><div class="line">         <span class="attr">"replication"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"index"</span>: &#123;</div><div class="line">            <span class="attr">"shards"</span>: &#123;</div><div class="line">               <span class="attr">"min"</span>: <span class="number">5</span>,</div><div class="line">               <span class="attr">"max"</span>: <span class="number">5</span>,</div><div class="line">               <span class="attr">"avg"</span>: <span class="number">5</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">"primaries"</span>: &#123;</div><div class="line">               <span class="attr">"min"</span>: <span class="number">5</span>,</div><div class="line">               <span class="attr">"max"</span>: <span class="number">5</span>,</div><div class="line">               <span class="attr">"avg"</span>: <span class="number">5</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">"replication"</span>: &#123;</div><div class="line">               <span class="attr">"min"</span>: <span class="number">0</span>,</div><div class="line">               <span class="attr">"max"</span>: <span class="number">0</span>,</div><div class="line">               <span class="attr">"avg"</span>: <span class="number">0</span></div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"docs"</span>: &#123;</div><div class="line">         <span class="attr">"count"</span>: <span class="number">10</span>,</div><div class="line">         <span class="attr">"deleted"</span>: <span class="number">0</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"store"</span>: &#123;</div><div class="line">         <span class="attr">"size"</span>: <span class="string">"16.2kb"</span>,</div><div class="line">         <span class="attr">"size_in_bytes"</span>: <span class="number">16684</span>,</div><div class="line">         <span class="attr">"throttle_time"</span>: <span class="string">"0s"</span>,</div><div class="line">         <span class="attr">"throttle_time_in_millis"</span>: <span class="number">0</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"fielddata"</span>: &#123;</div><div class="line">         <span class="attr">"memory_size"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"memory_size_in_bytes"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"evictions"</span>: <span class="number">0</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"query_cache"</span>: &#123;</div><div class="line">         <span class="attr">"memory_size"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"memory_size_in_bytes"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"total_count"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"hit_count"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"miss_count"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"cache_size"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"cache_count"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"evictions"</span>: <span class="number">0</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"completion"</span>: &#123;</div><div class="line">         <span class="attr">"size"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"size_in_bytes"</span>: <span class="number">0</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"segments"</span>: &#123;</div><div class="line">         <span class="attr">"count"</span>: <span class="number">4</span>,</div><div class="line">         <span class="attr">"memory"</span>: <span class="string">"8.6kb"</span>,</div><div class="line">         <span class="attr">"memory_in_bytes"</span>: <span class="number">8898</span>,</div><div class="line">         <span class="attr">"terms_memory"</span>: <span class="string">"6.3kb"</span>,</div><div class="line">         <span class="attr">"terms_memory_in_bytes"</span>: <span class="number">6522</span>,</div><div class="line">         <span class="attr">"stored_fields_memory"</span>: <span class="string">"1.2kb"</span>,</div><div class="line">         <span class="attr">"stored_fields_memory_in_bytes"</span>: <span class="number">1248</span>,</div><div class="line">         <span class="attr">"term_vectors_memory"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"term_vectors_memory_in_bytes"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"norms_memory"</span>: <span class="string">"384b"</span>,</div><div class="line">         <span class="attr">"norms_memory_in_bytes"</span>: <span class="number">384</span>,</div><div class="line">         <span class="attr">"doc_values_memory"</span>: <span class="string">"744b"</span>,</div><div class="line">         <span class="attr">"doc_values_memory_in_bytes"</span>: <span class="number">744</span>,</div><div class="line">         <span class="attr">"index_writer_memory"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"index_writer_memory_in_bytes"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"version_map_memory"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"version_map_memory_in_bytes"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"fixed_bit_set"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"fixed_bit_set_memory_in_bytes"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"file_sizes"</span>: &#123;&#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"percolator"</span>: &#123;</div><div class="line">         <span class="attr">"num_queries"</span>: <span class="number">0</span></div><div class="line">      &#125;</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">"nodes"</span>: &#123;</div><div class="line">      <span class="attr">"count"</span>: &#123;</div><div class="line">         <span class="attr">"total"</span>: <span class="number">1</span>,</div><div class="line">         <span class="attr">"data"</span>: <span class="number">1</span>,</div><div class="line">         <span class="attr">"coordinating_only"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"master"</span>: <span class="number">1</span>,</div><div class="line">         <span class="attr">"ingest"</span>: <span class="number">1</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"versions"</span>: [</div><div class="line">         <span class="string">"5.6.3"</span></div><div class="line">      ],</div><div class="line">      <span class="attr">"os"</span>: &#123;</div><div class="line">         <span class="attr">"available_processors"</span>: <span class="number">8</span>,</div><div class="line">         <span class="attr">"allocated_processors"</span>: <span class="number">8</span>,</div><div class="line">         <span class="attr">"names"</span>: [</div><div class="line">            &#123;</div><div class="line">               <span class="attr">"name"</span>: <span class="string">"Mac OS X"</span>,</div><div class="line">               <span class="attr">"count"</span>: <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">         ],</div><div class="line">         <span class="attr">"mem"</span> : &#123;</div><div class="line">            <span class="attr">"total"</span> : <span class="string">"16gb"</span>,</div><div class="line">            <span class="attr">"total_in_bytes"</span> : <span class="number">17179869184</span>,</div><div class="line">            <span class="attr">"free"</span> : <span class="string">"78.1mb"</span>,</div><div class="line">            <span class="attr">"free_in_bytes"</span> : <span class="number">81960960</span>,</div><div class="line">            <span class="attr">"used"</span> : <span class="string">"15.9gb"</span>,</div><div class="line">            <span class="attr">"used_in_bytes"</span> : <span class="number">17097908224</span>,</div><div class="line">            <span class="attr">"free_percent"</span> : <span class="number">0</span>,</div><div class="line">            <span class="attr">"used_percent"</span> : <span class="number">100</span></div><div class="line">         &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"process"</span>: &#123;</div><div class="line">         <span class="attr">"cpu"</span>: &#123;</div><div class="line">            <span class="attr">"percent"</span>: <span class="number">9</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">"open_file_descriptors"</span>: &#123;</div><div class="line">            <span class="attr">"min"</span>: <span class="number">268</span>,</div><div class="line">            <span class="attr">"max"</span>: <span class="number">268</span>,</div><div class="line">            <span class="attr">"avg"</span>: <span class="number">268</span></div><div class="line">         &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"jvm"</span>: &#123;</div><div class="line">         <span class="attr">"max_uptime"</span>: <span class="string">"13.7s"</span>,</div><div class="line">         <span class="attr">"max_uptime_in_millis"</span>: <span class="number">13737</span>,</div><div class="line">         <span class="attr">"versions"</span>: [</div><div class="line">            &#123;</div><div class="line">               <span class="attr">"version"</span>: <span class="string">"1.8.0_74"</span>,</div><div class="line">               <span class="attr">"vm_name"</span>: <span class="string">"Java HotSpot(TM) 64-Bit Server VM"</span>,</div><div class="line">               <span class="attr">"vm_version"</span>: <span class="string">"25.74-b02"</span>,</div><div class="line">               <span class="attr">"vm_vendor"</span>: <span class="string">"Oracle Corporation"</span>,</div><div class="line">               <span class="attr">"count"</span>: <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">         ],</div><div class="line">         <span class="attr">"mem"</span>: &#123;</div><div class="line">            <span class="attr">"heap_used"</span>: <span class="string">"57.5mb"</span>,</div><div class="line">            <span class="attr">"heap_used_in_bytes"</span>: <span class="number">60312664</span>,</div><div class="line">            <span class="attr">"heap_max"</span>: <span class="string">"989.8mb"</span>,</div><div class="line">            <span class="attr">"heap_max_in_bytes"</span>: <span class="number">1037959168</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">"threads"</span>: <span class="number">90</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"fs"</span>: &#123;</div><div class="line">         <span class="attr">"total"</span>: <span class="string">"200.6gb"</span>,</div><div class="line">         <span class="attr">"total_in_bytes"</span>: <span class="number">215429193728</span>,</div><div class="line">         <span class="attr">"free"</span>: <span class="string">"32.6gb"</span>,</div><div class="line">         <span class="attr">"free_in_bytes"</span>: <span class="number">35064553472</span>,</div><div class="line">         <span class="attr">"available"</span>: <span class="string">"32.4gb"</span>,</div><div class="line">         <span class="attr">"available_in_bytes"</span>: <span class="number">34802409472</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"plugins"</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"analysis-icu"</span>,</div><div class="line">          <span class="attr">"version"</span>: <span class="string">"5.6.3"</span>,</div><div class="line">          <span class="attr">"description"</span>: <span class="string">"The ICU Analysis plugin integrates Lucene ICU module into elasticsearch, adding ICU relates analysis components."</span>,</div><div class="line">          <span class="attr">"classname"</span>: <span class="string">"org.elasticsearch.plugin.analysis.icu.AnalysisICUPlugin"</span>,</div><div class="line">          <span class="attr">"has_native_controller"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"ingest-geoip"</span>,</div><div class="line">          <span class="attr">"version"</span>: <span class="string">"5.6.3"</span>,</div><div class="line">          <span class="attr">"description"</span>: <span class="string">"Ingest processor that uses looksup geo data based on ip adresses using the Maxmind geo database"</span>,</div><div class="line">          <span class="attr">"classname"</span>: <span class="string">"org.elasticsearch.ingest.geoip.IngestGeoIpPlugin"</span>,</div><div class="line">          <span class="attr">"has_native_controller"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"ingest-user-agent"</span>,</div><div class="line">          <span class="attr">"version"</span>: <span class="string">"5.6.3"</span>,</div><div class="line">          <span class="attr">"description"</span>: <span class="string">"Ingest processor that extracts information from a user agent"</span>,</div><div class="line">          <span class="attr">"classname"</span>: <span class="string">"org.elasticsearch.ingest.useragent.IngestUserAgentPlugin"</span>,</div><div class="line">          <span class="attr">"has_native_controller"</span>: <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="内存使用和-GC-指标"><a href="#内存使用和-GC-指标" class="headerlink" title="内存使用和 GC 指标"></a>内存使用和 GC 指标</h4><p>在运行 Elasticsearch 时，内存是您要密切监控的关键资源之一。 Elasticsearch 和 Lucene 以两种方式利用节点上的所有可用 RAM：JVM heap 和文件系统缓存。 Elasticsearch 运行在Java虚拟机（JVM）中，这意味着JVM垃圾回收的持续时间和频率将成为其他重要的监控领域。</p>
<p>上面返回的 JSON监控的指标有我个人觉得有这些：</p>
<ul>
<li>nodes.successful</li>
<li>nodes.failed</li>
<li>nodes.total</li>
<li>nodes.mem.used_percent</li>
<li>nodes.process.cpu.percent</li>
<li>nodes.jvm.mem.heap_used</li>
</ul>
<p>可以看到 JSON 文件是很复杂的，如果从这复杂的 JSON 中获取到对应的指标（key）的值呢，这里请看文章 ：<a href="http://www.54tianzhisheng.cn/2017/10/13/JsonPath/" target="_blank" rel="external">JsonPath —— JSON 解析神器</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>这里主要讲下 ES 集群的一些监控信息，有些监控指标是个人觉得需要监控的，但是具体情况还是得看需求了。下篇文章主要讲节点的监控信息。转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://www.datadoghq.com/blog/monitor-elasticsearch-performance-metrics/" target="_blank" rel="external">How to monitor Elasticsearch performance</a></p>
<p>2、<a href="http://www.oneapm.com/ci/elasticsearch.html" target="_blank" rel="external">ElasticSearch 性能监控</a></p>
<p>3、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html" target="_blank" rel="external">cluster-health</a></p>
<p>4、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-stats.html" target="_blank" rel="external">cluster-stats</a></p>
<h3 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h3><p>1、<a href="http://www.54tianzhisheng.cn/2017/09/07/Elasticsearch-analyzers/" target="_blank" rel="external">Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p>
<p>2、<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="external">全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb5.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在做 ElasticSearch 的信息（集群和节点）监控，特此稍微整理下学到的东西。这篇文章主要介绍集群的监控。&lt;br&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 搭建最新 Nexus3 Maven 私服</title>
    <link href="http://yoursite.com/2017/10/14/Nexus3-Maven/"/>
    <id>http://yoursite.com/2017/10/14/Nexus3-Maven/</id>
    <published>2017-10-13T17:37:00.733Z</published>
    <updated>2017-10-14T08:22:10.095Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb4.jpeg-1" alt=""></p>
<h3 id="Maven-介绍"><a href="#Maven-介绍" class="headerlink" title="Maven 介绍"></a>Maven 介绍</h3><p>Apache Maven 是一个创新的软件项目管理和综合工具。<br>Maven 提供了一个基于项目对象模型（POM）文件的新概念来管理项目的构建，可以从一个中心资料片管理项目构建，报告和文件。<br><a id="more"></a><br>Maven 最强大的功能就是能够自动下载项目依赖库。<br>Maven 提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven 使用标准的目录结构和默认构建生命周期。<br>在多个开发团队环境时，Maven 可以设置按标准在非常短的时间里完成配置工作。由于大部分项目的设置都很简单，并且可重复使用，Maven 让开发人员的工作更轻松，同时创建报表，检查，构建和测试自动化设置。<br>Maven 项目的结构和内容在一个 XML 文件中声明，pom.xml 项目对象模型（POM），这是整个 Maven 系统的基本单元。</p>
<p>Maven 提供了开发人员的方式来管理：<br>1）Builds<br>2）Documentation<br>3）Reporting<br>4）Dependencies<br>5）SCMs<br>6）Releases<br>7）Distribution<br>8）mailing list<br>概括地说，Maven 简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接。<br>Maven 增加可重用性并负责建立相关的任务。<br>Maven 最初设计，是以简化 Jakarta Turbine 项目的建设。在几个项目，每个项目包含了不同的 Ant 构建文件。 JAR 检查到 CVS。<br>Apache 组织开发 Maven 可以建立多个项目，发布项目信息，项目部署，在几个项目中 JAR 文件提供团队合作和帮助。</p>
<p>Maven 主要目标是提供给开发人员：<br>1）项目是可重复使用，易维护，更容易理解的一个综合模型。<br>2）插件或交互的工具，这种声明性的模式。</p>
<h3 id="私服介绍"><a href="#私服介绍" class="headerlink" title="私服介绍"></a>私服介绍</h3><p>私服是指私有服务器，是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构建。有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/907596.png-1" alt=""></p>
<h3 id="Nexus-介绍"><a href="#Nexus-介绍" class="headerlink" title="Nexus 介绍"></a>Nexus 介绍</h3><p>Nexus 是一个强大的 Maven 仓库管理器，它极大地简化了本地内部仓库的维护和外部仓库的访问。<br>如果使用了公共的 Maven 仓库服务器，可以从 Maven 中央仓库下载所需要的构件（Artifact），但这通常不是一个好的做法。<br>正常做法是在本地架设一个 Maven 仓库服务器，即利用 Nexus 私服可以只在一个地方就能够完全控制访问和部署在你所维护仓库中的每个 Artifact。<br>Nexus 在代理远程仓库的同时维护本地仓库，以降低中央仓库的负荷, 节省外网带宽和时间，Nexus 私服就可以满足这样的需要。<br>Nexus 是一套 “开箱即用” 的系统不需要数据库，它使用文件系统加 Lucene 来组织数据。<br>Nexus 使用 ExtJS 来开发界面，利用 Restlet 来提供完整的 REST APIs，通过 m2eclipse 与 Eclipse 集成使用。<br>Nexus 支持 WebDAV 与 LDAP 安全身份认证。<br>Nexus 还提供了强大的仓库管理功能，构件搜索功能，它基于 REST，友好的 UI 是一个 extjs 的 REST 客户端，它占用较少的内存，基于简单文件系统而非数据库。</p>
<p>为什么要构建 Nexus 私服？<br>如果没有 Nexus 私服，我们所需的所有构件都需要通过 maven 的中央仓库和第三方的 Maven 仓库下载到本地，而一个团队中的所有人都重复的从 maven 仓库下载构件无疑加大了仓库的负载和浪费了外网带宽，如果网速慢的话，还会影响项目的进程。很多情况下项目的开发都是在内网进行的，连接不到 maven 仓库怎么办呢？开发的公共构件怎么让其它项目使用？这个时候我们不得不为自己的团队搭建属于自己的 maven 私服，这样既节省了网络带宽也会加速项目搭建的进程，当然前提条件就是你的私服中拥有项目所需的所有构件。</p>
<p>总之，在本地构建 nexus 私服的好处有：<br>1）加速构建；<br>2）节省带宽；<br>3）节省中央 maven 仓库的带宽；<br>4）稳定（应付一旦中央服务器出问题的情况）；<br>5）控制和审计；<br>6）能够部署第三方构件；<br>7）可以建立本地内部仓库；<br>8）可以建立公共仓库<br>这些优点使得 Nexus 日趋成为最流行的 Maven 仓库管理器。</p>
<h3 id="1-安装-jdk1-8"><a href="#1-安装-jdk1-8" class="headerlink" title="1. 安装 jdk1.8"></a>1. 安装 jdk1.8</h3><p>关于 jdk1.8 的安装, 在这里就不做赘述了</p>
<h3 id="2-安装-maven"><a href="#2-安装-maven" class="headerlink" title="2. 安装 maven"></a>2. 安装 maven</h3><p>关于 maven 的安装, 本文在这里就不详细写了</p>
<h3 id="3-安装-nexus3"><a href="#3-安装-nexus3" class="headerlink" title="3. 安装 nexus3"></a>3. 安装 nexus3</h3><h4 id="1-下载-nexus-3-6-0-02-unix-tar-gz"><a href="#1-下载-nexus-3-6-0-02-unix-tar-gz" class="headerlink" title="1. 下载 nexus-3.6.0-02-unix.tar.gz"></a>1. 下载 nexus-3.6.0-02-unix.tar.gz</h4><p>官网链接地址：<a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="external">https://www.sonatype.com/download-oss-sonatype</a>  下载 linux 最新版本，直接下载速度可能很慢，建议用迅雷下载会快很多的。</p>
<h4 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nexus-3.6.0-02-unix.tar.gz -C /usr/local/</div></pre></td></tr></table></figure>
<h4 id="3-启动-nexus3"><a href="#3-启动-nexus3" class="headerlink" title="3. 启动 nexus3"></a>3. 启动 nexus3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nexus-3.6.0-02/bin/</div><div class="line">./nexus run &amp;</div></pre></td></tr></table></figure>
<p><strong>稍等一会 (首次启动会比较慢), 当出现以下日志的时候表示启动成功!</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-------------------------------------------------</div><div class="line"></div><div class="line">Started Sonatype Nexus OSS 3.6.0-02</div><div class="line"></div><div class="line">-------------------------------------------------</div></pre></td></tr></table></figure>
<h4 id="4-开启远程访问端口"><a href="#4-开启远程访问端口" class="headerlink" title="4. 开启远程访问端口"></a>4. 开启远程访问端口</h4><p>关闭防火墙，并开启远程访问端口 8081</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/iptables</div><div class="line">添加：</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8081 -j ACCEPT</div></pre></td></tr></table></figure>
<h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h4><p><img src="http://img.blog.csdn.net/20171010021242176?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91Z291bGU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nexus3默认端口是:8081</div><div class="line">nexus3默认账号是:admin</div><div class="line">nexus3默认密码是:admin123</div></pre></td></tr></table></figure>
<h4 id="6-设置开机自启动"><a href="#6-设置开机自启动" class="headerlink" title="6. 设置开机自启动"></a>6. 设置开机自启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/local/nexus-3.6.0-02/bin/nexus /etc/init.d/nexus3</div><div class="line">chkconfig --add nexus3</div><div class="line">chkconfig nexus3 on</div></pre></td></tr></table></figure>
<h4 id="7-修改-nexus3-的运行用户为-root"><a href="#7-修改-nexus3-的运行用户为-root" class="headerlink" title="7. 修改 nexus3 的运行用户为 root"></a>7. 修改 nexus3 的运行用户为 root</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim nexus.rc</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//设置</div><div class="line">run_as_user=&quot;root&quot;</div></pre></td></tr></table></figure>
<h4 id="8-修改-nexus3-启动时要使用的-jdk-版本"><a href="#8-修改-nexus3-启动时要使用的-jdk-版本" class="headerlink" title="8. 修改 nexus3 启动时要使用的 jdk 版本"></a>8. 修改 nexus3 启动时要使用的 jdk 版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim nexus</div></pre></td></tr></table></figure>
<p><strong>第 14 行:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSTALL4J_JAVA_HOME_OVERRIDE=/usr/local/java/jdk1.8.0_144</div></pre></td></tr></table></figure>
<h4 id="9-修改-nexus3-默认端口-可选"><a href="#9-修改-nexus3-默认端口-可选" class="headerlink" title="9. 修改 nexus3 默认端口 (可选)"></a>9. 修改 nexus3 默认端口 (可选)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nexus-3.6.0-02/etc/</div><div class="line">vim nexus-default.properties</div></pre></td></tr></table></figure>
<p><strong>默认端口: 8081</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">application-port=8081</div></pre></td></tr></table></figure>
<h4 id="10-修改-nexus3-数据以及相关日志的存储位置-可选-："><a href="#10-修改-nexus3-数据以及相关日志的存储位置-可选-：" class="headerlink" title="10. 修改 nexus3 数据以及相关日志的存储位置 (可选)："></a>10. 修改 nexus3 数据以及相关日志的存储位置 (可选)：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@MiWiFi-R3-srv bin]# cd /usr/local/nexus-3.6.0-02/bin/</div><div class="line">[root@MiWiFi-R3-srv bin]# vim nexus.vmoptions</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-XX:LogFile=./sonatype-work/nexus3/log/jvm.log</div><div class="line">-Dkaraf.data=./sonatype-work/nexus3</div><div class="line">-Djava.io.tmpdir=./sonatype-work/nexus3/tmp</div></pre></td></tr></table></figure>
<p>出现上面 5 中的测试页面，说明配置 nexus 成功！ 点击右上角 “Log in”， 输入默认用户名 (admin) 和默认密码（admin123）登录</p>
<p>至此, nexus3_maven 的私服就搭建完成了!!!</p>
<p>可以点击上面的 “设置” 图标，在 “设置” 里可以添加用户、角色，对接 LDAP 等的设置，如下：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/67407111.png-1" alt=""></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1502291718.png-1" alt=""></p>
<p>可以在 “管理” 里查看 nexus 的系统信息</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/558914286.png-1" alt=""></p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>1.component name 的一些说明：<br>    1）maven-central：maven 中央库，默认从 <a href="https://repo1.maven.org/maven2" target="_blank" rel="external">https://repo1.maven.org/maven2</a> / 拉取 jar<br>    2）maven-releases：私库发行版 jar<br>    3）maven-snapshots：私库快照（调试版本）jar<br>    4）maven-public：仓库分组，把上面三个仓库组合在一起对外提供服务，在本地 maven 基础配置 settings.xml 中使用。</p>
<p>2.Nexus 默认的仓库类型有以下四种：</p>
<pre><code>1）group(仓库组类型)：又叫组仓库，用于方便开发人员自己设定的仓库；

2）hosted(宿主类型)：内部项目的发布仓库（内部开发人员，发布上去存放的仓库）；

3）proxy(代理类型)：从远程中央仓库中寻找数据的仓库（可以点击对应的仓库的 Configuration 页签下 Remote Storage Location 属性的值即被代理的远程仓库的路径）；

4）virtual(虚拟类型)：虚拟仓库（这个基本用不到，重点关注上面三个仓库的使用）；
</code></pre><p>3.Policy(策略): 表示该仓库为发布 (Release) 版本仓库还是快照 (Snapshot) 版本仓库；</p>
<p>4.Public Repositories 下的仓库</p>
<p>   1）3rd party: 无法从公共仓库获得的第三方发布版本的构件仓库，即第三方依赖的仓库，这个数据通常是由内部人员自行下载之后发布上去；</p>
<p>   2）Apache Snapshots: 用了代理 ApacheMaven 仓库快照版本的构件仓库</p>
<p>   3）Central: 用来代理 maven 中央仓库中发布版本构件的仓库</p>
<p>   4）Central M1 shadow: 用于提供中央仓库中 M1 格式的发布版本的构件镜像仓库</p>
<p>   5）Codehaus Snapshots: 用来代理 CodehausMaven 仓库的快照版本构件的仓库</p>
<p>   6）Releases: 内部的模块中 release 模块的发布仓库，用来部署管理内部的发布版本构件的宿主类型仓库；release 是发布版本；</p>
<p>   7）Snapshots: 发布内部的 SNAPSHOT 模块的仓库，用来部署管理内部的快照版本构件的宿主类型仓库；snapshots 是快照版本，也就是不稳定版本<br>所以自定义构建的仓库组代理仓库的顺序为：Releases，Snapshots，3rd party，Central。也可以使用 oschina 放到 Central 前面，下载包会更快。</p>
<p>5.Nexus 默认的端口是 8081，可以在 etc/nexus-default.properties 配置中修改。</p>
<p>6.Nexus 默认的用户名密码是 admin/admin123</p>
<ol>
<li>当遇到奇怪问题时，重启 nexus，重启后 web 界面要 1 分钟左右后才能访问。</li>
</ol>
<p>8.Nexus 的工作目录是 sonatype-work（路径一般在 nexus 同级目录下）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@master-node local]# pwd</div><div class="line">/usr/local</div><div class="line">[root@master-node local]# ls nexus/</div><div class="line">bin deploy etc lib LICENSE.txt NOTICE.txt public system</div><div class="line">[root@master-node local]# ls sonatype-work/</div><div class="line">nexus3</div><div class="line">[root@master-node local]# ls sonatype-work/nexus3/</div><div class="line">backup blobs cache db elasticsearch etc generated-bundles health-check instances keystores lock log orient port tmp</div></pre></td></tr></table></figure></p>
<p>Nexus 仓库分类的概念：<br>1）Maven 可直接从宿主仓库下载构件, 也可以从代理仓库下载构件, 而代理仓库间接的从远程仓库下载并缓存构件<br>2）为了方便, Maven 可以从仓库组下载构件, 而仓库组并没有时间的内容 (下图中用虚线表示, 它会转向包含的宿主仓库或者代理仓库获得实际构件的内容).</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/016524.png-1" alt=""></p>
<h3 id="Nexus-的-web-界面功能介绍"><a href="#Nexus-的-web-界面功能介绍" class="headerlink" title="Nexus 的 web 界面功能介绍"></a>Nexus 的 web 界面功能介绍</h3><h4 id="1-Browse-Server-Content"><a href="#1-Browse-Server-Content" class="headerlink" title="1.Browse Server Content"></a>1.Browse Server Content</h4><p><img src="http://ohfk1r827.bkt.clouddn.com/496.png-1" alt=""></p>
<p>1.1  Search<br>这个就是类似 Maven 仓库上的搜索功能，就是从私服上查找是否有哪些包。<br>注意：<br>1）在 Search 这级是支持模糊搜索的，如图所示：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/888.png-1" alt=""></p>
<p>2）如果进入具体的目录，好像不支持模糊搜索，如图所示：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/4456.png-1" alt=""></p>
<p>1.2  Browse</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/078817.png-1" alt=""></p>
<p>1）Assets<br>这是能看到所有的资源，包含 Jar，已经对 Jar 的一些描述信息。<br>2）Components<br>这里只能看到 Jar 包。</p>
<h4 id="2-Server-Adminstration-And-configuration"><a href="#2-Server-Adminstration-And-configuration" class="headerlink" title="2.Server Adminstration And configuration"></a>2.Server Adminstration And configuration</h4><p>看到这个选项的前提是要进行登录的，如上面已经介绍登陆方法，右上角点击 “Sign In” 的登录按钮，输入 admin/admin123, 登录成功之后，即可看到此功能，如图所示：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/43915.png-1" alt=""></p>
<p>2.1 Blob Stores<br>文件存储的地方，创建一个目录的话，对应文件系统的一个目录，如图所示：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/71.png-1" alt=""></p>
<p>2.2 Repositories</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/49455.png-1" alt=""></p>
<p>1）Proxy<br>这里就是代理的意思，代理中央 Maven 仓库，当 PC 访问中央库的时候，先通过 Proxy 下载到 Nexus 仓库，然后再从 Nexus 仓库下载到 PC 本地。<br>这样的优势只要其中一个人从中央库下来了，以后大家都是从 Nexus 私服上进行下来，私服一般部署在内网，这样大大节约的宽带。<br>创建 Proxy 的具体步骤<br>1 点击 “Create Repositories” 按钮</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/54.png-1" alt=""></p>
<p>2 选择要创建的类型</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/386.png-1" alt=""></p>
<p>3 填写详细信息<br>Name：就是为代理起个名字<br>Remote Storage: 代理的地址，Maven 的地址为: <a href="https://repo1.maven.org/maven2/" target="_blank" rel="external">https://repo1.maven.org/maven2/</a><br>Blob Store: 选择代理下载包的存放路径</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/21037653.png-1" alt=""></p>
<p>2）Hosted<br>Hosted 是宿主机的意思，就是怎么把第三方的 Jar 放到私服上。<br>Hosted 有三种方式，Releases、SNAPSHOT、Mixed<br>Releases: 一般是已经发布的 Jar 包<br>Snapshot: 未发布的版本<br>Mixed：混合的<br>Hosted 的创建和 Proxy 是一致的，具体步骤和上面基本一致。如下：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/723208432.png-1" alt=""></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1949446719.png-1" alt=""></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/2005652543.png-1" alt=""></p>
<p><strong>注意事项：</strong><br>Deployment Pollcy: 需要把策略改成 “Allow redeploy”。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/303191395.png-1" alt=""></p>
<p>3）Group<br>能把两个仓库合成一个仓库来使用，目前没使用过，所以没做详细的研究。</p>
<p>2.3 Security<br>这里主要是用户、角色、权限的配置（上面已经提到了在这里添加用户和角色等）</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1991046629.png-1" alt=""></p>
<p>2.4 Support<br>包含日志及数据分析。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/269936853.png-1" alt=""></p>
<p>2.5 System<br>主要是邮件服务器，调度的设置地方<br>这部分主要讲怎么和 Maven 做集成, 集成的方式主要分以下种情况：代理中央仓库、Snapshot 包的管理、Release 包的管理、第三方 Jar 上传到 Nexus 上。</p>
<h4 id="代理中央仓库"><a href="#代理中央仓库" class="headerlink" title="代理中央仓库"></a>代理中央仓库</h4><p>只要在 PMO 文件中配置私服的地址（比如 <a href="http://192.168.1.14:8081）即可，配置如下：" target="_blank" rel="external">http://192.168.1.14:8081）即可，配置如下：</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.14:8081/repository/maven-central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Snapshot-包的管理"><a href="#Snapshot-包的管理" class="headerlink" title="Snapshot 包的管理"></a>Snapshot 包的管理</h4><p>1）修改 Maven 的 settings.xml 文件，加入认证机制</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">server</span>&gt;</span><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2）修改工程的 Pom 文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.14:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">site</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Sites<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>dav:http://192.168.1.14:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">site</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意事项:</strong></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1284881495.png-1" alt=""></p>
<p>上面修改的 Pom 文件如截图中的名字要跟 / usr/local/maven/conf/settings.xml 文件中的名字一定要对应上。</p>
<p>3）上传到 Nexus 上</p>
<p>1– 项目编译成的 jar 是 Snapshot(POM 文件的头部)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhisheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test-nexus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SHAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2– 使用 mvn deploy 命令运行即可（运行结果在此略过）</p>
<p>3– 因为 Snapshot 是快照版本，默认他每次会把 Jar 加一个时间戳，做为历史备份版本。</p>
<h4 id="Releases-包的管理"><a href="#Releases-包的管理" class="headerlink" title="Releases 包的管理"></a>Releases 包的管理</h4><p>1）与 Snapshot 大同小异，只是上传到私服上的 Jar 包不会自动带时间戳<br>2）与 Snapshot 配置不同的地方，就是工程的 PMO 文件，加入 repository 配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.14:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3）打包的时候需要把 Snapshot 去掉</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhisheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test-nexus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> |</div></pre></td></tr></table></figure>
<h4 id="第三方-Jar-上传到-Nexus"><a href="#第三方-Jar-上传到-Nexus" class="headerlink" title="第三方 Jar 上传到 Nexus"></a>第三方 Jar 上传到 Nexus</h4><p>[root@master-node src]# mvn deploy:deploy-file -DgroupId=org.jasig.cas.client -DartifactId=cas-client-core -Dversion=3.1.3 -Dpackag<br><strong>注意事项：</strong><br>-DrepositoryId=nexus 对应的就是 Maven 中 settings.xml 的认证配的名字。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>搭建的时候是参考网上博客，写篇完整的博客再回馈给网上。转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/10/14/Nexus3-Maven/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/10/14/Nexus3-Maven/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb4.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Maven-介绍&quot;&gt;&lt;a href=&quot;#Maven-介绍&quot; class=&quot;headerlink&quot; title=&quot;Maven 介绍&quot;&gt;&lt;/a&gt;Maven 介绍&lt;/h3&gt;&lt;p&gt;Apache Maven 是一个创新的软件项目管理和综合工具。&lt;br&gt;Maven 提供了一个基于项目对象模型（POM）文件的新概念来管理项目的构建，可以从一个中心资料片管理项目构建，报告和文件。&lt;br&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>JsonPath —— JSON 解析神器</title>
    <link href="http://yoursite.com/2017/10/13/JsonPath/"/>
    <id>http://yoursite.com/2017/10/13/JsonPath/</id>
    <published>2017-10-13T15:59:12.727Z</published>
    <updated>2017-10-13T16:16:21.962Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb3.jpeg-1" alt=""></p>
<p>真乃神器也，再复杂的 Json 都能给你解析出来，非常方便的获取 JSON 的内容，很强大！<br><a id="more"></a><br>语法简介</p>
<table>
<thead>
<tr>
<th><strong>JsonPath</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>$</td>
<td>根节点</td>
</tr>
<tr>
<td>@</td>
<td>当前节点</td>
</tr>
<tr>
<td>.or[]</td>
<td>子节点</td>
</tr>
<tr>
<td>..</td>
<td>选择所有符合条件的节点</td>
</tr>
<tr>
<td>*</td>
<td>所有节点</td>
</tr>
<tr>
<td>[]</td>
<td>迭代器标示，如数组下标</td>
</tr>
<tr>
<td>[,]</td>
<td>支持迭代器中做多选</td>
</tr>
<tr>
<td>[start:end:step]</td>
<td>数组切片运算符</td>
</tr>
<tr>
<td>?()</td>
<td>支持过滤操作</td>
</tr>
<tr>
<td>()</td>
<td>支持表达式计算</td>
</tr>
</tbody>
</table>
<p>JSON 值：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"store"</span>: &#123;</div><div class="line">    <span class="attr">"book"</span>: [</div><div class="line">      &#123; <span class="attr">"category"</span>: <span class="string">"reference"</span>,</div><div class="line">        <span class="attr">"author"</span>: <span class="string">"Nigel Rees"</span>,</div><div class="line">        <span class="attr">"title"</span>: <span class="string">"Sayings of the Century"</span>,</div><div class="line">        <span class="attr">"price"</span>: <span class="number">8.95</span></div><div class="line">      &#125;,</div><div class="line">      &#123; <span class="attr">"category"</span>: <span class="string">"fiction"</span>,</div><div class="line">        <span class="attr">"author"</span>: <span class="string">"Evelyn Waugh"</span>,</div><div class="line">        <span class="attr">"title"</span>: <span class="string">"Sword of Honour"</span>,</div><div class="line">        <span class="attr">"price"</span>: <span class="number">12.99</span>,</div><div class="line">        <span class="attr">"isbn"</span>: <span class="string">"0-553-21311-3"</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"bicycle"</span>: &#123;</div><div class="line">      <span class="attr">"color"</span>: <span class="string">"red"</span>,</div><div class="line">      <span class="attr">"price"</span>: <span class="number">19.95</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>导包：<code>import com.jayway.jsonpath.JsonPath</code></p>
<p>解析代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//输出book[0]的author值</span></div><div class="line">String author = JsonPath.read(json, <span class="string">"$.store.book[0].author"</span>);</div><div class="line">System.out.println(<span class="string">"author\t"</span>+author);</div><div class="line"><span class="comment">//输出全部author的值，使用Iterator迭代</span></div><div class="line">List&lt;String&gt; authors = JsonPath.read(json, <span class="string">"$.store.book[*].author"</span>);</div><div class="line">System.out.println(<span class="string">"authors\t"</span>+authors);</div><div class="line"></div><div class="line"><span class="comment">//输出book[*]中category == 'reference'的book</span></div><div class="line">List&lt;Object&gt; books = JsonPath.read(json, <span class="string">"$.store.book[?(@.category == 'reference')]"</span>);</div><div class="line">System.out.println(<span class="string">"books\t"</span>+books);</div><div class="line"><span class="comment">//输出book[*]中category == 'reference'的book或者</span></div><div class="line">List&lt;Object&gt; books2 = JsonPath.read(json, <span class="string">"$.store.book[?(@.category == 'reference' || @.price&gt;10)]"</span>);</div><div class="line">System.out.println(<span class="string">"books2\t"</span>+books2);</div><div class="line"></div><div class="line"><span class="comment">//输出book[*]中category == 'reference'的book的author</span></div><div class="line">List&lt;Object&gt; books1 = JsonPath.read(json, <span class="string">"$.store.book[?(@.category == 'reference')].author"</span>);</div><div class="line">System.out.println(<span class="string">"books1\t"</span>+books1);</div><div class="line"></div><div class="line"><span class="comment">//输出book[*]中price&gt;10的book</span></div><div class="line">List&lt;Object&gt; b1 = JsonPath.read(json, <span class="string">"$.store.book[?(@.price&gt;10)]"</span>);</div><div class="line">System.out.println(<span class="string">"b1"</span>+b1);</div><div class="line"></div><div class="line"><span class="comment">//输出book[*]中含有isbn元素的book</span></div><div class="line">List&lt;Object&gt; b2 = JsonPath.read(json, <span class="string">"$.store.book[?(@.isbn)]"</span>);</div><div class="line">System.out.println(<span class="string">"b2"</span>+b2);</div><div class="line"></div><div class="line"><span class="comment">//输出该json中所有price的值</span></div><div class="line">List&lt;Double&gt; prices = JsonPath.read(json, <span class="string">"$..price"</span>);</div><div class="line">System.out.println(<span class="string">"prices"</span>+prices);</div><div class="line"></div><div class="line"><span class="comment">//输出该json中所有title的值</span></div><div class="line">List&lt;Double&gt; title = JsonPath.read(json, <span class="string">"$..title"</span>);</div><div class="line">System.out.println(<span class="string">"title"</span>+title);</div><div class="line"><span class="comment">//输出该json中book 0,1的值</span></div><div class="line">List&lt;Double&gt; book01 = JsonPath.read(json, <span class="string">"$..book[0,1]"</span>);</div><div class="line">System.out.println(<span class="string">"book01"</span>+book01);</div><div class="line"><span class="comment">/* //输出该json中book 0,1的值</span></div><div class="line">List&lt;Double&gt; book012 = JsonPath.read(json, "$..book[-2:]");</div><div class="line">System.out.println("book012"+book012);*/</div><div class="line"></div><div class="line"><span class="comment">//可以提前编辑一个路径，并多次使用它</span></div><div class="line">JsonPath path = JsonPath.compile(<span class="string">"$.store.book[*]"</span>);</div><div class="line">List&lt;Object&gt; b3 = path.read(json);</div><div class="line">System.out.println(<span class="string">"path\t"</span>+path+<span class="string">"\n"</span>+b3);</div></pre></td></tr></table></figure>
<p>用法比较简单，多使用几次就会使用了！文章主要参考网上！原谅很多天不跟博的我现在竟然这样水了这么一篇文章，哈哈！实在是忙！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb3.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;真乃神器也，再复杂的 Json 都能给你解析出来，非常方便的获取 JSON 的内容，很强大！&lt;br&gt;
    
    </summary>
    
    
      <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>Google Guava 缓存实现接口的限流</title>
    <link href="http://yoursite.com/2017/09/23/Guava-limit/"/>
    <id>http://yoursite.com/2017/09/23/Guava-limit/</id>
    <published>2017-09-23T07:30:59.463Z</published>
    <updated>2017-09-23T07:32:26.494Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb2.jpeg-1" alt=""><br><a id="more"></a></p>
<h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><p>最近项目中需要进行接口保护，防止高并发的情况把系统搞崩，因此需要对一个查询接口进行限流，主要的目的就是限制单位时间内请求此查询的次数，例如 1000 次，来保护接口。<br>参考了 <a href="http://www.jianshu.com/p/0d7ca597ebd2" target="_blank" rel="external">开涛的博客聊聊高并发系统限流特技</a> ，学习了其中利用 Google Guava 缓存实现限流的技巧，在网上也查到了很多关于 Google Guava 缓存的博客，学到了好多，推荐一个博客文章：<a href="http://ifeve.com/google-guava-cachesexplained/" target="_blank" rel="external">http://ifeve.com/google-guava-cachesexplained/</a>, 关于 Google Guava 缓存的更多细节或者技术，这篇文章讲的很详细；<br>这里我们并不是用缓存来优化查询，而是利用缓存，存储一个计数器，然后用这个计数器来实现限流。</p>
<h3 id="效果实验"><a href="#效果实验" class="headerlink" title="效果实验"></a>效果实验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> LoadingCache&lt;Long, AtomicLong&gt; count = CacheBuilder.newBuilder().expireAfterWrite(<span class="number">1</span>, TimeUnit.SECONDS).build(<span class="keyword">new</span> CacheLoader&lt;Long, AtomicLong&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> AtomicLong <span class="title">load</span><span class="params">(Long o)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="comment">//System.out.println("Load call!");</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AtomicLong(<span class="number">0L</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>上面，我们通过 CacheBuilder 来新建一个 LoadingCache 缓存对象 count，然后设置其有效时间为 1 秒，即每 1 秒钟刷新一次；缓存中，key 为一个 long 型的时间戳类型，value 是一个计数器，使用原子性的 AtomicLong 保证自增和自减操作的原子性， 每次查询缓存时如果不能命中，即查询的时间戳不在缓存中，则重新加载缓存，执行 load 将当前的时间戳的计数值初始化为 0。这样对于每一秒的时间戳，能计算这一秒内执行的次数，从而达到限流的目的；<br>这是要执行的一个 getCounter 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCounter</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="keyword">return</span> counter++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们创建多个线程来执行这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        System.out.println(Counter.getCounter());</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">catch</span> (Exception e)</div><div class="line">                    &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样执行的话，执行结果很简单，就是很快地执行这个 for 循环，迅速打印 0 到 99 折 100 个数，不再贴出。<br>这里的 for 循环执行 100 个进程时间是很快的，那么现在我们要限制每秒只能有 10 个线程来执行 getCounter() 方法，该怎么办呢，上面讲的限流方法就派上用场了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> LoadingCache&lt;Long, AtomicLong&gt; count = CacheBuilder.newBuilder().expireAfterWrite(<span class="number">1</span>, TimeUnit.SECONDS).build(<span class="keyword">new</span> CacheLoader&lt;Long, AtomicLong&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> AtomicLong <span class="title">load</span><span class="params">(Long o)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Load call!"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AtomicLong(<span class="number">0L</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">static</span> <span class="keyword">long</span> limits = <span class="number">10</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getCounter</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//获取当前的时间戳作为key</span></div><div class="line">            Long currentSeconds = System.currentTimeMillis() / <span class="number">1000</span>;</div><div class="line">            <span class="keyword">if</span> (count.get(currentSeconds).getAndIncrement() &gt; limits) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> counter++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一来，就可以限制每秒的执行数了。对于每个线程，获取当前时间戳，如果当前时间 (当前这 1 秒) 内有超过 10 个线程正在执行，那么这个进程一直在这里循环，直到下一秒，或者更靠后的时间，重新加载，执行 load，将新的时间戳的计数值重新为 0。<br>执行结果：<br><img src="http://img.blog.csdn.net/20160620150358906" alt=""><br>每秒执行 11 个（因为从 0 开始），每一秒之后，load 方法会执行一次；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">为了更加直观，我们可以让每个<span class="keyword">for</span>循环sleep一段时间：</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        System.out.println(Counter.getCounter());</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">catch</span> (Exception e)</div><div class="line">                    &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;.start();</div><div class="line">            Thread.sleep(<span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上述这样的情况下，一个线程如果遇到当前时间正在执行的线程超过 limit 值就会一直在 while 循环，这样会浪费大量的资源，我们在做限流的时候，如果出现这种情况，可以<strong>不进行 while 循环</strong>，而是直接抛出异常或者返回，来拒绝这次执行（查询），这样便可以节省资源。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本篇文章地址： <a href="http://www.54tianzhisheng.cn/2017/09/23/Guava-limit/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/09/23/Guava-limit/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb2.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Guava" scheme="http://yoursite.com/tags/Guava/"/>
    
  </entry>
  
  <entry>
    <title>面试过阿里等互联网大公司，我知道了这些套路</title>
    <link href="http://yoursite.com/2017/09/17/Interview-summary/"/>
    <id>http://yoursite.com/2017/09/17/Interview-summary/</id>
    <published>2017-09-16T17:28:43.398Z</published>
    <updated>2017-09-17T04:49:13.086Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/shanghai.jpeg-1" alt=""></p>
<a id="more"></a>
<h3 id="前面感谢一波"><a href="#前面感谢一波" class="headerlink" title="前面感谢一波"></a>前面感谢一波</h3><p>因为看到掘金在做秋招求职征文大赛，赞助商也有牛客网，自己前段时间也稍微写了篇博客总结我的大学生活，<a href="http://www.54tianzhisheng.cn/2017/08/26/recommend-books/" target="_blank" rel="external">那些年我看过的书 —— 致敬我的大学生活 —— Say Good Bye ！</a>  博客中稍微简单的介绍了下自己的求职，重点是推荐了下我自己看过的那些书籍，对我帮助真的很大。</p>
<p>如今借这么个机会，回馈掘金和牛客网，想想自己这一年在掘金也写过不少文章，从 0 个粉丝到如今被 11047 人（截止写此篇文章时）关注，有点小激动，竟然这么多粉，也不知道真正活跃的用户有多少。不管怎样，这一年在掘金还是收获很多的，不仅可以阅读到很多大神的文章，学习新的知识，而且还遇到了好几个不错的哥们，如今平常也有和他们交流，比如 ：<a href="https://juejin.im/user/5904c637b123db3ee479d923" target="_blank" rel="external">芋道源码</a> 老哥人就很不错，在上海还和老哥见过面，吃过饭，平常对我帮助也很大，会推荐一些很有用的书籍给我看。欢迎大家关注他的博客：<a href="http://vip.iocoder.cn/" target="_blank" rel="external">芋道源码的博客</a>   ，里面有好几系列的源码分析博客文章呢。至于牛客网，我就更是老用户了，印象中好像是大一的时候注册的，那时有空的话就会去上面刷几道基础题，写写题解，坚持了好久了，如今早已是红名了。（其实是水出来的，哈哈）在牛客网遇到的大神也是超多，好多朋友几乎都是通过牛客网认识的，那时早的时候一起在一群讨论问题，别提那场面了，震惊，我等弱渣瑟瑟发抖。感谢叶神，左神，牛妹！</p>
<p>说着说着，好像偏题了。<img src="http://ohfk1r827.bkt.clouddn.com/201612031957235746.gif" alt=""></p>
<p>正式进入话题吧！</p>
<h3 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h3><p>本篇秋招求职征文主要分享如下几方面：<strong>招聘职位需求套路</strong> 、<strong>招聘面试的套路</strong>、<strong>简历撰写套路</strong>、<strong>简历投递套路</strong> 、<strong>找工作经历</strong> 、<strong>自己面试面经</strong> 、<strong>实习感悟</strong>、<strong>书籍推荐</strong> 、<strong>优秀网站推荐</strong> 、<strong>优秀博客推荐</strong> 、<strong>求职资料放送</strong>。</p>
<h3 id="招聘职位需求套路"><a href="#招聘职位需求套路" class="headerlink" title="招聘职位需求套路"></a>招聘职位需求套路</h3><p>摘举下几个公司的招聘需求：（from lagou）</p>
<p>1、Java开发校招生( 有赞 )</p>
<blockquote>
<p>职位诱惑：<br>福利好待遇佳，技术氛围浓，有大牛带成长快<br>职位描述：</p>
<p>有赞2018校招官方网申地址（请在官网投递，勿直接在Lagou上投递）：<br><a href="https://job.youzan.com/campus" target="_blank" rel="external">https://job.youzan.com/campus</a><br>岗位职责</p>
<ol>
<li>我们拥有世界级的 SaaS 电商解决方案，每天处理几百万订单、几亿条消息，并且量级不断攀升；</li>
<li>我们开放了有赞云，连接了数十万开发者，大大提升了 SaaS 对商家产生的价值；</li>
<li>我们正在新零售的潮流中激流勇进、开疆拓土，用产品技术撬动巨大的市场；</li>
<li>而你的工作，就是参与这些大流量系统的研发，哪怕提升1%的性能和稳定性都将是激动人心的时刻。</li>
</ol>
<p>岗位要求</p>
<ol>
<li>2018届本科及以上学历应届毕业生，计算机或者软件工程相关专业；</li>
<li>具备扎实的计算机基础知识，至少熟练使用一门主流开发语言；</li>
<li>积极参与开发实践，如果拥有引以为豪的项目经历则加分；</li>
<li>热衷数据结构与算法，如果一不小心在 ACM 赛场摘过金，夺过银则加分；</li>
<li>能在 Linux 上写任何脚本，比王者荣耀上手还快则加分；</li>
<li>快速学习新鲜事物，自我驱动追求卓越，积极应对问题和变化。</li>
</ol>
</blockquote>
<p>2、京东居家生活事业部-汽车用品招聘实习生（2018届）</p>
<blockquote>
<p>职位诱惑：<br>京东商城</p>
<p>职位描述：<br>京东商城-汽车用品部门招聘实习生</p>
<p>我们需要这样的你：</p>
<ul>
<li>2018届毕业生（本科或硕士均可）</li>
<li>学习能力强</li>
<li>担当、抗压、接受变化</li>
<li>能长期实习（优秀者有转正机会）</li>
<li>需要一个大的平台来展示和发挥自己的能力</li>
</ul>
<p>你将收获：</p>
<ul>
<li>重新认识快速成长的自己</li>
<li>一份世界500强的实习经历</li>
<li>一群优秀的伙伴</li>
</ul>
</blockquote>
<p>3、爱奇艺 Java 实习生 - 游戏事业部</p>
<blockquote>
<p>要求：至少 6 个月以上每周三天以上实习。</p>
<ol>
<li>本科以上学历，计算机、软件工程相关专业；</li>
<li>基础扎实，熟悉 Java 编程，熟悉 Spring、MyBatis 等框架优先；</li>
<li>熟悉 SQL 语句，熟练使用 MySQL 数据库；</li>
<li>良好的沟通、表达、协调能力，富有激情，学习能力强；</li>
<li>有 GitHub 账号或者技术博客优先；</li>
<li>热爱游戏行业优先。</li>
</ol>
</blockquote>
<p>这里随便找了三个，从招聘需求里看，好多公司目前招聘的话在招聘需求中并不怎么会写的很清楚，有的也不会说明要求的技术栈，这其实有时会对我们这种新人来说，有点不好的，这样的话我们就没有明确的目标去复习，还有就是一些加分项，其实也是有点帮助的。就比如有些招聘上面的说有优秀博客和 GitHub 者优先，这两点的话我们其实可以在大学慢慢积累出来的，对面试确实有帮助，我好些面试机会都是靠这两个的。还有套路就是，别光信他这招聘需求，进去面试可能就不问你这些方面的问题了，那些公司几乎都是这么个套路：<strong>面试造火箭，入职拧螺丝</strong> ！  进去公司之前可能需要你懂很多东西，但是进去的话还只是专门做一方面的东西。不管怎样，如果你有机会进去大公司的话（而且适合去），还是去大公司吧，出来大厂光环不少。</p>
<ol>
<li>认真耐心地拧螺丝钉，说不定有机会去造大火箭——正规大公司的节奏。</li>
<li>短时间把螺丝拧出花，说不定有机会造小火箭——上升中创业公司的节奏。</li>
</ol>
<h3 id="招聘面试的套路"><a href="#招聘面试的套路" class="headerlink" title="招聘面试的套路"></a>招聘面试的套路</h3><p>参考：<a href="https://mp.weixin.qq.com/s/qRwDowetBkJqpeMeAZsIpA" target="_blank" rel="external">https://mp.weixin.qq.com/s/qRwDowetBkJqpeMeAZsIpA</a>    一个在掘金上认识的老哥，在京东工作，写的不错，干脆分享下。大家可以去看他的博客，<a href="http://mindwind.me/" target="_blank" rel="external">http://mindwind.me/</a>   当时我求职的时候通过作者博客也学到不少东西。</p>
<p>一次集中的扩招需求，有点像每年一度的晋升评审，都需要对大量的候选人进行定级评审，因为每一个新招聘的人员都会对其有一个定级的过程。</p>
<p>维度：</p>
<blockquote>
<ul>
<li>通用能力：考察其沟通表达、学习成长等</li>
<li>专业知识：考察其知识的掌握、深度、广度等</li>
<li>专业能力：考察其技能应用的能力和结果</li>
<li>工作业绩：考察其工作成果、产出、创新点等</li>
<li>价值观：考察其认知、理解、行为等</li>
</ul>
</blockquote>
<p>整个面试过程会包括下面几个部分：</p>
<p><strong>自我介绍</strong><br>一开始的简短自我介绍，考察点在于对自我的总结、归纳和认知能力。观察其表达的逻辑性和清晰性，有个整体印象。</p>
<p><strong>项目经历</strong><br>一般我不会专门问一些比较死的专业技术点之类的知识，都是套在候选人的项目经历和过往经验中穿插。通过其描述，来判断其掌握知识点的范围和深度，以及在实际的案例中如何运用这些知识与技能解决真正的问题的。</p>
<p>所以，不会有所谓的题库。每一个我决定面试的候选人，都是提前细读其简历，提炼场景和发掘需要问的问题，相当于面试前有个二三十分钟的备课过程，组织好面试时的交互过程与场景，以顺利达到我想要了解的点。</p>
<p><strong>团队合作</strong><br>通常还会问候选人其所在团队中的角色，他们的工作模式、协作方式，并给出一些真实的场景化案例观察其应对的反应。评价一下关于他周围的同事、下属或领导，了解他在团队中的自我定位。这里的考察点是沟通协作方面的通用能力。</p>
<p><strong>学习成长</strong><br>这个维度考察的关键点包括：成长潜力、职业生涯规划的清晰度。人与人之间成长速度的关键差距，我自己观察得出的结论在于：自驱力。而路径的清晰性，也是产生自驱的一个源动力，否则可能会感觉迷茫，而陷于困顿。</p>
<p><strong>文化匹配</strong><br>这算是价值观的一部分吧。其实，这是最难考核的，我没有什么好方法，基本靠感觉。曾经有过好几次碰到经历和技能都不错的人，但总是感觉哪里不对，但又着急要人，就放进来了。但最终感觉是对的，合作很快就结束了，人也走了。</p>
<p><strong>综合评价</strong><br>总结点评候选人的优势、劣势并进行技术定级，定级也没有绝对标准，而是相对的。我一般就是和周围觉得差不多级别的人的平均水准比较下，大概就会有一个技术级别的判断。</p>
<p><strong>套路</strong></p>
<p>招聘面试，其实是一个对人的筛选，而筛选的本质是匹配 —— 匹配人与职位。第一，你得非常清楚地理解，这个职位需要什么样属性的人。第二，确定你的候选人是否拥有这个职位要求的必须属性。那么，首先回答第一个问题，一般的职位需要什么样的属性？</p>
<p>属性，又可以进一步拆解为三个层次。第一层次是「技能（Skills）」，技能是你习得的一种工具，就像程序员会用某种语言和框架来编写某类应用程序。第二层次是「能力（Abilities）」，能力是你运用工具的思考和行为方式，用同样的语言和框架编写同样程序的程序员能力可以差别很大。而第三层次是「价值观（Values）」，价值观是一个人根深蒂固的信念以及驱动行为的原因与动力所在。</p>
<h3 id="简历撰写套路"><a href="#简历撰写套路" class="headerlink" title="简历撰写套路"></a>简历撰写套路</h3><p>参考：<a href="https://mp.weixin.qq.com/s/3f8hGAQ-auLdkxkQ8XG3CQ" target="_blank" rel="external">https://mp.weixin.qq.com/s/3f8hGAQ-auLdkxkQ8XG3CQ</a></p>
<p>简历，是如此重要，它是获得一份满意工作的敲门砖，但不同的简历敲门的声响可不同。</p>
<p>但很多时候简历给人的感觉也似乎微不足道，因为没有人会真正细致的去读一份简历。而仅仅是快速的浏览一遍，就几乎同时对一个候选人形成了一种要么强烈，要么无感的印象。现实中的真实情况是，你的简历只有十几二十秒的时间窗口机会会被浏览到，然后就决定了能否进入下一步。</p>
<p>要让面试官看了你的简历后：知道你做过什么？看看技能、经历与岗位需求的匹配度，然后再问问你是谁？你通过简历散发出来的味道是什么感觉，我愿意和这样的人一起共事么？</p>
<p>一份简历的最少必要内容包括：</p>
<blockquote>
<ul>
<li><p>个人信息</p>
</li>
<li><ul>
<li>姓名</li>
<li>年龄</li>
<li>手机</li>
<li>邮箱</li>
</ul>
</li>
<li><p>教育经历</p>
</li>
<li><ul>
<li>博士（硕士、本科） 有多个全部写出来，最高学历写在上面</li>
</ul>
</li>
<li><p>工作经历（最匹配职位需求的，挑选出来的 TOP3 的项目）</p>
</li>
<li><ul>
<li><p>项目1</p>
</li>
<li><ul>
<li>项目背景上下文（场景、问题）</li>
<li>你在其中的角色（职责、发挥的作用、结果度量）</li>
<li>与此项经历有关的知识与技能（技术栈）</li>
</ul>
</li>
<li><p>项目2</p>
</li>
<li><p>项目3</p>
</li>
</ul>
</li>
<li><p>附加信息</p>
</li>
<li><ul>
<li>博客：持续有内容，不碎碎念</li>
<li>开源：GitHub 持续 commit</li>
<li>社区：有一定专业影响力的</li>
<li>书籍：用心写的</li>
<li>演讲：行业大会级别的</li>
<li>专利：凑数的就算了</li>
<li>论文：学术界比较有影响力的</li>
<li>爱好：真正的兴趣点</li>
</ul>
</li>
</ul>
</blockquote>
<p>对于我们学生，缺乏工作经历，那就写写独特的学习或实习经历。同学们大家都共有的经历就不要随便写上去凑数了。对于学生，看重的是通用能力，学习能力，适应能力以及对工作的态度和热情。如果没有区分度高的经历，那么有作品也是很好的。比如将你的做的网站部署出来，把地址写在简历上。</p>
<p>关于技术栈部分的技术术语，很多程序员不太注意。比如，把 Java 写成 java 或 JAVA，Java 已是一个专有品牌名词，大小写要完全符合，这一点和 iOS 类似（i 小写，OS 大写）。另外，像 HTML，CSS 则全部大写，因为这是多个单词的缩写。一些小小的细节就能读出你的专业性和散发出来的味道。最后，技术术语不是罗列得多就好，不是真正熟练的技能，不要轻易写进简历。因为这将给你自己挖坑。你可以将你自己擅长的或者很熟的知识点写进去，有时想着重就加粗或者打个括号，这样可以挖坑给面试官，让他去问你熟悉的（前提要确保你真的能讲清楚，我试过这个方法很有效的）。</p>
<p>然后就是简历格式了，最好是 PDF 了，Word 在不同的电脑上的打开效果可能不一样，格式可能会变，况且有些人的电脑不一定装了 Word，不过我喜欢用 Markdown 写简历，简洁，适合程序员，然后把 Markdown 转换成 PDF 出来。</p>
<h3 id="简历投递套路"><a href="#简历投递套路" class="headerlink" title="简历投递套路"></a>简历投递套路</h3><p><strong>内推</strong></p>
<p>有内推通道尽量走内推通道，不知道方便多少，而且成功几率也很大！找熟人，找学长学姐吧！牛客网讨论区很多内推帖子，可以去找找。不过今年的好多公司的内推通道都不咋管用了，套路越来越多了。记得去年好多公司内推都是免笔试，直接进入面试阶段，今年直接变成内推免简历筛选，进入笔试。因为现在的内推越来越不靠谱，直接面试的话，会增加公司的面试成本，干脆笔试再筛选一部分人。</p>
<p><strong>拉勾网</strong></p>
<p>拉勾上还是算不错的。</p>
<p><strong>Boss 直聘</strong></p>
<p>虽说前段时间出现了程序员找工作进入传销最后导致死亡的惨事发生，但是里面总比智联招聘和前程无忧靠谱点。因为智联招聘和前程无忧几乎被广告党和培训机构给占领了。</p>
<p><strong>脉脉</strong></p>
<p>里面招应届生和实习生比较少，但是也有，可以试试。</p>
<p>总之，简历投递给公司之前，请确认下这家公司到底咋样，先去百度了解下，别被坑了，每个平台都有一些居心不良的广告党等着你上钩，千万别上当！！！</p>
<h3 id="找工作经历"><a href="#找工作经历" class="headerlink" title="找工作经历"></a>找工作经历</h3><p>这段经历，算是自己很难忘记的经历吧。既辛酸既充实的日子！也很感谢自己在这段时间的系统复习，感觉把自己的基础知识再次聚集在一起了，自己的能力在这一段时间提升的也很快。后面有机会的话我也想写一系列的相关文章，为后来准备工作（面试）的同学提供一些自己的帮助。自己在找工作的这段时间面过的公司也有几家大厂，但是结果都不是很好，对我自己有很大的压力，当时心里真的感觉 ：“自己真的有这么差”，为什么一直被拒，当时很怀疑自己的能力，自己也有总结原因。一是面试的时候自己准备的还不够充分，虽说自己脑子里对这些基础有点印象，但是面试的时候自己稍紧张下就描述不怎么清楚了，导致面试官觉得你可能广度够了，深度还不够（这是阿里面试官电话面试说的）；二是自己的表达能力还是有所欠缺，不能够将自己所要表达的东西说出来，这可能我要在后面加强的地方；三是我的学校问题。在面了几家公司失败后，终于面了家公司要我了，我也确定在这家公司了。很幸运，刚出来，就有一个很好（很负责）的架构师带我，这周就给了我一个很牛逼的项目给我看，里面新东西很多，说吃透了这个项目，以后绝对可以拿出去吹逼（一脸正经.jpg）。找工作期间，自己也经常去收集一些博客，并把它保存下来，这样能够让自己下次更好的系统复习，还在牛客网整理了很多面经，每天看几篇面经，知道面试一般问什么问题，都有啥套路，其实你看多了面经就会发现，面试考的题目几乎都差不多，区别不是很大。目前我的找工作经历就简短的介绍到这里了，如果感兴趣的话，可以加群：528776268   期待志同道合的你。</p>
<h3 id="自己面试面经"><a href="#自己面试面经" class="headerlink" title="自己面试面经"></a>自己面试面经</h3><h4 id="亚信"><a href="#亚信" class="headerlink" title="亚信"></a>亚信</h4><p>地址：<a href="http://www.54tianzhisheng.cn/2017/08/04/yaxin/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/08/04/yaxin/</a></p>
<p>1）自我介绍（说到一个亮点：长期坚持写博客，面试官觉得这个习惯很好，算加分项吧）</p>
<p>2）看到简历项目中用到 Solr，详细的问了下 Solr（自己介绍了下 Solr 的使用场景和建立索引等东西）</p>
<p>3）项目里面写了一个 “ 敏感词和 JS 标签过滤防 XSS 攻击”，面试官让我讲了下这个 XSS 攻击，并且是怎样实现的</p>
<p>4）项目里写了支持 Markdown，问是不是自己写的解析代码，（回答不是，自己引用的是 GitHub上的一个开源项目解析的）</p>
<p>5）想问我前端的知识，我回复到：自己偏后端开发，前端只是了解，然后面试官就不问了</p>
<p>6）问我考不考研？</p>
<p>7）觉得杭州怎么样？是打算就呆在杭州还是把杭州作为一个跳板？</p>
<p>8）有啥小目标？以后是打算继续技术方向，还是先技术后管理（还开玩笑的说：是不是赚他几个亿，当时我笑了笑）</p>
<p>9）有啥兴趣爱好？</p>
<p><strong>总结</strong>：面试问的问题不算多，主要是通过简历上项目所涉及的东西提问的，如果自己不太会的切记不要写上去。面试主要考察你回答问题来判断你的逻辑是否很清楚。</p>
<h4 id="爱奇艺"><a href="#爱奇艺" class="headerlink" title="爱奇艺"></a>爱奇艺</h4><p>地址：<a href="http://www.54tianzhisheng.cn/2017/08/04/iqiyi/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/08/04/iqiyi/</a></p>
<h5 id="笔试（半个小时）"><a href="#笔试（半个小时）" class="headerlink" title="笔试（半个小时）"></a>笔试（半个小时）</h5><p>题目：（记得一些）</p>
<p>1、重载重写的区别？</p>
<p>2、转发和重定向的区别？</p>
<p>3、画下 HashMap 的结构图？HashMap 、 HashTable 和 ConcurrentHashMap 的区别？</p>
<p>4、statement 和 preparedstatement 区别？</p>
<p>5、JSP 中一个 <c:value> 中取值与直接取值的区别？会有什么安全问题？</c:value></p>
<p>6、实现一个线程安全的单例模式</p>
<p>7、一个写 sql 语句的题目</p>
<p>8、自己实现一个 List，（主要实现 add等常用方法）</p>
<p>9、Spring 中 IOC 和 AOP 的理解？</p>
<p>10、两个对象的 hashcode 相同，是否对象相同？equal() 相同呢？</p>
<p>11、@RequestBody 和 @ResponseBody 区别？</p>
<p>12、JVM 一个错误，什么情况下会发生？</p>
<p>13、常用的 Linux 命令？</p>
<h5 id="第一轮面试（80-分钟）"><a href="#第一轮面试（80-分钟）" class="headerlink" title="第一轮面试（80 分钟）"></a>第一轮面试（80 分钟）</h5><p>1、自我介绍</p>
<p>2、介绍你最熟悉的一个项目</p>
<p>3、讲下这个 XSS 攻击</p>
<p>4、HashMap 的结构？HashMap 、 HashTable 和 ConcurrentHashMap 的区别？</p>
<p>5、HashMap 中怎么解决冲突的？（要我详细讲下）</p>
<p>6、ConcurrentHashMap 和 HashTable 中线程安全的区别？为啥建议用 ConcurrentHashMap ？能把 ConcurrentHashMap  里面的实现详细的讲下吗？</p>
<p>7、Session 和 Cookie 的区别？</p>
<p>8、你项目中登录是怎样做的，用的 Cookie 和 Session？</p>
<p>9、讲讲你对 Spring 中的 IOC 和 AOP 的理解？</p>
<p>10、问了好几个注解的作用？</p>
<p>11、statement 和 preparedstatement 区别？</p>
<p>12、$ 和 # 的区别？以及这两个在哪些地方用？</p>
<p>13、前面项目介绍了数据是爬虫爬取过来的，那你讲讲你的爬虫是多线程的吧？</p>
<p>14、讲讲 Python 中的多线程和 Java 中的多线程区别？</p>
<p>15、自己刚好前几天在看线程池，立马就把面试官带到我熟悉的线程池，和面试官讲了下 JDK 自带的四种线程池、ThreadPoolExecutor 类中的最重要的构造器里面的七个参数，然后再讲了下线程任务进入线程池和核心线程数、缓冲队列、最大线程数量比较。</p>
<p>16、线程同步，你了解哪几种方式？</p>
<p>17、讲下 Synchronized？</p>
<p>18、讲下 RecentLock 可重入锁？ 什么是可重入锁？为什么要设计可重入锁？</p>
<p>19、讲下 Volatile 吧？他是怎样做到同步的？</p>
<p>20、Volatile 为什么不支持原子性？举个例子</p>
<p>21、Atomic 怎么设计的？（没看过源码，当时回答错了，后来才发现里面全部用 final 修饰的属性和方法）</p>
<p>22、问几个前端的标签吧？（问了一个不会，直接说明我偏后端，前端只是了解，后面就不问了）</p>
<p>23、SpringBoot 的了解？</p>
<p>24、Linux 常用命令？</p>
<p>25、JVM 里的几个问题？</p>
<p>26、事务的特性？</p>
<p>27、隔离级别？</p>
<p>28、网络状态码？以 2、3、4、5 开头的代表什么意思。</p>
<p>29、并发和并行的区别？</p>
<p>30、你有什么问题想问我的？</p>
<p>一面面完后面试官和说这份试卷是用来考 1~3 年开发工作经验的，让我准备一下，接下来的二面。</p>
<h5 id="第二轮面试（半个小时）"><a href="#第二轮面试（半个小时）" class="headerlink" title="第二轮面试（半个小时）"></a>第二轮面试（半个小时）</h5><p>1、一上来就问怎么简历名字都没有，我指了简历第一行的我的名字，还特意大写了，然后就问学校是不是在上海，我回答在南昌（感觉被鄙视了一波，后面我在回答问题的时候面试官就一直在玩手机，估计后面对我的印象就不是很好了）</p>
<p>2、自我介绍</p>
<p>3、说一说数据库建表吧（从范式讲）</p>
<p>4、讲讲多态？（这个我答出来了，可是面试官竟然说不是这样吧，可能面试官没听请，后面还说我是不是平时写多态比较少，感觉这个也让面试官对我印象减分）</p>
<p>5、将两个数转换（不借助第三个参数）</p>
<p>6、手写个插入排序吧（写完了和面试官讲了下执行流程）</p>
<p>7、讲讲你对 Spring 中的 IOC 和 AOP 的理解？</p>
<p>8、问了几个常用的 Linux 命令？</p>
<p>9、也问到多线程？和一面一样把自己最近看的线程池也讲了一遍</p>
<p>10、学 Java 多久了？</p>
<p>11、你有什么想问的？</p>
<h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>面试题目大概就是这么多了，有些问题自己也忘记了，面试题目顺序不一定是按照上面所写的。再次感谢爱奇艺的第一面面试官了，要不是他帮忙内推的，我可能还没有机会收到面试机会。自己接到爱奇艺面试邀请电话是星期一晚上快7点中的，之后加了面试官微信约好了星期四面试的（时间准备较短，之前没系统的复习过）。星期四一大早（5点就起床了），然后就收拾了下，去等公交车，转了两次车，然后再做地铁去爱奇艺公司的，总共路上花费时间四个多小时。总的来说，这次面试准备的时间不是很充裕，所以准备的个人觉得不是很好，通过这次的面试，发现面试还是比较注重基础和深度的，我也知道了自己的一些弱处，还需要在哪里加强，面试技巧上也要掌握些。为后面的其他公司继续做好充足的准备。加油！！！</p>
<h4 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h4><p>地址：<a href="http://www.54tianzhisheng.cn/2017/08/04/alibaba/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/08/04/alibaba/</a></p>
<p>（菜鸟网络部门）（49 分钟）</p>
<p>2017.08.02   晚上9点21打电话过来，预约明天什么时候有空面试，约好第二天下午两点。</p>
<p>2017.08.03   下午两点10分打过来了。</p>
<p>说看了我的<a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">博客</a>和 <a href="https://github.com/zhisheng17" target="_blank" rel="external">GitHub</a>，觉得我学的还行，知识广度都还不错，但是还是要问问具体情况，为什么没看到你春招的记录，什么原因没投阿里？非得说一个原因，那就是：我自己太菜了，不敢投。</p>
<p>1、先自我介绍</p>
<p>2、什么是多态？哪里体现了多态的概念？</p>
<p>3、HashMap 源码分析，把里面的东西问了个遍？最后问是不是线程安全？引出 ConcurrentHashMap</p>
<p>4、ConcurrentHashMap 源码分析</p>
<p>5、类加载，双亲委托机制</p>
<p>6、Java内存模型（一开始说的不是他想要的，主要想问我堆和栈的细节）</p>
<p>7、垃圾回收算法</p>
<p>8、线程池，自己之前看过，所以说的比较多，最后面试官说了句：看你对线程池了解还是很深了</p>
<p>9、事务的四种特性</p>
<p>10、什么是死锁？</p>
<p>11、乐观锁和悲观锁的策略</p>
<p>12、高可用网站的设计（有什么技术实现）</p>
<p>13、低耦合高内聚</p>
<p>14、设计模式了解不？你用过哪几种，为什么用，单例模式帮我们做什么东西？有什么好处？</p>
<p>15、你参与什么项目中成长比较快？学到了什么东西，以前是没有学过的？</p>
<p>16、项目中遇到的最大困难是怎样的？是怎么解决的？</p>
<p>17、智力题（两根不均匀的香，点一头烧完要一个小时，怎么确定15分钟）</p>
<p>18、你有什么问题想要问我的？</p>
<p>19、问了菜鸟网络他们部门主要做什么？</p>
<p>20、对我这次面试做个评价：看了你<a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">博客</a>和 <a href="https://github.com/zhisheng17" target="_blank" rel="external">GitHub</a>，知道你对学习的热情还是很高的，花了不少功夫，后面有通知！</p>
<p><strong>总结</strong>：面试总的来说，第一次电话面试，感觉好紧张，好多问题自己会点，但是其中的细节没弄清楚，自己准备的也不够充分。面试官很友好，看到我紧张，也安慰我说不要紧，不管以后出去面试啥的，不需要紧张，公司问的问题可能很广，你只需要把你知道的说出来就行，不会的直接说不会就行。之前一直不敢投阿里，因为自己准备的完全不够充分，但是在朋友磊哥的帮助下，还是试了下，不管结果怎么样，经历过总比没有的好。</p>
<p>后面说有通知，结果并没有，只看到官网的投递按钮变灰了。在掘金上一个朋友（我隔壁学校的），当时看我挂了说要不要让他租一起的隔壁邻居再内推下淘宝，我想想还是算了，自己目前能力真的是有限，达不到进阿里的要求！不过还是要感谢那个哥们，人真的超级好，虽然我们未曾谋面，但是有机会的话，我一定会请你吃饭的。</p>
<h4 id="哔哩哔哩"><a href="#哔哩哔哩" class="headerlink" title="哔哩哔哩"></a>哔哩哔哩</h4><p>首先直接根据简历项目开问，自我介绍都没有。</p>
<p>1、登录从前端到后端整个过程描述一遍？越详细越好，说到密码加密，网络传输，后台验证用户名和密码，Cookie 设置等。具体问我密码加密是前台还是后台加密，说了在后台加密？面试官说，那你做这个项目有什么意思？密码传输都是明文的，默认 HTTP 传递是明文传输，当时被面试官带进前台加密还是后台加密的沟里去了，没想到用 HTTPS ，后来后来的路上查了些资料才知道的，面试过程中他很想我说前台加密，但是前台加密算法那代码就摆在那里，很容易就给破解了吧，也没给点提示说 HTTPS，我只好投降</p>
<p>2、写一个查询的 sql 语句</p>
<p>3、线程同步的方法？Synchronized、Volatile、（面试官好像觉得 Volatile 不可以做到同步，我和他说了半天的 Volatile 原理 ，他竟然不认同，我开始怀疑他的实力了）、ThreadLocal、Atomic。</p>
<p>说到这些了，我当时竟然没把他带进我我给他挖的坑里去（线程池，之前好好研究过呢，可惜了）</p>
<p>4、Spring IOC 和 AOP 的理解？叫我写 AOP 的代码，我没写</p>
<p>5、JDK 动态代理和 Cglib 代理区别？</p>
<p>5、你觉得项目里面你觉得哪些技术比较好？我指了两个，然后他也没有问下去。</p>
<p>6、解释下 XSS 攻击</p>
<p>7、Spring 和 SpringBoot 的区别？</p>
<p>8、JVM 垃圾回收算法？分代中为什么要分三层？</p>
<p>9、OOM 是什么？什么情况会发生？</p>
<p>10、你觉得你有啥优点？</p>
<p>然后就叫我等一会，一会有人事来通知我，结果过了一会人事叫我可以回去等通知了。</p>
<p><strong>总结</strong>：到公司的时候已经一点多钟了，面试直接在一个很多人的地方（吃饭的地方）直接面的，周围还有人再吃饭，场景有点尴尬，面试过程感觉很随意，想到什么问题就问什么，完全没有衔接，问到的有些地方感觉面试官自己都不清楚，还怀疑我所说的，另外就是问题比较刁钻，总体技术也就那样吧！</p>
<h4 id="目前所在公司"><a href="#目前所在公司" class="headerlink" title="目前所在公司"></a>目前所在公司</h4><p>当时是我现在的老大（架构师）面的，先是电话面试过一次，问的问题也比较难，不过最后还是觉得我基础还是不错的。最后叫我去公司面试下，来到公司面试问的问题那就更难了，几乎好多都回答不出来，但是简单的说了下思路，最后再叫主任面试了下，问的问题就很简单了，最后就是  HR 面了，主要说了下工资问题和什么时候能报道！这几次面试的问题当时由于时间比较紧，也没去整理，现在也记不清楚了！目前自己已经工作了快一个月了，给的项目也完全是新东西，对我的挑战也很大，有时自己也确实不怎么知道，不过我老大很耐心的教我，对我也很不错，这也是我打算留在这里的原因，碰到个好老大不易！必须好好珍惜！</p>
<h3 id="实习感悟"><a href="#实习感悟" class="headerlink" title="实习感悟"></a>实习感悟</h3><p>进公司是架构运维组中的 Java 实习开发，目前实习已经快一个月了，说实话，实习后才发现一天真的很忙，写下这篇征文也是在周末整理大晚上写的。刚进公司就给了一个 Consul 的服务发现与注册和健康检查的项目，里面涉及的东西有 Consul、Docker、Nginx、Lua、ElasticSearch 还有几个很轻量级的框架，对我来说几乎都是新东西，确实需要时间去了解，再优化和改里面的 bug 的过程中，幸好我老大和我理了几次思路，才让我对整个项目有所进展，后续继续是在优化这项目（可能以后这个项目的所有东西都是我来做）。在上海，住的地方离公司有一定的距离，上班几乎要一个小时，每天花在上班路上的时间很多，这也导致我每天感觉很忙。公司上班时间比较弹性，无打卡，虽说公司不加班，但是每天自己都不怎么会按点下班，自己也想在实习阶段多学点东西！这段时间也是最关键的时间，碰到个问题，要花好久时间才能解决，也有可能未必解决得了，有时觉得自己啥都不会，这么点东西都做不好，有点否定自己。这也确实是自己的技术知识栈缺乏，和自己学的 SSM、Spring Boot 这些都不相关，也不怎么写业务逻辑代码。所以感觉很痛苦，不像自己以前写的代码那样顺畅，当然可能是自己以前自己写的项目太 low 了。</p>
<p>看到掘金-凯伦征文中写到：</p>
<blockquote>
<p><strong>公司其实并不期望刚刚进来的你，能够创造多少价值。新人是要成长的，在成长期难免会遇到各种各样的小问题，这可能是大多数人的必经之路，因为你所看到的同事，他们都比你在工作领域待的时间更久，有更多的经验，可以把他们作为目标，但不要把他们作为现在自己的标准，那样会压力太大。</strong></p>
</blockquote>
<p>感觉这段话对我现在很受用！ <strong>加油，好好挺过这个阶段，别轻易说放弃！</strong></p>
<h3 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h3><p>大学，我不怎么喜欢玩游戏，自己也还算不怎么堕落吧，看了以下的一些书籍，算是对我后面写博客、找工作也有很大的帮助。如果你是大神，请忽略，如果你还是还在大学，和我一样不想把时间浪费在游戏上，可以看看我推荐的一些书籍，有想讨论的请在评论下留下你的评论或者加上面给的群号。</p>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>1、《Java 核心技术》卷一 、卷二              两本书，算是入门比较好的书籍了</p>
<p>2、《疯狂 Java 讲义》                                很厚的一本书，里面的内容也是很注重基础了</p>
<p>3、《Java 并发编程的艺术》——  方腾飞 、魏鹏、程晓明著        方腾飞 是并发编程网的创始人，里面的文章确实还不错，可以多看看里面的文章，收获绝对很大。</p>
<p>4、《 Java多线程编程核心技术》——  高洪岩著   这本书也算是入门多线程编程的不错书籍，我之前还写了一篇读书笔记呢，<a href="http://www.54tianzhisheng.cn/2017/06/04/Java-Thread/" target="_blank" rel="external">《Java 多线程编程核心技术》学习笔记及总结</a>  , 大家如果不想看书的可以去看我的笔记。</p>
<p>5、《Java 并发编程实战》 这本书讲的有点难懂啊，不过确实也是一本很好的书，以上三本书籍如果都弄懂了，我觉得你并发编程这块可能大概就 OK 了，然后再去看看线程池的源码，了解下线程池，我觉得那就更棒了。不想看的话，请看我的博客：<a href="http://www.54tianzhisheng.cn/2017/07/29/ThreadPool/" target="_blank" rel="external">Java 线程池艺术探索</a>  我个人觉得还是写的很不错，那些大厂面试也几乎都会问线程池的东西，然后大概内容也就是我这博客写的</p>
<p>6、《Effective Java》中文版 第二版       算是 Java 的进阶书籍了，面试好多问题也是从这出来的</p>
<p>7、《深入理解 Java 虚拟机——JVM高级特性与最佳实践》第二版     这算是国内讲 JVM 最清楚的书了吧，目前还是只看了一遍，后面继续啃，大厂面试几乎也是都会考 JVM 的，阿里面 JVM 特别多，想进阿里的同学请一定要买这本书去看。</p>
<p>8、《深入分析Java  Web技术内幕  修订版》许令波著   里面知识很广，每一章都是一个不同的知识，可见作者的优秀，不愧是阿里大神。</p>
<p>9、《大型网站系统与 Java 中间件实践》—— 曽宪杰 著    作者是前淘宝技术总监，见证了淘宝网的发展，里面的讲的内容也是很好，看完能让自己也站在高处去思考问题。</p>
<p>10、《大型网站技术架构 —— 核心原理与案例分析》 —— 李智慧 著   最好和上面那本书籍一起看，效果更好，两本看完了，提升思想的高度！</p>
<p>11、《疯狂Java.突破程序员基本功的16课》 李刚 著       书中很注重 Java 的一些细节，讲的很深入，但是书中的错别字特多，可以看看我的读书笔记：<a href="http://www.54tianzhisheng.cn/2017/05/31/Java-16-lession/" target="_blank" rel="external">《疯狂 Java 突破程序员基本功的 16 课》读书笔记</a></p>
<p>12、《Spring 实战》   Spring 入门书籍</p>
<p>13、《Spring 揭秘》—— 王福强  著   这本书别提多牛了，出版时期为 2009 年，豆瓣评分为 9.0 分，写的是真棒！把 Spring 的 IOC 和 AOP 特性写的很清楚，把 Spring 的来龙去脉讲的很全。墙裂推荐这本书籍，如果你想看 Spring，作者很牛，资深架构师，很有幸和作者有过一次交流，当时因为自己的一篇博客  <a href="http://www.54tianzhisheng.cn/2017/03/27/Pyspider%E6%A1%86%E6%9E%B6%20%E2%80%94%E2%80%94%20Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E4%B9%8B%E7%88%AC%E5%8F%96%20V2EX%20%E7%BD%91%E7%AB%99%E5%B8%96%E5%AD%90/" target="_blank" rel="external">Pyspider框架 —— Python爬虫实战之爬取 V2EX 网站帖子</a>，竟然找到我想叫我去实习，可惜了，当时差点就跟着他混了。作者还有一本书  《Spring Boot 揭秘》。</p>
<p>14、《Spring 技术内幕》—— 深入解析 Spring 架构与设计原理     讲解 Spring 源码，深入了内部机制，个人觉得还是不错的。</p>
<p>15、Spring 官方的英文文档          这个别提了，很好，能看英文尽量看英文</p>
<p>16、《跟开涛学 Spring 3》  《跟开涛学 Spring MVC》  京东大神，膜</p>
<p>17、《看透springMvc源代码分析与实践》    算是把 Spring MVC 源码讲的很好的了</p>
<p>见我的笔记：</p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/09/servlet/" target="_blank" rel="external">1、通过源码详解 Servlet</a></p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/14/Spring-MVC01/" target="_blank" rel="external">2 、看透 Spring MVC 源代码分析与实践 —— 网站基础知识</a></p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/14/Spring-MVC02/" target="_blank" rel="external">3 、看透 Spring MVC 源代码分析与实践 —— 俯视 Spring MVC</a></p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/21/Spring-MVC03/" target="_blank" rel="external">4 、看透 Spring MVC 源代码分析与实践 —— Spring MVC 组件分析</a></p>
<p>18、《Spring Boot 实战》</p>
<p>19、Spring Boot 官方 Reference Guide        网上好多写 SpringBoot 的博客，几乎和这个差不多。</p>
<p>20、《JavaEE开发的颠覆者: Spring Boot实战》</p>
<p>21、MyBatis 当然是官方的文档最好了，而且还是中文的。</p>
<p>自己也写过几篇文章，帮助过很多人入门，传送门：</p>
<p>1、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E4%B8%80" target="_blank" rel="external">通过项目逐步深入了解Mybatis（一）</a>/)</p>
<p>2、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E4%BA%8C" target="_blank" rel="external">通过项目逐步深入了解Mybatis（二）</a>/)</p>
<p>3、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E4%B8%89" target="_blank" rel="external">通过项目逐步深入了解Mybatis（三）</a>/)</p>
<p>4、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E5%9B%9B" target="_blank" rel="external">通过项目逐步深入了解Mybatis（四）</a>/)</p>
<p>22、《深入理解 Java 内存模型》—— 程晓明 著      我觉得每个 Java 程序员都应该了解下 Java 的内存模型，该书籍我看的是电子版的，不多，但是讲的却很清楚，把重排序、顺序一致性、Volatile、锁、final等写的很清楚。</p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>《鸟哥的Linux私房菜 基础学习篇(第三版)  》</p>
<p>鸟哥的Linux私房菜：服务器架设篇(第3版)    鸟哥的书</p>
<h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h4><p>《计算机网络第六版——谢希仁 编》</p>
<p>《计算机网络自顶向下方法》</p>
<h4 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h4><p>《代码揭秘：从C／C.的角度探秘计算机系统 —— 左飞》</p>
<p>《深入理解计算机系统》</p>
<p>《计算机科学导论_佛罗赞》</p>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>《高性能MySQL》</p>
<p>《Mysql技术内幕InnoDB存储引擎》</p>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>这门语言语法很简单，上手快，不过我目前好久没用了，都忘得差不多了。当时是看的廖雪峰的 Python 博客</p>
<p>自己也用 Python 做爬虫写过几篇博客，不过有些是在前人的基础上写的。感谢那些栽树的人！</p>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>Git   ： 廖雪峰的 Git 教程</p>
<p>IDEA：<a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a></p>
<p>Maven：《Maven实战》</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>《如何高效学习-斯科特杨》   教你怎样高效学习的</p>
<p>《软技能：代码之外的生存指南》    程序员除了写代码，还得懂点其他的软技能。</p>
<p>《提问的智慧“中文版”》</p>
<p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way" target="_blank" rel="external">《How-To-Ask-Questions-The-Smart-Way》</a>   作为程序员的你，一定要学会咋提问，不然别人都不想鸟你。</p>
<h3 id="优秀网站推荐"><a href="#优秀网站推荐" class="headerlink" title="优秀网站推荐"></a>优秀网站推荐</h3><p>1、GitHub     别和我说不知道</p>
<p>2、InfoQ        文章很不错</p>
<p>3、CSDN    经常看博客专家的博客，里面大牛很多，传送门：<a href="http://blog.csdn.net/tzs_1041218129" target="_blank" rel="external">zhisheng</a></p>
<p>4、知乎         多关注些大牛，看他们吹逼</p>
<p>5、掘金        自己也在上面写专栏，粉丝已经超过一万了，传送门 ：<a href="https://juejin.im/user/57510b82128fe10056ca70fc" target="_blank" rel="external">zhisheng</a></p>
<p>6、并发编程网    前面已经介绍</p>
<p>7、developerworks     上面的博客也很好</p>
<p>8、博客园        里面应该大牛也很多，不过自己没在上面写过博客</p>
<p>9、微信公众号    关注了很多人，有些人的文章确实很好，平时也经常看。</p>
<p>10、牛客网        刷笔试题不错的地方，里面大牛超多，怀念叶神和左神讲课的时候，还有很有爱的牛妹。</p>
<h3 id="优秀博客推荐"><a href="#优秀博客推荐" class="headerlink" title="优秀博客推荐"></a>优秀博客推荐</h3><p><a href="https://www.liaoxuefeng.com/" target="_blank" rel="external">廖雪峰</a>  Git 和 Python 入门文章就是从他博客看的</p>
<p><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰的网络日志</a></p>
<p><a href="https://coolshell.cn/" target="_blank" rel="external">酷壳-陈皓</a></p>
<p><a href="https://www.zhihu.com/people/rednaxelafx/answers" target="_blank" rel="external">RednaxelaFX</a>   R大，牛逼的不得了</p>
<p><a href="http://calvin1978.blogcn.com/" target="_blank" rel="external">江南白衣</a>      老司机</p>
<p><a href="http://stormzhang.com/" target="_blank" rel="external">stormzhang</a>     人称帅逼张，微信公众号写的不错</p>
<p><a href="http://lovestblog.cn/" target="_blank" rel="external">你假笨</a>    阿里搞 JVM 的，很厉害</p>
<p><a href="http://www.jianshu.com/u/90ab66c248e6" target="_blank" rel="external">占小狼</a></p>
<p><a href="http://www.bysocket.com/" target="_blank" rel="external">泥瓦匠BYSocket</a></p>
<p><a href="http://cuiqingcai.com/" target="_blank" rel="external">崔庆才</a>   写了好多 Python 爬虫相关的文章</p>
<p><a href="http://www.ityouknow.com/" target="_blank" rel="external">纯洁的微笑</a>    SpringBoot 系列不错，其他的文章自己看了感觉是自己喜欢的那种文笔</p>
<p><a href="http://blog.didispace.com/" target="_blank" rel="external">程序猿DD</a></p>
<p><a href="http://itmuch.com/" target="_blank" rel="external">周立</a></p>
<p><a href="http://vip.iocoder.cn/" target="_blank" rel="external">芋道源码的博客</a>     好多系列的源码分析</p>
<p><a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">zhisheng</a>       这个是我不要脸，竟然把自己博客地址的写上去了</p>
<h3 id="求职资料放送"><a href="#求职资料放送" class="headerlink" title="求职资料放送"></a>求职资料放送</h3><p>自己在准备找工作那段时间，系统的复习了下大学所学的知识，期间在网上参考了很多不错的博客，并收集下来了，个人觉得还是不错的，因为这是包含了自己的心血，所以一直没怎么送出来，只给过我的几个同学，还有就是一些学习视频和实战项目视频。借着这次征文的机会，我想送给那些有缘人，希望你或许是那种在求职道路上正在艰难走着的人；或许是大一大二的学弟学妹们却想好好学习，有个奋斗的目标，不堪在大学堕落的；或许是工作一两年后感觉基础还比较薄弱的。要资料的时候期望你能简单的介绍下自己，期望你！联系方式请看文章最下面。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>送一句话，<strong>越努力，越幸运，祝早日成为大神！</strong></p>
<p>这些地方可以找到我：</p>
<ul>
<li>blog:  <a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">http://www.54tianzhisheng.cn/</a></li>
<li>GitHub: <a href="https://github.com/zhisheng17" target="_blank" rel="external">https://github.com/zhisheng17</a></li>
<li>QQ 群：528776268</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/shanghai.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux 下 lua 开发环境安装及安装 luafilesystem</title>
    <link href="http://yoursite.com/2017/09/15/linux-lua-lfs-install/"/>
    <id>http://yoursite.com/2017/09/15/linux-lua-lfs-install/</id>
    <published>2017-09-15T15:17:26.540Z</published>
    <updated>2017-09-15T15:21:45.473Z</updated>
    
    <content type="html"><![CDATA[<p>火云邪神语录：天下武功，无坚不破，唯快不破！Nginx 的看家本领就是速度，Lua 的拿手好戏亦是速度，这两者的结合在速度上无疑有基因上的优势。</p>
<p><img src="http://www.lua.org/images/lua.gif" alt=""><br><a id="more"></a><br>最近一直再折腾这个，干脆就稍微整理下。以防后面继续跳坑！</p>
<p>安装：</p>
<h3 id="1-先安装-lua-的相关依赖"><a href="#1-先安装-lua-的相关依赖" class="headerlink" title="1.先安装 lua 的相关依赖"></a>1.先安装 lua 的相关依赖</h3><p>安装 C 开发环境<br>由于 gcc 包需要依赖 binutils 和 cpp 包，另外 make 包也是在编译中常用的，所以一共需要 9 个包来完成安装，因此我们只需要执行 9 条指令即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gcc：命令未找到（解决方法）</div><div class="line">yum install cpp</div><div class="line">yum install binutils</div><div class="line">yum install glibc</div><div class="line">yum install glibc-kernheaders</div><div class="line">yum install glibc-common</div><div class="line">yum install glibc-devel</div><div class="line">yum install gcc</div><div class="line">yum install make</div><div class="line">yum install readline-devel</div></pre></td></tr></table></figure>
<h3 id="2-安装-lua5-1-5"><a href="#2-安装-lua5-1-5" class="headerlink" title="2.安装  lua5.1.5"></a>2.安装  lua5.1.5</h3><p>下载地址：<a href="http://www.lua.org/ftp/" target="_blank" rel="external">http://www.lua.org/ftp/</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">tar -zxvf lua-5.1.5.tar.gz</div><div class="line">cd lua-5.1.5</div><div class="line">vi Makefile</div><div class="line">设置 INSTALL_TOP= /usr/local/lua</div><div class="line">make linux</div><div class="line">make test</div><div class="line">make install</div><div class="line">rm -rf  /usr/bin/lua</div><div class="line">ln -s /usr/local/lua/bin/lua /usr/bin/lua</div><div class="line">ln -s /usr/local/lua/share/lua /usr/share/lua</div><div class="line"></div><div class="line">设置环境变量：</div><div class="line">vim /etc/profile</div><div class="line"></div><div class="line">添加：</div><div class="line">export LUA_HOME=/usr/local/lua</div><div class="line">export PATH=$PATH:$LUA_HOME/bin</div><div class="line"></div><div class="line">环境变量生效：</div><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<h3 id="3、安装-luarocks"><a href="#3、安装-luarocks" class="headerlink" title="3、安装  luarocks"></a>3、安装  luarocks</h3><p>是一个 Lua 包管理器，基于 Lua 语言开发，提供一个命令行的方式来管理 Lua 包依赖、安装第三方 Lua 包等。</p>
<p>地址： <a href="https://github.com/luarocks/luarocks" target="_blank" rel="external">https://github.com/luarocks/luarocks</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">使用 luarocks-2.2.1 版本在我机器上没有问题，但是使用 luarocks-2.4.2 出现问题</div><div class="line"></div><div class="line">wget http://luarocks.org/releases/luarocks-2.2.1.tar.gz</div><div class="line"></div><div class="line">tar -zxvf luarocks-2.2.1.tar.gz</div><div class="line"></div><div class="line">cd luarocks-2.2.1</div><div class="line"></div><div class="line">./configure --with-lua=/usr/local --with-lua-include=/usr/local/lua/include</div><div class="line"></div><div class="line">设置环境变量：</div><div class="line"></div><div class="line">export LUA_LUAROCKS_PATH=/usr/local/luarocks-2.2.1</div><div class="line">export PATH=$PATH:$LUA_LUAROCKS_PATH</div><div class="line"></div><div class="line">make &amp; make install</div></pre></td></tr></table></figure>
<h3 id="4、安装-luafilesystem"><a href="#4、安装-luafilesystem" class="headerlink" title="4、安装  luafilesystem"></a>4、安装  luafilesystem</h3><p>是一个用于 lua 进行文件访问的库，可以支持 lua 5.1 和 lua5.2，且是跨平台的，在为 lua 安装 lfs 之前需要先安装luarocks。因为自己的需求刚好需要这模块。</p>
<p>地址：<a href="https://github.com/keplerproject/luafilesystem" target="_blank" rel="external">https://github.com/keplerproject/luafilesystem</a></p>
<p>文档： <a href="http://keplerproject.github.io/luafilesystem/index.html" target="_blank" rel="external">http://keplerproject.github.io/luafilesystem/index.html</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">luarocks install luafilesystem</div></pre></td></tr></table></figure>
<h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><p>测试 lua 是否安装成功</p>
<p><code>lua -v</code></p>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Lua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio</div></pre></td></tr></table></figure>
<p>测试 luafilesystem 是否安装成功</p>
<p>a.lua</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">local lfs = require&quot;lfs&quot;</div><div class="line"></div><div class="line">function Rreturn(filePath)</div><div class="line">        local time = os.date(&quot;%a, %d %b %Y %X GMT&quot;, lfs.attributes(filePath).modification)</div><div class="line">        --打印文件的修改时间</div><div class="line">        print(time)</div><div class="line">end</div><div class="line"></div><div class="line">Rreturn(&quot;/opt/lua/a.txt&quot;)</div></pre></td></tr></table></figure>
<p>a.txt</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">b</div><div class="line">c</div></pre></td></tr></table></figure>
<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lua  a.lua</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Tue, 12 Sep 2017 18:43:13 GMT</div></pre></td></tr></table></figure>
<p>出现打印出时间的结果就意味着已经安装好了。</p>
<hr>
<p>当然以上这是在 Linux 安装的， Windows 上的其实比这还简单了，但是安装 luafilesystem 的话需要自己去下载个 lfs.dll ，然后把这个放到 lua 的安装路径去。很简单的，这里就不细说了。</p>
<h3 id="出现过的错误："><a href="#出现过的错误：" class="headerlink" title="出现过的错误："></a>出现过的错误：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@n1 lua-5.1.5]# make linux test</div><div class="line">cd src &amp;&amp; make linux</div><div class="line">make[1]: Entering directory `/opt/lua-5.1.5/src&apos;</div><div class="line">make all MYCFLAGS=-DLUA_USE_LINUX MYLIBS=&quot;-Wl,-E -ldl -lreadline -lhistory -lncurses&quot;</div><div class="line">make[2]: Entering directory `/opt/lua-5.1.5/src&apos;</div><div class="line">gcc -O2 -Wall -DLUA_USE_LINUX   -c -o lapi.o lapi.c</div><div class="line">make[2]: gcc：命令未找到</div><div class="line">make[2]: *** [lapi.o] 错误 127</div><div class="line">make[2]: Leaving directory `/opt/lua-5.1.5/src&apos;</div><div class="line">make[1]: *** [linux] 错误 2</div><div class="line">make[1]: Leaving directory `/opt/lua-5.1.5/src&apos;</div><div class="line">make: *** [linux] 错误 2</div></pre></td></tr></table></figure>
<p><strong>原因</strong>：最开始的那些依赖没安装</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;火云邪神语录：天下武功，无坚不破，唯快不破！Nginx 的看家本领就是速度，Lua 的拿手好戏亦是速度，这两者的结合在速度上无疑有基因上的优势。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.lua.org/images/lua.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="lua" scheme="http://yoursite.com/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>全文搜索引擎 Elasticsearch 集群搭建入门教程</title>
    <link href="http://yoursite.com/2017/09/09/Elasticsearch-install/"/>
    <id>http://yoursite.com/2017/09/09/Elasticsearch-install/</id>
    <published>2017-09-09T03:56:42.374Z</published>
    <updated>2017-09-09T04:59:12.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。基百科、Stack Overflow、Github 都采用它。</p>
<p>本文从零开始，讲解如何使用 Elasticsearch 搭建自己的全文搜索引擎。每一步都有详细的说明，大家跟着做就能学会。<br><a id="more"></a></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>1、VMware</p>
<p>2、Centos 6.6</p>
<p>3、Elasticsearch 5.5.2</p>
<p>4、JDK 1.8</p>
<p>VMware 安装以及在 VMware 中安装 Centos 这个就不说了，环境配置直接默认就好，不过分配给机器的内存最好设置大点（建议 2G），</p>
<p>使用 dhclient 命令来自动获取 IP 地址，查看获取的 IP 地址则使用命令 ip addr 或者 ifconfig ，则会看到网卡信息和 lo 卡信息。</p>
<p>给虚拟机额中的 linux 设置固定的  ip（因为后面发现每次机器重启后又要重新使用 dhclient 命令来自动获取 IP 地址）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim  /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure>
<p>修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">onboot=yes</div><div class="line">bootproto=static</div></pre></td></tr></table></figure>
<p>增加：（下面可设置可不设置）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IPADDR=192.168.1.113            网卡IP地址</div><div class="line">GATEWAY=192.168.1.1</div><div class="line">NETMASK=255.255.255.0</div></pre></td></tr></table></figure>
<p>设置好之后，把网络服务重启一下， <code>service network restart</code></p>
<p>修改 ip 地址参考： <a href="http://jingyan.baidu.com/article/e4d08ffdd417660fd3f60d70.html" target="_blank" rel="external">http://jingyan.baidu.com/article/e4d08ffdd417660fd3f60d70.html</a></p>
<p>大环境都准备好了，下面开始安装步骤：</p>
<h3 id="安装-JDK-1-8"><a href="#安装-JDK-1-8" class="headerlink" title="安装 JDK 1.8"></a>安装 JDK 1.8</h3><p>先卸载自带的 openjdk，查找  openjdk</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep java</div></pre></td></tr></table></figure>
<p>卸载 openjdk</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y remove  java-1.7.0-openjdk-1.7.0.65-2.5.1.2.el65.x8664</div><div class="line">yum -y remove java-1.6.0-openjdk-1.6.0.0-11.1.13.4.el6.x86_64</div></pre></td></tr></table></figure>
<p><strong>解压 JDK 安装包：</strong></p>
<p>附上jdk1.8的下载地址：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
<p>解压完成后配置一下环境变量就 ok</p>
<p>1、在/usr/local/下创建Java文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/                                    进入目录</div><div class="line">mkdir java                                     新建java目录</div></pre></td></tr></table></figure>
<p>2、文件夹创建完毕，把安装包拷贝到 Java 目录中，然后解压 jdk 到当前目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp /usr/jdk-8u144-linux-x64.tar.gz /usr/local/java/    **注意匹配你自己的文件名**  拷贝到java目录</div><div class="line">tar -zxvf jdk-8u144-linux-x64.tar.gz       解压到当前目录（Java目录）</div></pre></td></tr></table></figure>
<p>3、解压完之后，Java目录中会出现一个jdk1.8.0_144的目录，这就解压完成了。之后配置一下环境变量。<br>编辑/etc/下的profile文件，配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vi /etc/profile                  进入profile文件的编辑模式</div><div class="line"></div><div class="line">在最后边追加一下内容(**配置的时候一定要根据自己的目录情况而定哦！**)</div><div class="line"></div><div class="line"> JAVA_HOME=/usr/local/java/jdk1.8.0_144</div><div class="line"> CLASSPATH=$JAVA_HOME/lib/</div><div class="line"> PATH=$PATH:$JAVA_HOME/bin</div><div class="line"> export PATH JAVA_HOME CLASSPATH</div></pre></td></tr></table></figure>
<p>之后保存并退出文件之后。</p>
<p>让文件生效：<code>source /etc/profile</code></p>
<p>在控制台输入Java 和 Java -version 看有没有信息输出，如下： <code>java -version</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version &quot;1.8.0_144&quot;</div><div class="line"> Java(TM) SE Runtime Environment (build 1.8.0_60-b27)</div><div class="line"> Java HotSpot(TM) Client VM (build 25.60-b23, mixed mode)</div></pre></td></tr></table></figure>
<p>能显示以上信息，就说明 JDK 安装成功啦</p>
<hr>
<h3 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h3><p>因为后面可能会用到 maven ，先装上这个。</p>
<p>1、下载 maven</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz</div></pre></td></tr></table></figure>
<p>2、解压至 /usr/local 目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf apache-maven-3.2.5-bin.tar.gz</div></pre></td></tr></table></figure>
<p>3、配置公司给的配置</p>
<p>替换成公司给的 setting.xml 文件，修改关于本地仓库的位置, 默认位置: ${user.home}/.m2/repository</p>
<p>4、配置环境变量etc/profile 最后添加以下两行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export MAVEN_HOME=/usr/local/apache-maven-3.2.5</div><div class="line">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</div></pre></td></tr></table></figure>
<p>5、测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# mvn -v</div><div class="line">Apache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1; 2014-12-14T09:29:23-08:00)</div><div class="line">Maven home: /usr/local/apache-maven-3.2.5</div></pre></td></tr></table></figure>
<p>VMware 虚拟机里面的三台机器 IP 分别是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.153.133</div><div class="line">192.168.153.134</div><div class="line">192.168.153.132</div></pre></td></tr></table></figure>
<h3 id="配置-hosts"><a href="#配置-hosts" class="headerlink" title="配置 hosts"></a>配置 hosts</h3><p>在 /etc/hosts下面编写：ip  node 节点的名字（域名解析）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim  /etc/hosts</div></pre></td></tr></table></figure>
<p>新增：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.153.133  es1</div><div class="line">192.168.153.134  es2</div><div class="line">192.168.153.132  es3</div></pre></td></tr></table></figure>
<h3 id="设置-SSH-免密码登录"><a href="#设置-SSH-免密码登录" class="headerlink" title="设置 SSH 免密码登录"></a>设置 SSH 免密码登录</h3><p>安装expect命令 ： yum -y install expect</p>
<p>将 ssh_p2p.jar 随便解压到任何目录下： (这个 jar 包可以去网上下载)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip ssh_p2p.zip</div></pre></td></tr></table></figure>
<p>修改 resource 的 ip 值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /ssh_p2p/deploy_data/resource  （各个节点和账户名，密码，free代表相互都可以无密码登陆）</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#设置为你每台虚拟机的ip地址，用户名，密码</div><div class="line">address=(</div><div class="line">&quot;192.168.153.133,root,123456,free&quot;</div><div class="line">&quot;192.168.153,134,root,123456,free&quot;</div><div class="line">&quot;192.168.153.132,root,123456,free&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>修改 start.sh 的运行权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod u+x start.sh</div></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./start.sh</div></pre></td></tr></table></figure>
<p>测试：</p>
<p>ssh ip地址  （测试是否可以登录）</p>
<h3 id="安装-ElasticSearch"><a href="#安装-ElasticSearch" class="headerlink" title="安装 ElasticSearch"></a>安装 ElasticSearch</h3><p>下载地址： <a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="external">https://www.elastic.co/downloads/elasticsearch</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.tar.gz</div><div class="line">cd /usr/local</div><div class="line">tar -zxvf   elasticsearch-5.5.2.tar.gz</div></pre></td></tr></table></figure>
<p><code>su tzs</code>  切换到 tzs 用户下 ( 默认不支持 root 用户)</p>
<p><code>sh /usr/local/elasticsearch/bin/elasticsearch -d</code>  其中 -d 表示后台启动</p>
<p>在 vmware 上测试是否成功：curl <a href="http://localhost:9200/" target="_blank" rel="external">http://localhost:9200/</a></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/test.jpg-1" alt="test"></p>
<p>出现如上图这样的效果，就代表已经装好了。</p>
<p>elasticsearch 默认 restful-api 的端口是 9200 不支持 IP 地址，也就是说无法从主机访问虚拟机中的服务，只能在本机用 <a href="http://localhost:9200" target="_blank" rel="external">http://localhost:9200</a> 来访问。如果需要改变，需要修改配置文件 /usr/local/elasticsearch/config/elasticsearch.yml 文件，加入以下两行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">network.bind_host: 0.0.0.0</div><div class="line">network.publish_host: _nonloopback:ipv4</div></pre></td></tr></table></figure>
<p>或去除 network.host 和 http.port 之前的注释，并将 network.host 的 IP 地址修改为本机外网 IP。然后重启，Elasticsearch</p>
<p>关闭方法（输入命令：<code>ps -ef | grep elasticsearch</code> ，找到进程，然后 kill 掉就行了。</p>
<p>如果外网还是不能访问，则有可能是防火墙设置导致的 ( 关闭防火墙：<code>service iptables stop</code> )</p>
<p>修改配置文件：<code>vim config/elasticsearch.yml</code></p>
<p>cluster.name : my-app  (集群的名字，名字相同的就是一个集群)</p>
<p>node.name : es1  （节点的名字, 和前面配置的 hosts 中的 name 要一致）</p>
<p>path.data: /data/elasticsearch/data  （数据的路径。没有要创建（<code>mkdir -p /data/elasticsearch/{data,logs}</code>），并且给执行用户权限 <code>chown tzs /data/elasticsearch/{data,logs} -R</code> ）<br>path.logs: /data/elasticsearch/logs    （数据 log 信息的路径，同上）<br>network.host: 0.0.0.0    //允许外网访问，也可以是自己的ip地址<br>http.port: 9200        //访问的端口<br>discovery.zen.ping.unicast.hosts: [“192.168.153.133”, “192.168.153.134”, “192.168.153.132”]   //各个节点的ip地址</p>
<p>记得需要添加上：（这个是安装 head 插件要用的， 目前不需要）<br>http.cors.enabled: true<br>http.cors.allow-origin: “*”</p>
<p>最后在外部浏览器的效果如下图：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/test-on-bro.jpg-1" alt="test-on-bro"></p>
<h3 id="安装-IK-中文分词"><a href="#安装-IK-中文分词" class="headerlink" title="安装 IK 中文分词"></a>安装 IK 中文分词</h3><p>可以自己下载源码使用 maven 编译，当然如果怕麻烦可以直接下载编译好的</p>
<p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v5.5.2" target="_blank" rel="external">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v5.5.2</a></p>
<p>注意下载对应的版本放在 plugins 目录下</p>
<p>解压</p>
<p><code>unzip elasticsearch-analysis-ik-5.5.2.zip</code></p>
<p>在 es 的 plugins 下新建 ik 目录</p>
<p><code>mkdir ik</code></p>
<p>将刚才解压的复制到ik目录下</p>
<p><code>cp -r elasticsearch/* ik</code></p>
<p>删除刚才解压后的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm -rf elasticsearch</div><div class="line">rm -rf elasticsearch-analysis-ik-5.5.2.zip</div></pre></td></tr></table></figure>
<h4 id="IK-带有两个分词器"><a href="#IK-带有两个分词器" class="headerlink" title="IK 带有两个分词器"></a>IK 带有两个分词器</h4><p><strong>ik_max_word</strong> ：会将文本做最细粒度的拆分；尽可能多的拆分出词语</p>
<p><strong>ik_smart</strong>：会做最粗粒度的拆分；已被分出的词语将不会再次被其它词语占有</p>
<p>安装完 IK 中文分词器后（当然不止这种中文分词器，还有其他的，可以参考我的文章  <a href="http://www.54tianzhisheng.cn/2017/09/07/Elasticsearch-analyzers/" target="_blank" rel="external">Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a>），测试区别如下：</p>
<h5 id="ik-max-word"><a href="#ik-max-word" class="headerlink" title="ik_max_word"></a>ik_max_word</h5><p>curl -XGET ‘<a href="http://192.168.153.134:9200/_analyze?pretty&amp;analyzer=ik_max_word" target="_blank" rel="external">http://192.168.153.134:9200/_analyze?pretty&amp;analyzer=ik_max_word</a>‘ -d ‘联想是全球最大的笔记本厂商’</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;联想&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 2,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;是&quot;,</div><div class="line">      &quot;start_offset&quot; : 2,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;全球&quot;,</div><div class="line">      &quot;start_offset&quot; : 3,</div><div class="line">      &quot;end_offset&quot; : 5,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;最大&quot;,</div><div class="line">      &quot;start_offset&quot; : 5,</div><div class="line">      &quot;end_offset&quot; : 7,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;的&quot;,</div><div class="line">      &quot;start_offset&quot; : 7,</div><div class="line">      &quot;end_offset&quot; : 8,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 4</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;笔记本&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 11,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 5</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;笔记&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 10,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 6</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;本厂&quot;,</div><div class="line">      &quot;start_offset&quot; : 10,</div><div class="line">      &quot;end_offset&quot; : 12,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 7</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;厂商&quot;,</div><div class="line">      &quot;start_offset&quot; : 11,</div><div class="line">      &quot;end_offset&quot; : 13,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 8</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="ik-smart"><a href="#ik-smart" class="headerlink" title="ik_smart"></a>ik_smart</h5><p>curl -XGET ‘<a href="http://localhost:9200/_analyze?pretty&amp;analyzer=ik_smart" target="_blank" rel="external">http://localhost:9200/_analyze?pretty&amp;analyzer=ik_smart</a>‘ -d ‘联想是全球最大的笔记本厂商’</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;联想&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 2,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;是&quot;,</div><div class="line">      &quot;start_offset&quot; : 2,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;全球&quot;,</div><div class="line">      &quot;start_offset&quot; : 3,</div><div class="line">      &quot;end_offset&quot; : 5,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;最大&quot;,</div><div class="line">      &quot;start_offset&quot; : 5,</div><div class="line">      &quot;end_offset&quot; : 7,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;的&quot;,</div><div class="line">      &quot;start_offset&quot; : 7,</div><div class="line">      &quot;end_offset&quot; : 8,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 4</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;笔记本&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 11,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 5</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;厂商&quot;,</div><div class="line">      &quot;start_offset&quot; : 11,</div><div class="line">      &quot;end_offset&quot; : 13,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 6</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="安装-head-插件"><a href="#安装-head-插件" class="headerlink" title="安装 head 插件"></a>安装 head 插件</h3><p>elasticsearch-head 是一个 elasticsearch 的集群管理工具，它是完全由 html5 编写的独立网页程序，你可以通过插件把它集成到 es。</p>
<p>效果如下图：（图片来自网络）</p>
<p><img src="http://img.my.csdn.net/uploads/201211/17/1353133910_8134.jpg" alt=""></p>
<p><img src="http://img.my.csdn.net/uploads/201211/17/1353133911_9624.jpg" alt=""></p>
<p><img src="http://img.my.csdn.net/uploads/201211/17/1353134135_7264.jpg" alt=""></p>
<p><img src="http://img.my.csdn.net/uploads/201211/17/1353134135_5729.jpg" alt=""></p>
<p><img src="http://img.my.csdn.net/uploads/201211/17/1353133911_8912.jpg" alt=""></p>
<h4 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum remove git</div><div class="line">yum install git</div><div class="line">git clone git://github.com/mobz/elasticsearch-head.git   拉取 head 插件到本地，或者直接在 GitHub 下载 压缩包下来</div></pre></td></tr></table></figure>
<h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><p>先去官网下载 node-v8.4.0-linux-x64.tar.xz</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -Jxv -f  node-v8.4.0-linux-x64.tar.xz</div><div class="line">mv node-v8.4.0-linux-x64  node</div></pre></td></tr></table></figure>
<p>环境变量设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim  /etc/profile</div></pre></td></tr></table></figure>
<p>新增：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export NODE_HOME=/opt/node</div><div class="line">export PATH=$PATH:$NODE_HOME/bin</div><div class="line">export NODE_PATH=$NODE_HOME/lib/node_modules</div></pre></td></tr></table></figure>
<p>使配置文件生效（这步很重要，自己要多注意这步）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<p>测试是否全局可用了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mv elasticsearch-head head</div><div class="line">cd head/</div><div class="line">npm install -g grunt-cli</div><div class="line">npm install</div><div class="line">grunt server</div></pre></td></tr></table></figure>
<p>再 es 的配置文件中加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http.cors.enabled: true</div><div class="line">http.cors.allow-origin: &quot;*&quot;</div></pre></td></tr></table></figure>
<p>在浏览器打开 <code>http://192.168.153.133:9100/</code>  就可以看到效果了，</p>
<h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>把坑都走了一遍，防止以后再次入坑，特此记录下来</p>
<p><strong>1、ERROR Could not register mbeans java.security.AccessControlException: access denied (“javax.management.MBeanTrustPermission” “register”)</strong></p>
<p>改变 elasticsearch 文件夹所有者到当前用户</p>
<p>sudo chown -R noroot:noroot elasticsearch</p>
<p>这是因为 elasticsearch 需要读写配置文件，我们需要给予 config 文件夹权限，上面新建了 elsearch 用户，elsearch 用户不具备读写权限，因此还是会报错，解决方法是切换到管理员账户，赋予权限即可：</p>
<p>sudo -i</p>
<p>chmod -R 775 config</p>
<p><strong>2、[WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [] uncaught exception in thread [main]</strong><br><strong>org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root</strong></p>
<p>原因是elasticsearch默认是不支持用root用户来启动的。</p>
<p>解决方案一：Des.insecure.allow.root=true</p>
<p>修改/usr/local/elasticsearch-2.4.0/bin/elasticsearch，</p>
<p>添加 ES_JAVA_OPTS=”-Des.insecure.allow.root=true”</p>
<p>或执行时添加： sh /usr/local/elasticsearch-2.4.0/bin/elasticsearch -d -Des.insecure.allow.root=true</p>
<p>注意：正式环境用root运行可能会有安全风险，不建议用root来跑。</p>
<p>解决方案二：添加专门的用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">useradd elastic</div><div class="line">chown -R elastic:elastic  elasticsearch-2.4.0</div><div class="line">su elastic</div><div class="line">sh /usr/local/elasticsearch-2.4.0/bin/elasticsearch -d</div></pre></td></tr></table></figure>
<p><strong>3、UnsupportedOperationException: seccomp unavailable: requires kernel 3.5+ with CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER compiled in</strong></p>
<p>只是警告，使用新的linux版本，就不会出现此类问题了。</p>
<p><strong>4、ERROR: [4] bootstrap checks failed</strong><br><strong>[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</strong></p>
<p>原因：无法创建本地文件问题,用户最大可创建文件数太小</p>
<p>解决方案：切换到 root 用户，编辑 limits.conf 配置文件， 添加类似如下内容：</p>
<p>vim /etc/security/limits.conf</p>
<p>添加如下内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*  soft nofile 65536</div><div class="line">* hard nofile 131072</div><div class="line">* soft nproc 2048</div><div class="line">* hard nproc 4096</div></pre></td></tr></table></figure>
<p><strong>[2]: max number of threads [1024] for user [tzs] is too low, increase to at least [2048]</strong></p>
<p>原因：无法创建本地线程问题,用户最大可创建线程数太小</p>
<p>解决方案：切换到root用户，进入limits.d目录下，修改90-nproc.conf 配置文件。</p>
<p>vim /etc/security/limits.d/90-nproc.conf</p>
<p>找到如下内容：</p>
<ul>
<li>soft nproc 1024</li>
</ul>
<p>修改为</p>
<ul>
<li>soft nproc 2048</li>
</ul>
<p><strong>[3]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</strong></p>
<p>原因：最大虚拟内存太小</p>
<p>root用户执行命令：</p>
<p><code>sysctl -w vm.max_map_count=262144</code></p>
<p>或者修改 /etc/sysctl.conf 文件，添加 “vm.max_map_count”设置<br>设置后，可以使用<br>$ sysctl -p</p>
<p><strong>[4]: system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk</strong></p>
<p>原因：Centos6不支持SecComp，而ES5.4.1默认bootstrap.system_call_filter为true进行检测，所以导致检测失败，失败后直接导致ES不能启动。<br>详见 ：<a href="https://github.com/elastic/elasticsearch/issues/22899" target="_blank" rel="external">https://github.com/elastic/elasticsearch/issues/22899</a></p>
<p>解决方法：在elasticsearch.yml中新增配置bootstrap.system_call_filter，设为false，注意要在Memory下面:<br>bootstrap.memory_lock: false<br>bootstrap.system_call_filter: false</p>
<p><strong>5、 java.lang.IllegalArgumentException: property [elasticsearch.version] is missing for plugin [head]</strong></p>
<p>再 es 的配置文件中加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http.cors.enabled: true</div><div class="line">http.cors.allow-origin: &quot;*&quot;</div></pre></td></tr></table></figure>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>整个搭建的过程全程自己手动安装，不易，如果安装很多台机器，是否可以写个脚本之类的自动搭建呢？可以去想想的。首发于：<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/</a>   ，转载请注明出处，谢谢配合！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。基百科、Stack Overflow、Github 都采用它。&lt;/p&gt;
&lt;p&gt;本文从零开始，讲解如何使用 Elasticsearch 搭建自己的全文搜索引擎。每一步都有详细的说明，大家跟着做就能学会。&lt;br&gt;
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://yoursite.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</title>
    <link href="http://yoursite.com/2017/09/07/Elasticsearch-analyzers/"/>
    <id>http://yoursite.com/2017/09/07/Elasticsearch-analyzers/</id>
    <published>2017-09-07T01:50:46.000Z</published>
    <updated>2017-09-08T14:52:31.627Z</updated>
    
    <content type="html"><![CDATA[<p>介绍：ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p>
<p>Elasticsearch中，内置了很多分词器（analyzers）。下面来进行比较下系统默认分词器和常用的中文分词器之间的区别。<br><a id="more"></a></p>
<h2 id="系统默认分词器："><a href="#系统默认分词器：" class="headerlink" title="系统默认分词器："></a>系统默认分词器：</h2><h3 id="1、standard-分词器"><a href="#1、standard-分词器" class="headerlink" title="1、standard 分词器"></a>1、standard 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html</a></p>
<p>如何使用：<a href="http://www.yiibai.com/lucene/lucene_standardanalyzer.html" target="_blank" rel="external">http://www.yiibai.com/lucene/lucene_standardanalyzer.html</a></p>
<p>英文的处理能力同于StopAnalyzer.支持中文采用的方法为单字切分。他会将词汇单元转换成小写形式，并去除停用词和标点符号。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**StandardAnalyzer分析器*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">standardAnalyzer</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">    StandardAnalyzer analyzer = <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_36);</div><div class="line">   <span class="keyword">this</span>.getTokens(analyzer, msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、simple-分词器"><a href="#2、simple-分词器" class="headerlink" title="2、simple 分词器"></a>2、simple 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-simple-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-simple-analyzer.html</a></p>
<p>如何使用: <a href="http://www.yiibai.com/lucene/lucene_simpleanalyzer.html" target="_blank" rel="external">http://www.yiibai.com/lucene/lucene_simpleanalyzer.html</a></p>
<p>功能强于WhitespaceAnalyzer, 首先会通过非字母字符来分割文本信息，然后将词汇单元统一为小写形式。该分析器会去掉数字类型的字符。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**SimpleAnalyzer分析器*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleAnalyzer</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">        SimpleAnalyzer analyzer = <span class="keyword">new</span> SimpleAnalyzer(Version.LUCENE_36);</div><div class="line">        <span class="keyword">this</span>.getTokens(analyzer, msg);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="3、Whitespace-分词器"><a href="#3、Whitespace-分词器" class="headerlink" title="3、Whitespace 分词器"></a>3、Whitespace 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-whitespace-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-whitespace-analyzer.html</a></p>
<p>如何使用：<a href="http://www.yiibai.com/lucene/lucene_whitespaceanalyzer.html" target="_blank" rel="external">http://www.yiibai.com/lucene/lucene_whitespaceanalyzer.html</a></p>
<p>仅仅是去除空格，对字符没有lowcase化,不支持中文；<br>并且不对生成的词汇单元进行其他的规范化处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**WhitespaceAnalyzer分析器*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whitespaceAnalyzer</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">        WhitespaceAnalyzer analyzer = <span class="keyword">new</span> WhitespaceAnalyzer(Version.LUCENE_36);</div><div class="line">        <span class="keyword">this</span>.getTokens(analyzer, msg);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="4、Stop-分词器"><a href="#4、Stop-分词器" class="headerlink" title="4、Stop 分词器"></a>4、Stop 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stop-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stop-analyzer.html</a></p>
<p>如何使用：<a href="http://www.yiibai.com/lucene/lucene_stopanalyzer.html" target="_blank" rel="external">http://www.yiibai.com/lucene/lucene_stopanalyzer.html</a></p>
<p> StopAnalyzer的功能超越了SimpleAnalyzer，在SimpleAnalyzer的基础上增加了去除英文中的常用单词（如the，a等），也可以更加自己的需要设置常用单词；不支持中文</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**StopAnalyzer分析器*/</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopAnalyzer</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">       StopAnalyzer analyzer = <span class="keyword">new</span> StopAnalyzer(Version.LUCENE_36);</div><div class="line">       <span class="keyword">this</span>.getTokens(analyzer, msg);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="5、keyword-分词器"><a href="#5、keyword-分词器" class="headerlink" title="5、keyword 分词器"></a>5、keyword 分词器</h3><p>KeywordAnalyzer把整个输入作为一个单独词汇单元，方便特殊类型的文本进行索引和检索。针对邮政编码，地址等文本信息使用关键词分词器进行索引项建立非常方便。</p>
<h3 id="6、pattern-分词器"><a href="#6、pattern-分词器" class="headerlink" title="6、pattern 分词器"></a>6、pattern 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-analyzer.html</a></p>
<p>一个pattern类型的analyzer可以通过正则表达式将文本分成”terms”(经过token Filter 后得到的东西 )。接受如下设置:</p>
<p>一个 pattern analyzer 可以做如下的属性设置:</p>
<table>
<thead>
<tr>
<th>lowercase</th>
<th>terms是否是小写. 默认为 true 小写.</th>
</tr>
</thead>
<tbody>
<tr>
<td>pattern</td>
<td>正则表达式的pattern, 默认是 \W+.</td>
</tr>
<tr>
<td>flags</td>
<td>正则表达式的flags</td>
</tr>
<tr>
<td>stopwords</td>
<td>一个用于初始化stop filter的需要stop 单词的列表.默认单词是空的列表</td>
</tr>
</tbody>
</table>
<h3 id="7、language-分词器"><a href="#7、language-分词器" class="headerlink" title="7、language 分词器"></a>7、language 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html</a></p>
<p>一个用于解析特殊语言文本的analyzer集合。（ arabic,armenian, basque, brazilian, bulgarian, catalan, cjk, czech, danish, dutch, english, finnish, french,galician, german, greek, hindi, hungarian, indonesian, irish, italian, latvian, lithuanian, norwegian,persian, portuguese, romanian, russian, sorani, spanish, swedish, turkish, thai.）可惜没有中文。不予考虑</p>
<h3 id="8、snowball-分词器"><a href="#8、snowball-分词器" class="headerlink" title="8、snowball 分词器"></a>8、snowball 分词器</h3><p>一个snowball类型的analyzer是由standard tokenizer和standard filter、lowercase filter、stop filter、snowball filter这四个filter构成的。</p>
<p>snowball analyzer 在Lucene中通常是不推荐使用的。</p>
<h3 id="9、Custom-分词器"><a href="#9、Custom-分词器" class="headerlink" title="9、Custom 分词器"></a>9、Custom 分词器</h3><p>是自定义的analyzer。允许多个零到多个tokenizer，零到多个 Char Filters. custom analyzer 的名字不能以 “_”开头.</p>
<p>The following are settings that can be set for a custom analyzer type:</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>tokenizer</td>
<td>通用的或者注册的tokenizer.</td>
</tr>
<tr>
<td>filter</td>
<td>通用的或者注册的token filters</td>
</tr>
<tr>
<td>char_filter</td>
<td>通用的或者注册的 character filters</td>
</tr>
<tr>
<td>position_increment_gap</td>
<td>距离查询时，最大允许查询的距离，默认是100</td>
</tr>
</tbody>
</table>
<p>自定义的模板：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">index :</div><div class="line">    analysis :</div><div class="line">        analyzer :</div><div class="line">            myAnalyzer2 :</div><div class="line">                type : custom</div><div class="line">                tokenizer : myTokenizer1</div><div class="line">                filter : [myTokenFilter1, myTokenFilter2]</div><div class="line">                char_filter : [my_html]</div><div class="line">                position_increment_gap: 256</div><div class="line">        tokenizer :</div><div class="line">            myTokenizer1 :</div><div class="line">                type : standard</div><div class="line">                max_token_length : 900</div><div class="line">        filter :</div><div class="line">            myTokenFilter1 :</div><div class="line">                type : stop</div><div class="line">                stopwords : [stop1, stop2, stop3, stop4]</div><div class="line">            myTokenFilter2 :</div><div class="line">                type : length</div><div class="line">                min : 0</div><div class="line">                max : 2000</div><div class="line">        char_filter :</div><div class="line">              my_html :</div><div class="line">                type : html_strip</div><div class="line">                escaped_tags : [xxx, yyy]</div><div class="line">                read_ahead : 1024</div></pre></td></tr></table></figure>
<h3 id="10、fingerprint-分词器"><a href="#10、fingerprint-分词器" class="headerlink" title="10、fingerprint 分词器"></a>10、fingerprint 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-fingerprint-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-fingerprint-analyzer.html</a></p>
<hr>
<h2 id="中文分词器："><a href="#中文分词器：" class="headerlink" title="中文分词器："></a>中文分词器：</h2><h3 id="1、ik-analyzer"><a href="#1、ik-analyzer" class="headerlink" title="1、ik-analyzer"></a>1、ik-analyzer</h3><p><a href="https://github.com/wks/ik-analyzer" target="_blank" rel="external">https://github.com/wks/ik-analyzer</a></p>
<p>IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。</p>
<p>采用了特有的“正向迭代最细粒度切分算法“，支持细粒度和最大词长两种切分模式；具有83万字/秒（1600KB/S）的高速处理能力。</p>
<p>采用了多子处理器分析模式，支持：英文字母、数字、中文词汇等分词处理，兼容韩文、日文字符</p>
<p>优化的词典存储，更小的内存占用。支持用户词典扩展定义</p>
<p>针对Lucene全文检索优化的查询分析器IKQueryParser(作者吐血推荐)；引入简单搜索表达式，采用歧义分析算法优化查询关键字的搜索排列组合，能极大的提高Lucene检索的命中率。</p>
<p>Maven用法：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.wltea.ik-analyzer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ik-analyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在IK Analyzer加入Maven Central Repository之前，你需要手动安装，安装到本地的repository，或者上传到自己的Maven repository服务器上。</p>
<p>要安装到本地Maven repository，使用如下命令，将自动编译，打包并安装：<br>mvn install -Dmaven.test.skip=true</p>
<h4 id="Elasticsearch添加中文分词"><a href="#Elasticsearch添加中文分词" class="headerlink" title="Elasticsearch添加中文分词"></a>Elasticsearch添加中文分词</h4><h5 id="安装IK分词插件"><a href="#安装IK分词插件" class="headerlink" title="安装IK分词插件"></a>安装IK分词插件</h5><p><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="external">https://github.com/medcl/elasticsearch-analysis-ik</a></p>
<p>进入elasticsearch-analysis-ik-master</p>
<p>更多安装请参考博客：</p>
<p>1、<a href="http://blog.csdn.net/dingzfang/article/details/42776693" target="_blank" rel="external">为elastic添加中文分词</a> ： <a href="http://blog.csdn.net/dingzfang/article/details/42776693" target="_blank" rel="external">http://blog.csdn.net/dingzfang/article/details/42776693</a></p>
<p>2、<a href="http://www.cnblogs.com/xing901022/p/5910139.html" target="_blank" rel="external">如何在Elasticsearch中安装中文分词器(IK+pinyin)</a> ：<a href="http://www.cnblogs.com/xing901022/p/5910139.html" target="_blank" rel="external">http://www.cnblogs.com/xing901022/p/5910139.html</a></p>
<p>3、<a href="http://blog.csdn.net/jam00/article/details/52983056" target="_blank" rel="external">Elasticsearch 中文分词器 IK 配置和使用</a> ： <a href="http://blog.csdn.net/jam00/article/details/52983056" target="_blank" rel="external">http://blog.csdn.net/jam00/article/details/52983056</a></p>
<h4 id="ik-带有两个分词器"><a href="#ik-带有两个分词器" class="headerlink" title="ik 带有两个分词器"></a>ik 带有两个分词器</h4><p><strong>ik_max_word</strong> ：会将文本做最细粒度的拆分；尽可能多的拆分出词语</p>
<p><strong>ik_smart</strong>：会做最粗粒度的拆分；已被分出的词语将不会再次被其它词语占有</p>
<p>区别：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"># ik_max_word</div><div class="line"></div><div class="line">curl -XGET &apos;http://localhost:9200/_analyze?pretty&amp;analyzer=ik_max_word&apos; -d &apos;联想是全球最大的笔记本厂商&apos;</div><div class="line">#返回</div><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;联想&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 2,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;是&quot;,</div><div class="line">      &quot;start_offset&quot; : 2,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;全球&quot;,</div><div class="line">      &quot;start_offset&quot; : 3,</div><div class="line">      &quot;end_offset&quot; : 5,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;最大&quot;,</div><div class="line">      &quot;start_offset&quot; : 5,</div><div class="line">      &quot;end_offset&quot; : 7,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;的&quot;,</div><div class="line">      &quot;start_offset&quot; : 7,</div><div class="line">      &quot;end_offset&quot; : 8,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 4</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;笔记本&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 11,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 5</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;笔记&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 10,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 6</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;本厂&quot;,</div><div class="line">      &quot;start_offset&quot; : 10,</div><div class="line">      &quot;end_offset&quot; : 12,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 7</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;厂商&quot;,</div><div class="line">      &quot;start_offset&quot; : 11,</div><div class="line">      &quot;end_offset&quot; : 13,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 8</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"># ik_smart</div><div class="line"></div><div class="line">curl -XGET &apos;http://localhost:9200/_analyze?pretty&amp;analyzer=ik_smart&apos; -d &apos;联想是全球最大的笔记本厂商&apos;</div><div class="line"></div><div class="line"># 返回</div><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;联想&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 2,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;是&quot;,</div><div class="line">      &quot;start_offset&quot; : 2,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;全球&quot;,</div><div class="line">      &quot;start_offset&quot; : 3,</div><div class="line">      &quot;end_offset&quot; : 5,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;最大&quot;,</div><div class="line">      &quot;start_offset&quot; : 5,</div><div class="line">      &quot;end_offset&quot; : 7,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;的&quot;,</div><div class="line">      &quot;start_offset&quot; : 7,</div><div class="line">      &quot;end_offset&quot; : 8,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 4</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;笔记本&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 11,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 5</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;厂商&quot;,</div><div class="line">      &quot;start_offset&quot; : 11,</div><div class="line">      &quot;end_offset&quot; : 13,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 6</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们来创建一个索引，使用 ik<br>创建一个名叫 iktest 的索引，设置它的分析器用 ik ，分词器用 ik_max_word，并创建一个 article 的类型，里面有一个 subject 的字段，指定其使用 ik_max_word 分词器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">curl -XPUT &apos;http://localhost:9200/iktest?pretty&apos; -d &apos;&#123;</div><div class="line">    &quot;settings&quot; : &#123;</div><div class="line">        &quot;analysis&quot; : &#123;</div><div class="line">            &quot;analyzer&quot; : &#123;</div><div class="line">                &quot;ik&quot; : &#123;</div><div class="line">                    &quot;tokenizer&quot; : &quot;ik_max_word&quot;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;mappings&quot; : &#123;</div><div class="line">        &quot;article&quot; : &#123;</div><div class="line">            &quot;dynamic&quot; : true,</div><div class="line">            &quot;properties&quot; : &#123;</div><div class="line">                &quot;subject&quot; : &#123;</div><div class="line">                    &quot;type&quot; : &quot;string&quot;,</div><div class="line">                    &quot;analyzer&quot; : &quot;ik_max_word&quot;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<p>批量添加几条数据，这里我指定元数据 _id 方便查看，subject 内容为我随便找的几条新闻的标题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/iktest/article/_bulk?pretty -d &apos;</div><div class="line">&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;1&quot; &#125; &#125;</div><div class="line">&#123;&quot;subject&quot; : &quot;＂闺蜜＂崔顺实被韩检方传唤 韩总统府促彻查真相&quot; &#125;</div><div class="line">&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;2&quot; &#125; &#125;</div><div class="line">&#123;&quot;subject&quot; : &quot;韩举行＂护国训练＂ 青瓦台:决不许国家安全出问题&quot; &#125;</div><div class="line">&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;3&quot; &#125; &#125;</div><div class="line">&#123;&quot;subject&quot; : &quot;媒体称FBI已经取得搜查令 检视希拉里电邮&quot; &#125;</div><div class="line">&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;4&quot; &#125; &#125;</div><div class="line">&#123;&quot;subject&quot; : &quot;村上春树获安徒生奖 演讲中谈及欧洲排外问题&quot; &#125;</div><div class="line">&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;5&quot; &#125; &#125;</div><div class="line">&#123;&quot;subject&quot; : &quot;希拉里团队炮轰FBI 参院民主党领袖批其“违法”&quot; &#125;</div><div class="line">&apos;</div></pre></td></tr></table></figure>
<p>查询 “希拉里和韩国”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/iktest/article/_search?pretty  -d&apos;</div><div class="line">&#123;</div><div class="line">    &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;subject&quot; : &quot;希拉里和韩国&quot; &#125;&#125;,</div><div class="line">    &quot;highlight&quot; : &#123;</div><div class="line">        &quot;pre_tags&quot; : [&quot;&lt;font color=&apos;red&apos;&gt;&quot;],</div><div class="line">        &quot;post_tags&quot; : [&quot;&lt;/font&gt;&quot;],</div><div class="line">        &quot;fields&quot; : &#123;</div><div class="line">            &quot;subject&quot; : &#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&apos;</div><div class="line">#返回</div><div class="line">&#123;</div><div class="line">  &quot;took&quot; : 113,</div><div class="line">  &quot;timed_out&quot; : false,</div><div class="line">  &quot;_shards&quot; : &#123;</div><div class="line">    &quot;total&quot; : 5,</div><div class="line">    &quot;successful&quot; : 5,</div><div class="line">    &quot;failed&quot; : 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot; : &#123;</div><div class="line">    &quot;total&quot; : 4,</div><div class="line">    &quot;max_score&quot; : 0.034062363,</div><div class="line">    &quot;hits&quot; : [ &#123;</div><div class="line">      &quot;_index&quot; : &quot;iktest&quot;,</div><div class="line">      &quot;_type&quot; : &quot;article&quot;,</div><div class="line">      &quot;_id&quot; : &quot;2&quot;,</div><div class="line">      &quot;_score&quot; : 0.034062363,</div><div class="line">      &quot;_source&quot; : &#123;</div><div class="line">        &quot;subject&quot; : &quot;韩举行＂护国训练＂ 青瓦台:决不许国家安全出问题&quot;</div><div class="line">      &#125;,</div><div class="line">      &quot;highlight&quot; : &#123;</div><div class="line">        &quot;subject&quot; : [ &quot;&lt;font color=red&gt;韩&lt;/font&gt;举行＂护&lt;font color=red&gt;国&lt;/font&gt;训练＂ 青瓦台:决不许国家安全出问题&quot; ]</div><div class="line">      &#125;</div><div class="line">    &#125;, &#123;</div><div class="line">      &quot;_index&quot; : &quot;iktest&quot;,</div><div class="line">      &quot;_type&quot; : &quot;article&quot;,</div><div class="line">      &quot;_id&quot; : &quot;3&quot;,</div><div class="line">      &quot;_score&quot; : 0.0076681254,</div><div class="line">      &quot;_source&quot; : &#123;</div><div class="line">        &quot;subject&quot; : &quot;媒体称FBI已经取得搜查令 检视希拉里电邮&quot;</div><div class="line">      &#125;,</div><div class="line">      &quot;highlight&quot; : &#123;</div><div class="line">        &quot;subject&quot; : [ &quot;媒体称FBI已经取得搜查令 检视&lt;font color=red&gt;希拉里&lt;/font&gt;电邮&quot; ]</div><div class="line">      &#125;</div><div class="line">    &#125;, &#123;</div><div class="line">      &quot;_index&quot; : &quot;iktest&quot;,</div><div class="line">      &quot;_type&quot; : &quot;article&quot;,</div><div class="line">      &quot;_id&quot; : &quot;5&quot;,</div><div class="line">      &quot;_score&quot; : 0.006709609,</div><div class="line">      &quot;_source&quot; : &#123;</div><div class="line">        &quot;subject&quot; : &quot;希拉里团队炮轰FBI 参院民主党领袖批其“违法”&quot;</div><div class="line">      &#125;,</div><div class="line">      &quot;highlight&quot; : &#123;</div><div class="line">        &quot;subject&quot; : [ &quot;&lt;font color=red&gt;希拉里&lt;/font&gt;团队炮轰FBI 参院民主党领袖批其“违法”&quot; ]</div><div class="line">      &#125;</div><div class="line">    &#125;, &#123;</div><div class="line">      &quot;_index&quot; : &quot;iktest&quot;,</div><div class="line">      &quot;_type&quot; : &quot;article&quot;,</div><div class="line">      &quot;_id&quot; : &quot;1&quot;,</div><div class="line">      &quot;_score&quot; : 0.0021509775,</div><div class="line">      &quot;_source&quot; : &#123;</div><div class="line">        &quot;subject&quot; : &quot;＂闺蜜＂崔顺实被韩检方传唤 韩总统府促彻查真相&quot;</div><div class="line">      &#125;,</div><div class="line">      &quot;highlight&quot; : &#123;</div><div class="line">        &quot;subject&quot; : [ &quot;＂闺蜜＂崔顺实被&lt;font color=red&gt;韩&lt;/font&gt;检方传唤 &lt;font color=red&gt;韩&lt;/font&gt;总统府促彻查真相&quot; ]</div><div class="line">      &#125;</div><div class="line">    &#125; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里用了高亮属性 highlight，直接显示到 html 中，被匹配到的字或词将以红色突出显示。若要用过滤搜索，直接将 match 改为 term 即可</p>
<h4 id="热词更新配置"><a href="#热词更新配置" class="headerlink" title="热词更新配置"></a>热词更新配置</h4><p>网络词语日新月异，如何让新出的网络热词（或特定的词语）实时的更新到我们的搜索当中呢</p>
<p>先用 ik 测试一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">curl -XGET &apos;http://localhost:9200/_analyze?pretty&amp;analyzer=ik_max_word&apos; -d &apos;</div><div class="line">成龙原名陈港生</div><div class="line">&apos;</div><div class="line">#返回</div><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [ &#123;</div><div class="line">    &quot;token&quot; : &quot;成龙&quot;,</div><div class="line">    &quot;start_offset&quot; : 1,</div><div class="line">    &quot;end_offset&quot; : 3,</div><div class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">    &quot;position&quot; : 0</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;原名&quot;,</div><div class="line">    &quot;start_offset&quot; : 3,</div><div class="line">    &quot;end_offset&quot; : 5,</div><div class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">    &quot;position&quot; : 1</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;陈&quot;,</div><div class="line">    &quot;start_offset&quot; : 5,</div><div class="line">    &quot;end_offset&quot; : 6,</div><div class="line">    &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">    &quot;position&quot; : 2</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;港&quot;,</div><div class="line">    &quot;start_offset&quot; : 6,</div><div class="line">    &quot;end_offset&quot; : 7,</div><div class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">    &quot;position&quot; : 3</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;生&quot;,</div><div class="line">    &quot;start_offset&quot; : 7,</div><div class="line">    &quot;end_offset&quot; : 8,</div><div class="line">    &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">    &quot;position&quot; : 4</div><div class="line">  &#125; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ik 的主词典中没有”陈港生” 这个词，所以被拆分了。<br>现在我们来配置一下</p>
<p>修改 IK 的配置文件 ：ES 目录/plugins/ik/config/ik/IKAnalyzer.cfg.xml</p>
<p>修改如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;</div><div class="line">&lt;properties&gt;</div><div class="line">    &lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;</div><div class="line">    &lt;!--用户可以在这里配置自己的扩展字典 --&gt;</div><div class="line">    &lt;entry key=&quot;ext_dict&quot;&gt;custom/mydict.dic;custom/single_word_low_freq.dic&lt;/entry&gt;</div><div class="line">     &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</div><div class="line">    &lt;entry key=&quot;ext_stopwords&quot;&gt;custom/ext_stopword.dic&lt;/entry&gt;</div><div class="line">    &lt;!--用户可以在这里配置远程扩展字典 --&gt;</div><div class="line">    &lt;entry key=&quot;remote_ext_dict&quot;&gt;http://192.168.1.136/hotWords.php&lt;/entry&gt;</div><div class="line">    &lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</div><div class="line">    &lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</div><div class="line">&lt;/properties&gt;</div></pre></td></tr></table></figure>
<p>这里我是用的是远程扩展字典，因为可以使用其他程序调用更新，且不用重启 ES，很方便；当然使用自定义的 mydict.dic 字典也是很方便的，一行一个词，自己加就可以了</p>
<p>既然是远程词典，那么就要是一个可访问的链接，可以是一个页面，也可以是一个txt的文档，但要保证输出的内容是 utf-8 的格式</p>
<p>hotWords.php 的内容</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$s = <span class="string">&lt;&lt;&lt;'EOF'</span></div><div class="line">陈港生</div><div class="line">元楼</div><div class="line">蓝瘦</div><div class="line">EOF;</div><div class="line">header(<span class="string">'Last-Modified: '</span>.gmdate(<span class="string">'D, d M Y H:i:s'</span>, time()).<span class="string">' GMT'</span>, <span class="keyword">true</span>, <span class="number">200</span>);</div><div class="line">header(<span class="string">'ETag: "5816f349-19"'</span>);</div><div class="line"><span class="keyword">echo</span> $s;</div></pre></td></tr></table></figure>
<p>ik 接收两个返回的头部属性 Last-Modified 和 ETag，只要其中一个有变化，就会触发更新，ik 会每分钟获取一次<br>重启 Elasticsearch ，查看启动记录，看到了三个词已被加载进来</p>
<p>再次执行上面的请求，返回, 就可以看到 ik 分词器已经匹配到了 “陈港生” 这个词，同理一些关于我们公司的专有名字（例如：永辉、永辉超市、永辉云创、云创 …. ）也可以自己手动添加到字典中去。</p>
<h3 id="2、结巴中文分词"><a href="#2、结巴中文分词" class="headerlink" title="2、结巴中文分词"></a>2、结巴中文分词</h3><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>1、支持三种分词模式：</p>
<ul>
<li><p>精确模式，试图将句子最精确地切开，适合文本分析；</p>
</li>
<li><p>全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；</p>
</li>
<li><p>搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</p>
</li>
</ul>
<p>2、支持繁体分词</p>
<p>3、支持自定义词典</p>
<h3 id="3、THULAC"><a href="#3、THULAC" class="headerlink" title="3、THULAC"></a>3、THULAC</h3><p>THULAC（THU Lexical Analyzer for Chinese）由清华大学自然语言处理与社会人文计算实验室研制推出的一套中文词法分析工具包，具有中文分词和词性标注功能。THULAC具有如下几个特点：</p>
<p>能力强。利用我们集成的目前世界上规模最大的人工分词和词性标注中文语料库（约含5800万字）训练而成，模型标注能力强大。</p>
<p>准确率高。该工具包在标准数据集Chinese Treebank（CTB5）上分词的F1值可达97.3％，词性标注的F1值可达到92.9％，与该数据集上最好方法效果相当。</p>
<p>速度较快。同时进行分词和词性标注速度为300KB/s，每秒可处理约15万字。只进行分词速度可达到1.3MB/s。</p>
<p>中文分词工具thulac4j发布</p>
<p>1、规范化分词词典，并去掉一些无用词；</p>
<p>2、重写DAT（双数组Trie树）的构造算法，生成的DAT size减少了8%左右，从而节省了内存；</p>
<p>3、优化分词算法，提高了分词速率。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.yizhiru<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thulac4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;thulac4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/en-heng/p/6526598.html" target="_blank" rel="external">http://www.cnblogs.com/en-heng/p/6526598.html</a></p>
<p>thulac4j支持两种分词模式：</p>
<p>SegOnly模式，只分词没有词性标注；</p>
<p>SegPos模式，分词兼有词性标注。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SegOnly mode</span></div><div class="line">String sentence = <span class="string">"滔滔的流水，向着波士顿湾无声逝去"</span>;</div><div class="line">SegOnly seg = <span class="keyword">new</span> SegOnly(<span class="string">"models/seg_only.bin"</span>);</div><div class="line">System.out.println(seg.segment(sentence));</div><div class="line"><span class="comment">// [滔滔, 的, 流水, ，, 向着, 波士顿湾, 无声, 逝去]</span></div><div class="line"></div><div class="line"><span class="comment">// SegPos mode</span></div><div class="line">SegPos pos = <span class="keyword">new</span> SegPos(<span class="string">"models/seg_pos.bin"</span>);</div><div class="line">System.out.println(pos.segment(sentence));</div><div class="line"><span class="comment">//[滔滔/a, 的/u, 流水/n, ，/w, 向着/p, 波士顿湾/ns, 无声/v, 逝去/v]</span></div></pre></td></tr></table></figure>
<h3 id="4、NLPIR"><a href="#4、NLPIR" class="headerlink" title="4、NLPIR"></a>4、NLPIR</h3><p>中科院计算所 NLPIR：<a href="http://ictclas.nlpir.org/nlpir/" target="_blank" rel="external">http://ictclas.nlpir.org/nlpir/</a>  (可直接在线分析中文)</p>
<p>下载地址：<a href="https://github.com/NLPIR-team/NLPIR" target="_blank" rel="external">https://github.com/NLPIR-team/NLPIR</a></p>
<p>中科院分词系统(NLPIR)JAVA简易教程: <a href="http://www.cnblogs.com/wukongjiuwo/p/4092480.html" target="_blank" rel="external">http://www.cnblogs.com/wukongjiuwo/p/4092480.html</a></p>
<h3 id="5、ansj分词器"><a href="#5、ansj分词器" class="headerlink" title="5、ansj分词器"></a>5、ansj分词器</h3><p><a href="https://github.com/NLPchina/ansj_seg" target="_blank" rel="external">https://github.com/NLPchina/ansj_seg</a></p>
<p>这是一个基于n-Gram+CRF+HMM的中文分词的java实现.</p>
<p>分词速度达到每秒钟大约200万字左右（mac air下测试），准确率能达到96%以上</p>
<p>目前实现了.中文分词. 中文姓名识别 .</p>
<p>用户自定义词典,关键字提取，自动摘要，关键字标记等功能<br>可以应用到自然语言处理等方面,适用于对分词效果要求高的各种项目.</p>
<p>maven 引入：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ansj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ansj_seg<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>调用demo</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"欢迎使用ansj_seg,(ansj中文分词)在这里如果你遇到什么问题都可以联系我.我一定尽我所能.帮助大家.ansj_seg更快,更准,更自由!"</span> ;</div><div class="line"> System.out.println(ToAnalysis.parse(str));</div><div class="line"></div><div class="line"> 欢迎/v,使用/v,ansj/en,_,seg/en,,,(,ansj/en,中文/nz,分词/n,),在/p,这里/r,如果/c,你/r,遇到/v,什么/r,问题/n,都/d,可以/v,联系/v,我/r,./m,我/r,一定/d,尽我所能/l,./m,帮助/v,大家/r,./m,ansj/en,_,seg/en,更快/d,,,更/d,准/a,,,更/d,自由/a,!</div></pre></td></tr></table></figure>
<h3 id="6、哈工大的LTP"><a href="#6、哈工大的LTP" class="headerlink" title="6、哈工大的LTP"></a>6、哈工大的LTP</h3><p><a href="https://link.zhihu.com/?target=https%3A//github.com/HIT-SCIR/ltp" target="_blank" rel="external">https://link.zhihu.com/?target=https%3A//github.com/HIT-SCIR/ltp</a></p>
<p>LTP制定了基于XML的语言处理结果表示，并在此基础上提供了一整套自底向上的丰富而且高效的中文语言处理模块（包括词法、句法、语义等6项中文处理核心技术），以及基于动态链接库（Dynamic Link Library, DLL）的应用程序接口、可视化工具，并且能够以网络服务（Web Service）的形式进行使用。</p>
<p>关于LTP的使用，请参考:  <a href="http://ltp.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">http://ltp.readthedocs.io/zh_CN/latest/</a></p>
<h3 id="7、庖丁解牛"><a href="#7、庖丁解牛" class="headerlink" title="7、庖丁解牛"></a>7、庖丁解牛</h3><p>下载地址：<a href="http://pan.baidu.com/s/1eQ88SZS" target="_blank" rel="external">http://pan.baidu.com/s/1eQ88SZS</a></p>
<p>使用分为如下几步：</p>
<ol>
<li><p>配置dic文件：<br>修改paoding-analysis.jar中的paoding-dic-home.properties文件，将“#paoding.dic.home=dic”的注释去掉，并配置成自己dic文件的本地存放路径。eg：/home/hadoop/work/paoding-analysis-2.0.4-beta/dic</p>
</li>
<li><p>把Jar包导入到项目中：<br>将paoding-analysis.jar、commons-logging.jar、lucene-analyzers-2.2.0.jar和lucene-core-2.2.0.jar四个包导入到项目中，这时就可以在代码片段中使用庖丁解牛工具提供的中文分词技术，例如：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Analyzer analyzer = <span class="keyword">new</span> PaodingAnalyzer(); <span class="comment">//定义一个解析器</span></div><div class="line">String text = <span class="string">"庖丁系统是个完全基于lucene的中文分词系统，它就是重新建了一个analyzer，叫做PaodingAnalyzer，这个analyer的核心任务就是生成一个可以切词TokenStream。"</span>; &lt;span style=<span class="string">"font-family: Arial, Helvetica, sans-serif;"</span>&gt;<span class="comment">//待分词的内容&lt;/span&gt;</span></div><div class="line">TokenStream tokenStream = analyzer.tokenStream(text, <span class="keyword">new</span> StringReader(text)); <span class="comment">//得到token序列的输出流</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Token t;</div><div class="line">    <span class="keyword">while</span> ((t = tokenStream.next()) != <span class="keyword">null</span>)</div><div class="line">    &#123;</div><div class="line">           System.out.println(t); <span class="comment">//输出每个token</span></div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="8、sogo在线分词"><a href="#8、sogo在线分词" class="headerlink" title="8、sogo在线分词"></a>8、sogo在线分词</h3><p>sogo在线分词采用了基于汉字标注的分词方法，主要使用了线性链链CRF（Linear-chain CRF）模型。词性标注模块主要基于结构化线性模型（Structured Linear Model）</p>
<p>在线使用地址为：<br><a href="http://www.sogou.com/labs/webservice/" target="_blank" rel="external">http://www.sogou.com/labs/webservice/</a></p>
<h3 id="9、word分词"><a href="#9、word分词" class="headerlink" title="9、word分词"></a>9、word分词</h3><p>地址： <a href="https://github.com/ysc/word" target="_blank" rel="external">https://github.com/ysc/word</a></p>
<p>word分词是一个Java实现的分布式的中文分词组件，提供了多种基于词典的分词算法，并利用ngram模型来消除歧义。能准确识别英文、数字，以及日期、时间等数量词，能识别人名、地名、组织机构名等未登录词。能通过自定义配置文件来改变组件行为，能自定义用户词库、自动检测词库变化、支持大规模分布式环境，能灵活指定多种分词算法，能使用refine功能灵活控制分词结果，还能使用词频统计、词性标注、同义标注、反义标注、拼音标注等功能。提供了10种分词算法，还提供了10种文本相似度算法，同时还无缝和Lucene、Solr、ElasticSearch、Luke集成。注意：word1.3需要JDK1.8</p>
<p>maven 中引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apdplat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>word<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>ElasticSearch插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">1、打开命令行并切换到elasticsearch的bin目录</div><div class="line">cd elasticsearch-2.1.1/bin</div><div class="line"></div><div class="line">2、运行plugin脚本安装word分词插件：</div><div class="line">./plugin install http://apdplat.org/word/archive/v1.4.zip</div><div class="line"></div><div class="line">安装的时候注意：</div><div class="line">    如果提示：</div><div class="line">        ERROR: failed to download</div><div class="line">    或者</div><div class="line">        Failed to install word, reason: failed to download</div><div class="line">    或者</div><div class="line">        ERROR: incorrect hash (SHA1)</div><div class="line">    则重新再次运行命令，如果还是不行，多试两次</div><div class="line"></div><div class="line">如果是elasticsearch1.x系列版本，则使用如下命令：</div><div class="line">./plugin -u http://apdplat.org/word/archive/v1.3.1.zip -i word</div><div class="line"></div><div class="line">3、修改文件elasticsearch-2.1.1/config/elasticsearch.yml，新增如下配置：</div><div class="line">index.analysis.analyzer.default.type : &quot;word&quot;</div><div class="line">index.analysis.tokenizer.default.type : &quot;word&quot;</div><div class="line"></div><div class="line">4、启动ElasticSearch测试效果，在Chrome浏览器中访问：</div><div class="line">http://localhost:9200/_analyze?analyzer=word&amp;text=杨尚川是APDPlat应用级产品开发平台的作者</div><div class="line"></div><div class="line">5、自定义配置</div><div class="line">修改配置文件elasticsearch-2.1.1/plugins/word/word.local.conf</div><div class="line"></div><div class="line">6、指定分词算法</div><div class="line">修改文件elasticsearch-2.1.1/config/elasticsearch.yml，新增如下配置：</div><div class="line">index.analysis.analyzer.default.segAlgorithm : &quot;ReverseMinimumMatching&quot;</div><div class="line">index.analysis.tokenizer.default.segAlgorithm : &quot;ReverseMinimumMatching&quot;</div><div class="line"></div><div class="line">这里segAlgorithm可指定的值有：</div><div class="line">正向最大匹配算法：MaximumMatching</div><div class="line">逆向最大匹配算法：ReverseMaximumMatching</div><div class="line">正向最小匹配算法：MinimumMatching</div><div class="line">逆向最小匹配算法：ReverseMinimumMatching</div><div class="line">双向最大匹配算法：BidirectionalMaximumMatching</div><div class="line">双向最小匹配算法：BidirectionalMinimumMatching</div><div class="line">双向最大最小匹配算法：BidirectionalMaximumMinimumMatching</div><div class="line">全切分算法：FullSegmentation</div><div class="line">最少词数算法：MinimalWordCount</div><div class="line">最大Ngram分值算法：MaxNgramScore</div><div class="line">如不指定，默认使用双向最大匹配算法：BidirectionalMaximumMatching</div></pre></td></tr></table></figure>
<h3 id="10、jcseg分词器"><a href="#10、jcseg分词器" class="headerlink" title="10、jcseg分词器"></a>10、jcseg分词器</h3><p><a href="https://code.google.com/archive/p/jcseg/" target="_blank" rel="external">https://code.google.com/archive/p/jcseg/</a></p>
<h3 id="11、stanford分词器"><a href="#11、stanford分词器" class="headerlink" title="11、stanford分词器"></a>11、stanford分词器</h3><p>Stanford大学的一个开源分词工具，目前已支持汉语。</p>
<p>首先，去【1】下载Download Stanford Word Segmenter version 3.5.2，取得里面的 data 文件夹，放在maven project的 src/main/resources 里。</p>
<p>然后，maven依赖添加：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">corenlp.version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">corenlp.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>edu.stanford.nlp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stanford-corenlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;corenlp.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>edu.stanford.nlp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stanford-corenlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;corenlp.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>models<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>edu.stanford.nlp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stanford-corenlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;corenlp.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>models-chinese<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">import</span> edu.stanford.nlp.ie.crf.CRFClassifier;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoreNLPSegment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CoreNLPSegment instance;</div><div class="line">    <span class="keyword">private</span> CRFClassifier         classifier;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CoreNLPSegment</span><span class="params">()</span></span>&#123;</div><div class="line">        Properties props = <span class="keyword">new</span> Properties();</div><div class="line">        props.setProperty(<span class="string">"sighanCorporaDict"</span>, <span class="string">"data"</span>);</div><div class="line">        props.setProperty(<span class="string">"serDictionary"</span>, <span class="string">"data/dict-chris6.ser.gz"</span>);</div><div class="line">        props.setProperty(<span class="string">"inputEncoding"</span>, <span class="string">"UTF-8"</span>);</div><div class="line">        props.setProperty(<span class="string">"sighanPostProcessing"</span>, <span class="string">"true"</span>);</div><div class="line">        classifier = <span class="keyword">new</span> CRFClassifier(props);</div><div class="line">        classifier.loadClassifierNoExceptions(<span class="string">"data/ctb.gz"</span>, props);</div><div class="line">        classifier.flags.setProperties(props);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CoreNLPSegment <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> CoreNLPSegment();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String[] doSegment(String data) &#123;</div><div class="line">        <span class="keyword">return</span> (String[]) classifier.segmentString(data).toArray();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        String sentence = <span class="string">"他和我在学校里常打桌球。"</span>;</div><div class="line">        String ret[] = CoreNLPSegment.getInstance().doSegment(sentence);</div><div class="line">        <span class="keyword">for</span> (String str : ret) &#123;</div><div class="line">            System.out.println(str);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>博客</strong>：</p>
<p><a href="https://blog.sectong.com/blog/corenlp_segment.html" target="_blank" rel="external">https://blog.sectong.com/blog/corenlp_segment.html</a></p>
<p><a href="http://blog.csdn.net/lightty/article/details/51766602" target="_blank" rel="external">http://blog.csdn.net/lightty/article/details/51766602</a></p>
<h3 id="12、Smartcn"><a href="#12、Smartcn" class="headerlink" title="12、Smartcn"></a>12、Smartcn</h3><p>Smartcn为Apache2.0协议的开源中文分词系统，Java语言编写，修改的中科院计算所ICTCLAS分词系统。很早以前看到Lucene上多了一个中文分词的contribution，当时只是简单的扫了一下.class文件的文件名，通过文件名可以看得出又是一个改的ICTCLAS的分词系统。</p>
<p><a href="http://lucene.apache.org/core/5_1_0/analyzers-smartcn/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.html" target="_blank" rel="external">http://lucene.apache.org/core/5_1_0/analyzers-smartcn/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.html</a></p>
<h3 id="13、pinyin-分词器"><a href="#13、pinyin-分词器" class="headerlink" title="13、pinyin 分词器"></a>13、pinyin 分词器</h3><p>pinyin分词器可以让用户输入拼音，就能查找到相关的关键词。比如在某个商城搜索中，输入 <code>yonghui</code>，就能匹配到  <code>永辉</code>。这样的体验还是非常好的。</p>
<p>pinyin分词器的安装与IK是一样的。下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-pinyin" target="_blank" rel="external">https://github.com/medcl/elasticsearch-analysis-pinyin</a></p>
<p>一些参数请参考 GitHub 的 readme 文档。</p>
<p>这个分词器在1.8版本中，提供了两种分词规则：</p>
<ul>
<li><p>pinyin,就是普通的把汉字转换成拼音；</p>
</li>
<li><p>pinyin_first_letter，提取汉字的拼音首字母</p>
</li>
</ul>
<p>使用：</p>
<p>1.Create a index with custom pinyin analyzer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">curl -XPUT http://localhost:9200/medcl/ -d&apos;</div><div class="line">&#123;</div><div class="line">    &quot;index&quot; : &#123;</div><div class="line">        &quot;analysis&quot; : &#123;</div><div class="line">            &quot;analyzer&quot; : &#123;</div><div class="line">                &quot;pinyin_analyzer&quot; : &#123;</div><div class="line">                    &quot;tokenizer&quot; : &quot;my_pinyin&quot;</div><div class="line">                    &#125;</div><div class="line">            &#125;,</div><div class="line">            &quot;tokenizer&quot; : &#123;</div><div class="line">                &quot;my_pinyin&quot; : &#123;</div><div class="line">                    &quot;type&quot; : &quot;pinyin&quot;,</div><div class="line">                    &quot;keep_separate_first_letter&quot; : false,</div><div class="line">                    &quot;keep_full_pinyin&quot; : true,</div><div class="line">                    &quot;keep_original&quot; : true,</div><div class="line">                    &quot;limit_first_letter_length&quot; : 16,</div><div class="line">                    &quot;lowercase&quot; : true,</div><div class="line">                    &quot;remove_duplicated_term&quot; : true</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<p>2.Test Analyzer, analyzing a chinese name, such as 刘德华</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:9200/medcl/_analyze?text=%e5%88%98%e5%be%b7%e5%8d%8e&amp;analyzer=pinyin_analyzer</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;liu&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 1,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;de&quot;,</div><div class="line">      &quot;start_offset&quot; : 1,</div><div class="line">      &quot;end_offset&quot; : 2,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;hua&quot;,</div><div class="line">      &quot;start_offset&quot; : 2,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;刘德华&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;ldh&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 4</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.Create mapping</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/medcl/folks/_mapping -d&apos;</div><div class="line">&#123;</div><div class="line">    &quot;folks&quot;: &#123;</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">            &quot;name&quot;: &#123;</div><div class="line">                &quot;type&quot;: &quot;keyword&quot;,</div><div class="line">                &quot;fields&quot;: &#123;</div><div class="line">                    &quot;pinyin&quot;: &#123;</div><div class="line">                        &quot;type&quot;: &quot;text&quot;,</div><div class="line">                        &quot;store&quot;: &quot;no&quot;,</div><div class="line">                        &quot;term_vector&quot;: &quot;with_offsets&quot;,</div><div class="line">                        &quot;analyzer&quot;: &quot;pinyin_analyzer&quot;,</div><div class="line">                        &quot;boost&quot;: 10</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<p>4.Indexing</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/medcl/folks/andy -d&apos;&#123;&quot;name&quot;:&quot;刘德华&quot;&#125;&apos;</div></pre></td></tr></table></figure>
<p>5.Let’s search</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http://localhost:9200/medcl/folks/_search?q=name:%E5%88%98%E5%BE%B7%E5%8D%8E</div><div class="line">curl http://localhost:9200/medcl/folks/_search?q=name.pinyin:%e5%88%98%e5%be%b7</div><div class="line">curl http://localhost:9200/medcl/folks/_search?q=name.pinyin:liu</div><div class="line">curl http://localhost:9200/medcl/folks/_search?q=name.pinyin:ldh</div><div class="line">curl http://localhost:9200/medcl/folks/_search?q=name.pinyin:de+hua</div></pre></td></tr></table></figure>
<p>6.Using Pinyin-TokenFilter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">curl -XPUT http://localhost:9200/medcl1/ -d&apos;</div><div class="line">&#123;</div><div class="line">    &quot;index&quot; : &#123;</div><div class="line">        &quot;analysis&quot; : &#123;</div><div class="line">            &quot;analyzer&quot; : &#123;</div><div class="line">                &quot;user_name_analyzer&quot; : &#123;</div><div class="line">                    &quot;tokenizer&quot; : &quot;whitespace&quot;,</div><div class="line">                    &quot;filter&quot; : &quot;pinyin_first_letter_and_full_pinyin_filter&quot;</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &quot;filter&quot; : &#123;</div><div class="line">                &quot;pinyin_first_letter_and_full_pinyin_filter&quot; : &#123;</div><div class="line">                    &quot;type&quot; : &quot;pinyin&quot;,</div><div class="line">                    &quot;keep_first_letter&quot; : true,</div><div class="line">                    &quot;keep_full_pinyin&quot; : false,</div><div class="line">                    &quot;keep_none_chinese&quot; : true,</div><div class="line">                    &quot;keep_original&quot; : false,</div><div class="line">                    &quot;limit_first_letter_length&quot; : 16,</div><div class="line">                    &quot;lowercase&quot; : true,</div><div class="line">                    &quot;trim_whitespace&quot; : true,</div><div class="line">                    &quot;keep_none_chinese_in_first_letter&quot; : true</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<p>Token Test:刘德华 张学友 郭富城 黎明 四大天王</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET http://localhost:9200/medcl1/_analyze?text=%e5%88%98%e5%be%b7%e5%8d%8e+%e5%bc%a0%e5%ad%a6%e5%8f%8b+%e9%83%ad%e5%af%8c%e5%9f%8e+%e9%bb%8e%e6%98%8e+%e5%9b%9b%e5%a4%a7%e5%a4%a9%e7%8e%8b&amp;analyzer=user_name_analyzer</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;ldh&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;zxy&quot;,</div><div class="line">      &quot;start_offset&quot; : 4,</div><div class="line">      &quot;end_offset&quot; : 7,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;gfc&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 11,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;lm&quot;,</div><div class="line">      &quot;start_offset&quot; : 12,</div><div class="line">      &quot;end_offset&quot; : 14,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;sdtw&quot;,</div><div class="line">      &quot;start_offset&quot; : 15,</div><div class="line">      &quot;end_offset&quot; : 19,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 4</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>7.Used in phrase query</p>
<p>(1)、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">PUT /medcl/</div><div class="line"> &#123;</div><div class="line">     &quot;index&quot; : &#123;</div><div class="line">         &quot;analysis&quot; : &#123;</div><div class="line">             &quot;analyzer&quot; : &#123;</div><div class="line">                 &quot;pinyin_analyzer&quot; : &#123;</div><div class="line">                     &quot;tokenizer&quot; : &quot;my_pinyin&quot;</div><div class="line">                     &#125;</div><div class="line">             &#125;,</div><div class="line">             &quot;tokenizer&quot; : &#123;</div><div class="line">                 &quot;my_pinyin&quot; : &#123;</div><div class="line">                     &quot;type&quot; : &quot;pinyin&quot;,</div><div class="line">                     &quot;keep_first_letter&quot;:false,</div><div class="line">                     &quot;keep_separate_first_letter&quot; : false,</div><div class="line">                     &quot;keep_full_pinyin&quot; : true,</div><div class="line">                     &quot;keep_original&quot; : false,</div><div class="line">                     &quot;limit_first_letter_length&quot; : 16,</div><div class="line">                     &quot;lowercase&quot; : true</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> GET /medcl/folks/_search</div><div class="line"> &#123;</div><div class="line">   &quot;query&quot;: &#123;&quot;match_phrase&quot;: &#123;</div><div class="line">     &quot;name.pinyin&quot;: &quot;刘德华&quot;</div><div class="line">   &#125;&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>(2)、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">PUT /medcl/</div><div class="line">  &#123;</div><div class="line">      &quot;index&quot; : &#123;</div><div class="line">          &quot;analysis&quot; : &#123;</div><div class="line">              &quot;analyzer&quot; : &#123;</div><div class="line">                  &quot;pinyin_analyzer&quot; : &#123;</div><div class="line">                      &quot;tokenizer&quot; : &quot;my_pinyin&quot;</div><div class="line">                      &#125;</div><div class="line">              &#125;,</div><div class="line">              &quot;tokenizer&quot; : &#123;</div><div class="line">                  &quot;my_pinyin&quot; : &#123;</div><div class="line">                      &quot;type&quot; : &quot;pinyin&quot;,</div><div class="line">                      &quot;keep_first_letter&quot;:false,</div><div class="line">                      &quot;keep_separate_first_letter&quot; : true,</div><div class="line">                      &quot;keep_full_pinyin&quot; : false,</div><div class="line">                      &quot;keep_original&quot; : false,</div><div class="line">                      &quot;limit_first_letter_length&quot; : 16,</div><div class="line">                      &quot;lowercase&quot; : true</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  POST /medcl/folks/andy</div><div class="line">  &#123;&quot;name&quot;:&quot;刘德华&quot;&#125;</div><div class="line"></div><div class="line">  GET /medcl/folks/_search</div><div class="line">  &#123;</div><div class="line">    &quot;query&quot;: &#123;&quot;match_phrase&quot;: &#123;</div><div class="line">      &quot;name.pinyin&quot;: &quot;刘德h&quot;</div><div class="line">    &#125;&#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  GET /medcl/folks/_search</div><div class="line">  &#123;</div><div class="line">    &quot;query&quot;: &#123;&quot;match_phrase&quot;: &#123;</div><div class="line">      &quot;name.pinyin&quot;: &quot;刘dh&quot;</div><div class="line">    &#125;&#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  GET /medcl/folks/_search</div><div class="line">  &#123;</div><div class="line">    &quot;query&quot;: &#123;&quot;match_phrase&quot;: &#123;</div><div class="line">      &quot;name.pinyin&quot;: &quot;dh&quot;</div><div class="line">    &#125;&#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="14、Mmseg-分词器"><a href="#14、Mmseg-分词器" class="headerlink" title="14、Mmseg 分词器"></a>14、Mmseg 分词器</h3><p>也支持 Elasticsearch</p>
<p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-mmseg/releases" target="_blank" rel="external">https://github.com/medcl/elasticsearch-analysis-mmseg/releases</a>   根据对应的版本进行下载</p>
<p>如何使用：</p>
<p>1、创建索引：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XPUT http://localhost:9200/index</div></pre></td></tr></table></figure>
<p>2、创建 mapping</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/index/fulltext/_mapping -d&apos;</div><div class="line">&#123;</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">            &quot;content&quot;: &#123;</div><div class="line">                &quot;type&quot;: &quot;text&quot;,</div><div class="line">                &quot;term_vector&quot;: &quot;with_positions_offsets&quot;,</div><div class="line">                &quot;analyzer&quot;: &quot;mmseg_maxword&quot;,</div><div class="line">                &quot;search_analyzer&quot;: &quot;mmseg_maxword&quot;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<p>3.Indexing some docs</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/index/fulltext/1 -d&apos;</div><div class="line">&#123;&quot;content&quot;:&quot;美国留给伊拉克的是个烂摊子吗&quot;&#125;</div><div class="line">&apos;</div><div class="line"></div><div class="line">curl -XPOST http://localhost:9200/index/fulltext/2 -d&apos;</div><div class="line">&#123;&quot;content&quot;:&quot;公安部：各地校车将享最高路权&quot;&#125;</div><div class="line">&apos;</div><div class="line"></div><div class="line">curl -XPOST http://localhost:9200/index/fulltext/3 -d&apos;</div><div class="line">&#123;&quot;content&quot;:&quot;中韩渔警冲突调查：韩警平均每天扣1艘中国渔船&quot;&#125;</div><div class="line">&apos;</div><div class="line"></div><div class="line">curl -XPOST http://localhost:9200/index/fulltext/4 -d&apos;</div><div class="line">&#123;&quot;content&quot;:&quot;中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首&quot;&#125;</div><div class="line">&apos;</div></pre></td></tr></table></figure>
<p>4.Query with highlighting(查询高亮)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/index/fulltext/_search  -d&apos;</div><div class="line">&#123;</div><div class="line">    &quot;query&quot; : &#123; &quot;term&quot; : &#123; &quot;content&quot; : &quot;中国&quot; &#125;&#125;,</div><div class="line">    &quot;highlight&quot; : &#123;</div><div class="line">        &quot;pre_tags&quot; : [&quot;&lt;tag1&gt;&quot;, &quot;&lt;tag2&gt;&quot;],</div><div class="line">        &quot;post_tags&quot; : [&quot;&lt;/tag1&gt;&quot;, &quot;&lt;/tag2&gt;&quot;],</div><div class="line">        &quot;fields&quot; : &#123;</div><div class="line">            &quot;content&quot; : &#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&apos;</div></pre></td></tr></table></figure>
<p>5、结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;took&quot;: 14,</div><div class="line">    &quot;timed_out&quot;: false,</div><div class="line">    &quot;_shards&quot;: &#123;</div><div class="line">        &quot;total&quot;: 5,</div><div class="line">        &quot;successful&quot;: 5,</div><div class="line">        &quot;failed&quot;: 0</div><div class="line">    &#125;,</div><div class="line">    &quot;hits&quot;: &#123;</div><div class="line">        &quot;total&quot;: 2,</div><div class="line">        &quot;max_score&quot;: 2,</div><div class="line">        &quot;hits&quot;: [</div><div class="line">            &#123;</div><div class="line">                &quot;_index&quot;: &quot;index&quot;,</div><div class="line">                &quot;_type&quot;: &quot;fulltext&quot;,</div><div class="line">                &quot;_id&quot;: &quot;4&quot;,</div><div class="line">                &quot;_score&quot;: 2,</div><div class="line">                &quot;_source&quot;: &#123;</div><div class="line">                    &quot;content&quot;: &quot;中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首&quot;</div><div class="line">                &#125;,</div><div class="line">                &quot;highlight&quot;: &#123;</div><div class="line">                    &quot;content&quot;: [</div><div class="line">                        &quot;&lt;tag1&gt;中国&lt;/tag1&gt;驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首 &quot;</div><div class="line">                    ]</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;_index&quot;: &quot;index&quot;,</div><div class="line">                &quot;_type&quot;: &quot;fulltext&quot;,</div><div class="line">                &quot;_id&quot;: &quot;3&quot;,</div><div class="line">                &quot;_score&quot;: 2,</div><div class="line">                &quot;_source&quot;: &#123;</div><div class="line">                    &quot;content&quot;: &quot;中韩渔警冲突调查：韩警平均每天扣1艘中国渔船&quot;</div><div class="line">                &#125;,</div><div class="line">                &quot;highlight&quot;: &#123;</div><div class="line">                    &quot;content&quot;: [</div><div class="line">                        &quot;均每天扣1艘&lt;tag1&gt;中国&lt;/tag1&gt;渔船 &quot;</div><div class="line">                    ]</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考博客：</p>
<p>为elastic添加中文分词: <a href="http://blog.csdn.net/dingzfang/article/details/42776693" target="_blank" rel="external">http://blog.csdn.net/dingzfang/article/details/42776693</a></p>
<h3 id="15、bosonnlp-（玻森数据中文分析器）"><a href="#15、bosonnlp-（玻森数据中文分析器）" class="headerlink" title="15、bosonnlp （玻森数据中文分析器）"></a>15、bosonnlp （玻森数据中文分析器）</h3><p>下载地址：<a href="https://github.com/bosondata/elasticsearch-analysis-bosonnlp" target="_blank" rel="external">https://github.com/bosondata/elasticsearch-analysis-bosonnlp</a></p>
<p>如何使用：</p>
<p>运行 ElasticSearch 之前需要在 config 文件夹中修改 elasticsearch.yml 来定义使用玻森中文分析器，并填写玻森 API_TOKEN 以及玻森分词 API 的地址，即在该文件结尾处添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">index:</div><div class="line">  analysis:</div><div class="line">    analyzer:</div><div class="line">      bosonnlp:</div><div class="line">          type: bosonnlp</div><div class="line">          API_URL: http://api.bosonnlp.com/tag/analysis</div><div class="line">          # You MUST give the API_TOKEN value, otherwise it doesn&apos;t work</div><div class="line">          API_TOKEN: *PUT YOUR API TOKEN HERE*</div><div class="line">          # Please uncomment if you want to specify ANY ONE of the following</div><div class="line">          # areguments, otherwise the DEFAULT value will be used, i.e.,</div><div class="line">          # space_mode is 0,</div><div class="line">          # oov_level is 3,</div><div class="line">          # t2s is 0,</div><div class="line">          # special_char_conv is 0.</div><div class="line">          # More detials can be found in bosonnlp docs:</div><div class="line">          # http://docs.bosonnlp.com/tag.html</div><div class="line">          #</div><div class="line">          #</div><div class="line">          # space_mode: put your value here(range from 0-3)</div><div class="line">          # oov_level: put your value here(range from 0-4)</div><div class="line">          # t2s: put your value here(range from 0-1)</div><div class="line">          # special_char_conv: put your value here(range from 0-1)</div></pre></td></tr></table></figure>
<p>需要注意的是</p>
<p>必须在 API_URL 填写给定的分词地址以及在API_TOKEN：<em>PUT YOUR API TOKEN HERE</em> 中填写给定的玻森数据API_TOKEN，否则无法使用玻森中文分析器。该 API_TOKEN 是注册玻森数据账号所获得。</p>
<p>如果配置文件中已经有配置过其他的 analyzer，请直接在 analyzer 下如上添加 bosonnlp analyzer。</p>
<p>如果有多个 node 并且都需要 BosonNLP 的分词插件，则每个 node 下的 yaml 文件都需要如上安装和设置。</p>
<p>另外，玻森中文分词还提供了4个参数（space_mode，oov_level，t2s，special_char_conv）可满足不同的分词需求。如果取默认值，则无需任何修改；否则，可取消对应参数的注释并赋值。</p>
<p><strong>测试：</strong></p>
<p>建立 index</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XPUT &apos;localhost:9200/test&apos;</div></pre></td></tr></table></figure>
<p>测试分析器是否配置成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET &apos;localhost:9200/test/_analyze?analyzer=bosonnlp&amp;pretty&apos; -d &apos;这是玻森数据分词的测试&apos;</div></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [ &#123;</div><div class="line">    &quot;token&quot; : &quot;这&quot;,</div><div class="line">    &quot;start_offset&quot; : 0,</div><div class="line">    &quot;end_offset&quot; : 1,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 0</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;是&quot;,</div><div class="line">    &quot;start_offset&quot; : 1,</div><div class="line">    &quot;end_offset&quot; : 2,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 1</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;玻森&quot;,</div><div class="line">    &quot;start_offset&quot; : 2,</div><div class="line">    &quot;end_offset&quot; : 4,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 2</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;数据&quot;,</div><div class="line">    &quot;start_offset&quot; : 4,</div><div class="line">    &quot;end_offset&quot; : 6,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 3</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;分词&quot;,</div><div class="line">    &quot;start_offset&quot; : 6,</div><div class="line">    &quot;end_offset&quot; : 8,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 4</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;的&quot;,</div><div class="line">    &quot;start_offset&quot; : 8,</div><div class="line">    &quot;end_offset&quot; : 9,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 5</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;测试&quot;,</div><div class="line">    &quot;start_offset&quot; : 9,</div><div class="line">    &quot;end_offset&quot; : 11,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 6</div><div class="line">  &#125; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置 Token Filter</p>
<p>现有的 BosonNLP 分析器没有内置 token filter，如果有过滤 Token 的需求，可以利用 BosonNLP Tokenizer 和 ES 提供的 token filter 搭建定制分析器。</p>
<p>步骤</p>
<p>配置定制的 analyzer 有以下三个步骤：</p>
<p>添加 BosonNLP tokenizer<br>在 elasticsearch.yml 文件中 analysis 下添加 tokenizer， 并在 tokenizer 中添加 BosonNLP tokenizer 的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">index:</div><div class="line">  analysis:</div><div class="line">    analyzer:</div><div class="line">      ...</div><div class="line">    tokenizer:</div><div class="line">      bosonnlp:</div><div class="line">          type: bosonnlp</div><div class="line">          API_URL: http://api.bosonnlp.com/tag/analysis</div><div class="line">          # You MUST give the API_TOKEN value, otherwise it doesn&apos;t work</div><div class="line">          API_TOKEN: *PUT YOUR API TOKEN HERE*</div><div class="line">          # Please uncomment if you want to specify ANY ONE of the following</div><div class="line">          # areguments, otherwise the DEFAULT value will be used, i.e.,</div><div class="line">          # space_mode is 0,</div><div class="line">          # oov_level is 3,</div><div class="line">          # t2s is 0,</div><div class="line">          # special_char_conv is 0.</div><div class="line">          # More detials can be found in bosonnlp docs:</div><div class="line">          # http://docs.bosonnlp.com/tag.html</div><div class="line">          #</div><div class="line">          #</div><div class="line">          # space_mode: put your value here(range from 0-3)</div><div class="line">          # oov_level: put your value here(range from 0-4)</div><div class="line">          # t2s: put your value here(range from 0-1)</div><div class="line">          # special_char_conv: put your value here(range from 0-1)</div></pre></td></tr></table></figure>
<p>添加 token filter</p>
<p>在 elasticsearch.yml 文件中 analysis 下添加 filter， 并在 filter 中添加所需 filter 的配置（下面例子中，我们以 lowercase filter 为例）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">index:</div><div class="line">  analysis:</div><div class="line">    analyzer:</div><div class="line">      ...</div><div class="line">    tokenizer:</div><div class="line">      ...</div><div class="line">    filter:</div><div class="line">      lowercase:</div><div class="line">          type: lowercase</div></pre></td></tr></table></figure>
<p>添加定制的 analyzer</p>
<p>在 elasticsearch.yml 文件中 analysis 下添加 analyzer， 并在 analyzer 中添加定制的 analyzer 的配置（下面例子中，我们把定制的 analyzer 命名为 filter_bosonnlp）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">index:</div><div class="line">  analysis:</div><div class="line">    analyzer:</div><div class="line">      ...</div><div class="line">      filter_bosonnlp:</div><div class="line">          type: custom</div><div class="line">          tokenizer: bosonnlp</div><div class="line">          filter: [lowercase]</div></pre></td></tr></table></figure>
<hr>
<h2 id="自定义分词器"><a href="#自定义分词器" class="headerlink" title="自定义分词器"></a>自定义分词器</h2><p>虽然Elasticsearch带有一些现成的分析器，然而在分析器上Elasticsearch真正的强大之处在于，你可以通过在一个适合你的特定数据的设置之中组合字符过滤器、分词器、词汇单元过滤器来创建自定义的分析器。</p>
<p><strong>字符过滤器</strong>：</p>
<p>字符过滤器 用来 整理 一个尚未被分词的字符串。例如，如果我们的文本是HTML格式的，它会包含像 <code>&lt;p&gt;</code> 或者 <code>&lt;div&gt;</code> 这样的HTML标签，这些标签是我们不想索引的。我们可以使用 html清除 字符过滤器 来移除掉所有的HTML标签，并且像把 <code>&amp;Aacute;</code> 转换为相对应的Unicode字符 Á 这样，转换HTML实体。</p>
<p>一个分析器可能有0个或者多个字符过滤器。</p>
<p><strong>分词器</strong>:</p>
<p>一个分析器 必须 有一个唯一的分词器。 分词器把字符串分解成单个词条或者词汇单元。 标准 分析器里使用的 标准 分词器 把一个字符串根据单词边界分解成单个词条，并且移除掉大部分的标点符号，然而还有其他不同行为的分词器存在。</p>
<p><strong>词单元过滤器</strong>:</p>
<p>经过分词，作为结果的 词单元流 会按照指定的顺序通过指定的词单元过滤器 。</p>
<p>词单元过滤器可以修改、添加或者移除词单元。我们已经提到过 lowercase 和 stop 词过滤器 ，但是在 Elasticsearch 里面还有很多可供选择的词单元过滤器。 词干过滤器 把单词 遏制 为 词干。 ascii_folding 过滤器移除变音符，把一个像 “très” 这样的词转换为 “tres” 。 ngram 和 edge_ngram 词单元过滤器 可以产生 适合用于部分匹配或者自动补全的词单元。</p>
<h3 id="创建一个自定义分析器"><a href="#创建一个自定义分析器" class="headerlink" title="创建一个自定义分析器"></a>创建一个自定义分析器</h3><p>我们可以在 analysis 下的相应位置设置字符过滤器、分词器和词单元过滤器:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">PUT /my_index</div><div class="line">&#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">        &quot;analysis&quot;: &#123;</div><div class="line">            &quot;char_filter&quot;: &#123; ... custom character filters ... &#125;,</div><div class="line">            &quot;tokenizer&quot;:   &#123; ...    custom tokenizers     ... &#125;,</div><div class="line">            &quot;filter&quot;:      &#123; ...   custom token filters   ... &#125;,</div><div class="line">            &quot;analyzer&quot;:    &#123; ...    custom analyzers      ... &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个分析器可以做到下面的这些事:</p>
<p>1、使用 html清除 字符过滤器移除HTML部分。</p>
<p>2、使用一个自定义的 映射 字符过滤器把 &amp; 替换为 “和” ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;char_filter&quot;: &#123;</div><div class="line">    &quot;&amp;_to_and&quot;: &#123;</div><div class="line">        &quot;type&quot;:       &quot;mapping&quot;,</div><div class="line">        &quot;mappings&quot;: [ &quot;&amp;=&gt; and &quot;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、使用 标准 分词器分词。</p>
<p>4、小写词条，使用 小写 词过滤器处理。</p>
<p>5、使用自定义 停止 词过滤器移除自定义的停止词列表中包含的词：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;filter&quot;: &#123;</div><div class="line">    &quot;my_stopwords&quot;: &#123;</div><div class="line">        &quot;type&quot;:        &quot;stop&quot;,</div><div class="line">        &quot;stopwords&quot;: [ &quot;the&quot;, &quot;a&quot; ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们的分析器定义用我们之前已经设置好的自定义过滤器组合了已经定义好的分词器和过滤器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&quot;analyzer&quot;: &#123;</div><div class="line">    &quot;my_analyzer&quot;: &#123;</div><div class="line">        &quot;type&quot;:           &quot;custom&quot;,</div><div class="line">        &quot;char_filter&quot;:  [ &quot;html_strip&quot;, &quot;&amp;_to_and&quot; ],</div><div class="line">        &quot;tokenizer&quot;:      &quot;standard&quot;,</div><div class="line">        &quot;filter&quot;:       [ &quot;lowercase&quot;, &quot;my_stopwords&quot; ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>汇总起来，完整的 创建索引 请求 看起来应该像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">PUT /my_index</div><div class="line">&#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">        &quot;analysis&quot;: &#123;</div><div class="line">            &quot;char_filter&quot;: &#123;</div><div class="line">                &quot;&amp;_to_and&quot;: &#123;</div><div class="line">                    &quot;type&quot;:       &quot;mapping&quot;,</div><div class="line">                    &quot;mappings&quot;: [ &quot;&amp;=&gt; and &quot;]</div><div class="line">            &#125;&#125;,</div><div class="line">            &quot;filter&quot;: &#123;</div><div class="line">                &quot;my_stopwords&quot;: &#123;</div><div class="line">                    &quot;type&quot;:       &quot;stop&quot;,</div><div class="line">                    &quot;stopwords&quot;: [ &quot;the&quot;, &quot;a&quot; ]</div><div class="line">            &#125;&#125;,</div><div class="line">            &quot;analyzer&quot;: &#123;</div><div class="line">                &quot;my_analyzer&quot;: &#123;</div><div class="line">                    &quot;type&quot;:         &quot;custom&quot;,</div><div class="line">                    &quot;char_filter&quot;:  [ &quot;html_strip&quot;, &quot;&amp;_to_and&quot; ],</div><div class="line">                    &quot;tokenizer&quot;:    &quot;standard&quot;,</div><div class="line">                    &quot;filter&quot;:       [ &quot;lowercase&quot;, &quot;my_stopwords&quot; ]</div><div class="line">            &#125;&#125;</div><div class="line">&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>索引被创建以后，使用 analyze API 来 测试这个新的分析器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GET /my_index/_analyze?analyzer=my_analyzer</div><div class="line">The quick &amp; brown fox</div></pre></td></tr></table></figure>
<p>下面的缩略结果展示出我们的分析器正在正确地运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">      &#123; &quot;token&quot; :   &quot;quick&quot;,    &quot;position&quot; : 2 &#125;,</div><div class="line">      &#123; &quot;token&quot; :   &quot;and&quot;,      &quot;position&quot; : 3 &#125;,</div><div class="line">      &#123; &quot;token&quot; :   &quot;brown&quot;,    &quot;position&quot; : 4 &#125;,</div><div class="line">      &#123; &quot;token&quot; :   &quot;fox&quot;,      &quot;position&quot; : 5 &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个分析器现在是没有多大用处的，除非我们告诉 Elasticsearch在哪里用上它。我们可以像下面这样把这个分析器应用在一个 string 字段上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">PUT /my_index/_mapping/my_type</div><div class="line">&#123;</div><div class="line">    &quot;properties&quot;: &#123;</div><div class="line">        &quot;title&quot;: &#123;</div><div class="line">            &quot;type&quot;:      &quot;string&quot;,</div><div class="line">            &quot;analyzer&quot;:  &quot;my_analyzer&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>整理参考网上资料，如有不正确的地方还请多多指教！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍：ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。&lt;/p&gt;
&lt;p&gt;Elasticsearch中，内置了很多分词器（analyzers）。下面来进行比较下系统默认分词器和常用的中文分词器之间的区别。&lt;br&gt;
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://yoursite.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>那些年我看过的书 —— 致敬我的大学生活 —— Say Good Bye ！</title>
    <link href="http://yoursite.com/2017/08/26/recommend-books/"/>
    <id>http://yoursite.com/2017/08/26/recommend-books/</id>
    <published>2017-08-26T05:38:47.267Z</published>
    <updated>2017-08-28T13:59:39.113Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/learn-2004897_960_720.png-1" alt=""><br><a id="more"></a></p>
<h3 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h3><p>2017.08.21  正式开启我入职的里程，现在已是工作了一个星期了，这个星期算是我入职的过渡期，算是知道了学校生活和工作的差距了，总之，尽快习惯这种生活吧。下面讲下自己的找工作经历和大学阅读的书籍，算是一种书籍推荐，为还在迷茫的你指引方向，同时为我三年的大学生活致敬！也激励我大四在公司实习能更上一层楼！</p>
<h3 id="找工作经历"><a href="#找工作经历" class="headerlink" title="找工作经历"></a>找工作经历</h3><p>这段经历，算是自己很难忘记的经历吧。既辛酸既充实的日子！也很感谢自己在这段时间的系统复习，感觉把自己的基础知识再次聚集在一起了，自己的能力在这一段时间提升的也很快。后面有机会的话我也想写一系列的相关文章，为后来准备工作（面试）的同学提供一些自己的帮助。自己在找工作的这段时间面过的公司也有几家大厂，但是结果都不是很好，对我自己有很大的压力，当时心里真的感觉 ：“自己真的有这么差”，为什么一直被拒，当时很怀疑自己的能力，自己也有总结原因。一是面试的时候自己准备的还不够充分，虽说自己脑子里对这些基础有点印象，但是面试的时候自己稍紧张下就描述不怎么清楚了，导致面试官觉得你可能广度够了，深度还不够（这是阿里面试官电话面试说的）；二是自己的表达能力还是有所欠缺，不能够将自己所要表达的东西说出来，这可能我要在后面加强的地方；三是我的学校问题。在面了几家公司失败后，终于面了家公司要我了，我也确定在这家公司了。很幸运，刚出来，就有一个很好（很负责）的架构师带我，这周就给了我一个很牛逼的项目给我看（虽然自己目前还没有思路改里面的代码），里面新东西很多，说吃透了这个项目，以后绝对可以拿出去吹逼（一脸正经.jpg）。目前我的找工作经历就简短的介绍到这里了，如果感兴趣的话，可以加群：528776268   进来和我讨论交流。</p>
<h3 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h3><p>大学，我不怎么喜欢玩游戏，自己也还算不怎么堕落吧，看了以下的一些书籍，算是对我后面写博客、找工作也有很大的帮助。如果你是大神，请忽略，如果你还是还在大学，和我一样不想把时间浪费在游戏上，可以看看我推荐的一些书籍，有想讨论的请在评论下留下你的评论或者加上面给的群号。</p>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>1、《Java 核心技术》卷一 、卷二              两本书，算是入门比较好的书籍了</p>
<p>2、《疯狂 Java 讲义》                                很厚的一本书，里面的内容也是很注重基础了</p>
<p>3、《Java 并发编程的艺术》——  方腾飞 、魏鹏、程晓明著        方腾飞 是并发编程网的创始人，里面的文章确实还不错，可以多看看里面的文章，收获绝对很大。</p>
<p>4、《 Java多线程编程核心技术》——  高洪岩著   这本书也算是入门多线程编程的不错书籍，我之前还写了一篇读书笔记呢，<a href="http://www.54tianzhisheng.cn/2017/06/04/Java-Thread/" target="_blank" rel="external">《Java 多线程编程核心技术》学习笔记及总结</a>  , 大家如果不想看书的可以去看我的笔记。</p>
<p>5、《Java 并发编程实战》 这本书讲的有点难懂啊，不过确实也是一本很好的书，以上三本书籍如果都弄懂了，我觉得你并发编程这块可能大概就 OK 了，然后再去看看线程池的源码，了解下线程池，我觉得那就更棒了。不想看的话，请看我的博客：<a href="http://www.54tianzhisheng.cn/2017/07/29/ThreadPool/" target="_blank" rel="external">Java 线程池艺术探索</a>  我个人觉得还是写的很不错，那些大厂面试也几乎都会问线程池的东西，然后大概内容也就是我这博客写的</p>
<p>6、《Effective Java》中文版 第二版       算是 Java 的进阶书籍了，面试好多问题也是从这出来的</p>
<p>7、《深入理解 Java 虚拟机——JVM高级特性与最佳实践》第二版     这算是国内讲 JVM 最清楚的书了吧，目前还是只看了一遍，后面继续啃，大厂面试几乎也是都会考 JVM 的，阿里面 JVM 特别多，想进阿里的同学请一定要买这本书去看。</p>
<p>8、《深入分析Java  Web技术内幕  修订版》许令波著   里面知识很广，每一章都是一个不同的知识，可见作者的优秀，不愧是阿里大神。</p>
<p>9、《大型网站系统与 Java 中间件实践》—— 曽宪杰 著    作者是前淘宝技术总监，见证了淘宝网的发展，里面的讲的内容也是很好，看完能让自己也站在高处去思考问题。</p>
<p>10、《大型网站技术架构 —— 核心原理与案例分析》 —— 李智慧 著   最好和上面那本书籍一起看，效果更好，两本看完了，提升思想的高度！</p>
<p>11、《疯狂Java.突破程序员基本功的16课》 李刚 著       书中很注重 Java 的一些细节，讲的很深入，但是书中的错别字特多，可以看看我的读书笔记：<a href="http://www.54tianzhisheng.cn/2017/05/31/Java-16-lession/" target="_blank" rel="external">《疯狂 Java 突破程序员基本功的 16 课》读书笔记</a></p>
<p>12、《Spring 实战》   Spring 入门书籍</p>
<p>13、《Spring 揭秘》—— 王福强  著   这本书别提多牛了，出版时期为 2009 年，豆瓣评分为 9.0 分，写的是真棒！把 Spring 的 IOC 和 AOP 特性写的很清楚，把 Spring 的来龙去脉讲的很全。墙裂推荐这本书籍，如果你想看 Spring，作者很牛，资深架构师，很有幸和作者有过一次交流，当时因为自己的一篇博客  <a href="http://www.54tianzhisheng.cn/2017/03/27/Pyspider%E6%A1%86%E6%9E%B6%20%E2%80%94%E2%80%94%20Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E4%B9%8B%E7%88%AC%E5%8F%96%20V2EX%20%E7%BD%91%E7%AB%99%E5%B8%96%E5%AD%90/" target="_blank" rel="external">Pyspider框架 —— Python爬虫实战之爬取 V2EX 网站帖子</a>，竟然找到我想叫我去实习，可惜了，当时差点就跟着他混了。作者还有一本书  《Spring Boot 揭秘》。</p>
<p>14、《Spring 技术内幕》—— 深入解析 Spring 架构与设计原理     讲解 Spring 源码，深入了内部机制，个人觉得还是不错的。</p>
<p>15、Spring 官方的英文文档          这个别提了，很好，能看英文尽量看英文</p>
<p>16、《跟开涛学 Spring 3》  《跟开涛学 Spring MVC》  京东大神，膜</p>
<p>17、《看透springMvc源代码分析与实践》    算是把 Spring MVC 源码讲的很好的了</p>
<p>见我的笔记：</p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/09/servlet/" target="_blank" rel="external">1、通过源码详解 Servlet</a></p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/14/Spring-MVC01/" target="_blank" rel="external">2 、看透 Spring MVC 源代码分析与实践 —— 网站基础知识</a></p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/14/Spring-MVC02/" target="_blank" rel="external">3 、看透 Spring MVC 源代码分析与实践 —— 俯视 Spring MVC</a></p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/21/Spring-MVC03/" target="_blank" rel="external">4 、看透 Spring MVC 源代码分析与实践 —— Spring MVC 组件分析</a></p>
<p>18、《Spring Boot 实战》</p>
<p>19、Spring Boot 官方 Reference Guide        网上好多写 SpringBoot 的博客，几乎和这个差不多。</p>
<p>20、《JavaEE开发的颠覆者: Spring Boot实战》</p>
<p>21、MyBatis 当然是官方的文档最好了，而且还是中文的。</p>
<p>自己也写过几篇文章，帮助过很多人入门，传送门：</p>
<p>1、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E4%B8%80" target="_blank" rel="external">通过项目逐步深入了解Mybatis（一）</a>/)</p>
<p>2、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E4%BA%8C" target="_blank" rel="external">通过项目逐步深入了解Mybatis（二）</a>/)</p>
<p>3、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E4%B8%89" target="_blank" rel="external">通过项目逐步深入了解Mybatis（三）</a>/)</p>
<p>4、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E5%9B%9B" target="_blank" rel="external">通过项目逐步深入了解Mybatis（四）</a>/)</p>
<p>22、《深入理解 Java 内存模型》—— 程晓明 著      我觉得每个 Java 程序员都应该了解下 Java 的内存模型，该书籍我看的是电子版的，不多，但是讲的却很清楚，把重排序、顺序一致性、Volatile、锁、final等写的很清楚。</p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>《鸟哥的Linux私房菜 基础学习篇(第三版)  》</p>
<p>鸟哥的Linux私房菜：服务器架设篇(第3版)    鸟哥的书</p>
<h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h4><p>《计算机网络第六版——谢希仁 编》</p>
<p>《计算机网络自顶向下方法》</p>
<h4 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h4><p>《代码揭秘：从C／C.的角度探秘计算机系统 —— 左飞》</p>
<p>《深入理解计算机系统》</p>
<p>《计算机科学导论_佛罗赞》</p>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>《高性能MySQL》</p>
<p>《Mysql技术内幕InnoDB存储引擎》</p>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>这门语言语法很简单，上手快，不过我目前好久没用了，都忘得差不多了。当时是看的廖雪峰的 Python 博客</p>
<p>自己也用 Python 做爬虫写过几篇博客，不过有些是在前人的基础上写的。感谢那些栽树的人！</p>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>Git   ： 廖雪峰的 Git 教程</p>
<p>IDEA：<a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a></p>
<p>Maven：《Maven实战》</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>《如何高效学习-斯科特杨》   教你怎样高效学习的</p>
<p>《软技能：代码之外的生存指南》    程序员除了写代码，还得懂点其他的软技能。</p>
<p>《提问的智慧“中文版”》</p>
<p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way" target="_blank" rel="external">《How-To-Ask-Questions-The-Smart-Way》</a>   作为程序员的你，一定要学会咋提问，不然别人都不想鸟你。</p>
<h3 id="优秀网站推荐"><a href="#优秀网站推荐" class="headerlink" title="优秀网站推荐"></a>优秀网站推荐</h3><p>1、GitHub     别和我说不知道</p>
<p>2、InfoQ        文章很不错</p>
<p>3、CSDN    经常看博客专家的博客，里面大牛很多，传送门：<a href="http://blog.csdn.net/tzs_1041218129" target="_blank" rel="external">zhisheng</a></p>
<p>4、知乎         多关注些大牛，看他们吹逼</p>
<p>5、掘金        自己也在上面写专栏，粉丝已经超过一万了，传送门 ：<a href="https://juejin.im/user/57510b82128fe10056ca70fc" target="_blank" rel="external">zhisheng</a></p>
<p>6、并发编程网    前面已经介绍</p>
<p>7、developerworks     上面的博客也很好</p>
<p>8、博客园        里面应该大牛也很多，不过自己没在上面写过博客</p>
<p>9、微信公众号    关注了很多人，有些人的文章确实很好。</p>
<p>10、牛客网        刷笔试题不错的地方，里面大牛超多，怀念叶神和左神讲课的时候，还有很有爱的牛妹。</p>
<p>11、优秀博主的博客地址了</p>
<h3 id="优秀博客推荐"><a href="#优秀博客推荐" class="headerlink" title="优秀博客推荐"></a>优秀博客推荐</h3><p><a href="https://www.liaoxuefeng.com/" target="_blank" rel="external">廖雪峰</a>  Git 和 Python 入门文章就是从他博客看的</p>
<p><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰的网络日志</a></p>
<p><a href="https://coolshell.cn/" target="_blank" rel="external">酷壳-陈皓</a></p>
<p><a href="https://www.zhihu.com/people/rednaxelafx/answers" target="_blank" rel="external">RednaxelaFX</a>   R大，牛逼的不得了</p>
<p><a href="http://calvin1978.blogcn.com/" target="_blank" rel="external">江南白衣</a>      老司机</p>
<p><a href="http://stormzhang.com/" target="_blank" rel="external">stormzhang</a>     人称帅逼张，微信公众号写的不错</p>
<p><a href="http://lovestblog.cn/" target="_blank" rel="external">你假笨</a>    阿里搞 JVM 的，很厉害</p>
<p><a href="http://www.jianshu.com/u/90ab66c248e6" target="_blank" rel="external">占小狼</a></p>
<p><a href="http://www.bysocket.com/" target="_blank" rel="external">泥瓦匠BYSocket</a></p>
<p><a href="http://cuiqingcai.com/" target="_blank" rel="external">崔庆才</a>   写了好多 Python 爬虫相关的文章</p>
<p><a href="http://www.ityouknow.com/" target="_blank" rel="external">纯洁的微笑</a>    SpringBoot 系列不错，其他的文章自己看了感觉是自己喜欢的那种文笔</p>
<p><a href="http://blog.didispace.com/" target="_blank" rel="external">程序猿DD</a></p>
<p><a href="http://itmuch.com/" target="_blank" rel="external">周立</a></p>
<p><a href="https://www.yunai.me/" target="_blank" rel="external">芋艿V的博客</a>     好多系列的源码分析</p>
<p><a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">zhisheng</a>       这个是我不要脸，竟然把自己博客地址的写上去了</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>送一句话，<strong>越努力，越幸运，祝早日成为大神！</strong></p>
<hr>
<p>这些地方可以找到我：</p>
<ul>
<li>blog:  <a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">http://www.54tianzhisheng.cn/</a></li>
<li>GitHub: <a href="https://github.com/zhisheng17" target="_blank" rel="external">https://github.com/zhisheng17</a></li>
<li>QQ 群：528776268</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/learn-2004897_960_720.png-1&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.10 安装 Nginx</title>
    <link href="http://yoursite.com/2017/08/18/Ubuntu-install-Nginx/"/>
    <id>http://yoursite.com/2017/08/18/Ubuntu-install-Nginx/</id>
    <published>2017-08-18T05:52:20.764Z</published>
    <updated>2017-08-18T06:02:34.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-Nginx-依赖库"><a href="#安装-Nginx-依赖库" class="headerlink" title="安装 Nginx 依赖库"></a>安装 Nginx 依赖库</h2><h3 id="安装-gcc-g-的依赖库"><a href="#安装-gcc-g-的依赖库" class="headerlink" title="安装 gcc g++ 的依赖库"></a>安装 gcc g++ 的依赖库</h3><p>Ubuntu 平台使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get install build-essential</div><div class="line">apt-get install libtool</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>CentOS 平台使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">centos平台编译环境使用如下指令</div><div class="line">安装make：</div><div class="line">yum -y install gcc automake autoconf libtool make</div><div class="line">安装g++:</div><div class="line">yum install gcc gcc-c++</div></pre></td></tr></table></figure>
<h3 id="安装-pcre-依赖库"><a href="#安装-pcre-依赖库" class="headerlink" title="安装 pcre 依赖库"></a>安装 pcre 依赖库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install libpcre3 libpcre3-dev</div></pre></td></tr></table></figure>
<h3 id="安装-zlib-依赖库"><a href="#安装-zlib-依赖库" class="headerlink" title="安装 zlib 依赖库"></a>安装 zlib 依赖库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install zlib1g-dev</div></pre></td></tr></table></figure>
<h3 id="安装-ssl-依赖库"><a href="#安装-ssl-依赖库" class="headerlink" title="安装 ssl 依赖库"></a>安装 ssl 依赖库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install openssl</div></pre></td></tr></table></figure>
<h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><p>在网上下载了 nginx-1.8.1.tar.gz 版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#解压：</div><div class="line">tar -zxvf  nginx-1.8.1.tar.gz</div><div class="line">#进入解压目录：</div><div class="line">cd nginx-1.8.1</div><div class="line">#配置：</div><div class="line">./configure --prefix=/usr/local/nginx</div><div class="line">#编辑nginx：</div><div class="line">make</div><div class="line">注意：这里可能会报错，提示“pcre.h No such file or directory”,具体详见：http://stackoverflow.com/questions/22555561/error-building-fatal-error-pcre-h-no-such-file-or-directory</div><div class="line">需要安装 libpcre3-dev,命令为：sudo apt-get install libpcre3-dev</div><div class="line">#安装nginx：</div><div class="line">sudo make install</div><div class="line">#启动nginx：</div><div class="line">sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</div><div class="line">注意：-c 指定配置文件的路径，不加的话，nginx会自动加载默认路径的配置文件，可以通过 -h查看帮助命令。</div><div class="line">#查看nginx进程：</div><div class="line">ps -ef|grep nginx</div></pre></td></tr></table></figure>
<h2 id="Nginx-常用命令"><a href="#Nginx-常用命令" class="headerlink" title="Nginx 常用命令"></a>Nginx 常用命令</h2><h3 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h3><p>切换到 /usr/local/nginx/sbin/ 目录下，执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx</div></pre></td></tr></table></figure>
<p>查看效果：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/nginx.jpg-1" alt="nginx"></p>
<h3 id="停止-Nginx"><a href="#停止-Nginx" class="headerlink" title="停止 Nginx"></a>停止 Nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./nginx -s stop</div><div class="line">./nginx -s quit</div></pre></td></tr></table></figure>
<p>-s 都是采用向 Nginx 发送信号的方式。</p>
<h3 id="Nginx-重新加载配置文件"><a href="#Nginx-重新加载配置文件" class="headerlink" title="Nginx 重新加载配置文件"></a>Nginx 重新加载配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx -s reload</div></pre></td></tr></table></figure>
<h3 id="指定配置文件"><a href="#指定配置文件" class="headerlink" title="指定配置文件"></a>指定配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx -c /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<p>-c 表示 configuration，指定配置文件</p>
<h3 id="查看-Nginx-版本"><a href="#查看-Nginx-版本" class="headerlink" title="查看 Nginx 版本"></a>查看 Nginx 版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./nginx -v  //查看 Nginx 版本信息的参数</div><div class="line">./nginx -V  //查看 Nginx 详细的版本信息</div></pre></td></tr></table></figure>
<h3 id="检查配置文件是否正确"><a href="#检查配置文件是否正确" class="headerlink" title="检查配置文件是否正确"></a>检查配置文件是否正确</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx -t</div></pre></td></tr></table></figure>
<p>如果出现测试失败，表示没有访问错误日志文件和进程，可以 sudo  一下。配置正确的话会有相关的提示。</p>
<h3 id="显示帮助信息"><a href="#显示帮助信息" class="headerlink" title="显示帮助信息"></a>显示帮助信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./nginx -h</div><div class="line">或者</div><div class="line">./nginx -?</div></pre></td></tr></table></figure>
<h2 id="Nginx-的特点和应用场合"><a href="#Nginx-的特点和应用场合" class="headerlink" title="Nginx 的特点和应用场合"></a>Nginx 的特点和应用场合</h2><p>见文章：<a href="http://www.54tianzhisheng.cn/2017/08/05/Nginx/" target="_blank" rel="external">Nginx 基本知识快速入门</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>文章首发地址：<a href="http://www.54tianzhisheng.cn" target="_blank" rel="external">zhisheng的博客</a> ，转载请注明地址 <a href="http://www.54tianzhisheng.cn/2017/08/18/Ubuntu-install-Nginx/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/08/18/Ubuntu-install-Nginx/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-Nginx-依赖库&quot;&gt;&lt;a href=&quot;#安装-Nginx-依赖库&quot; class=&quot;headerlink&quot; title=&quot;安装 Nginx 依赖库&quot;&gt;&lt;/a&gt;安装 Nginx 依赖库&lt;/h2&gt;&lt;h3 id=&quot;安装-gcc-g-的依赖库&quot;&gt;&lt;a href=&quot;#安装-gcc-g-的依赖库&quot; class=&quot;headerlink&quot; title=&quot;安装 gcc g++ 的依赖库&quot;&gt;&lt;/a&gt;安装 gcc g++ 的依赖库&lt;/h3&gt;&lt;p&gt;Ubuntu 平台使用：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apt-get install build-essential&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apt-get install libtool&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>马云热血励志演讲《最伟大的成功》</title>
    <link href="http://yoursite.com/2017/08/11/most-success/"/>
    <id>http://yoursite.com/2017/08/11/most-success/</id>
    <published>2017-08-11T13:56:34.713Z</published>
    <updated>2017-08-11T14:05:19.788Z</updated>
    
    <content type="html"><![CDATA[<p>当你乐观的时候，总是会有机会的。那么你可能要问了“机会在哪呢？”你可能没有特别想实现的事，没有迫切要成功的欲望，没有勇攀高峰的决心，没有水滴石穿的毅力，也没有一颗所向披靡的强大心脏。那么，让来自马云的这段演讲来告诉你，你有什么。你有年轻的身体，你有奇妙的想法，你有乐观的心态，你有无限的可能性。<br><a id="more"></a></p>
<iframe height="492" width="798" src="http://qiniu-xpc3.vmoviercdn.com/59883b6633ea6.mp4" frameborder="0" allowfullscreen>  </iframe>

<p>我想，马云的这段励志演讲为我们提供了一面镜子可以用于自照。上面“你有什么”说完了，接下来让我讨论一下“你可能没有什么”。</p>
<p>你总爱抱怨，机会却总是躲在人们抱怨的地方。你没有仔细想想怎么能把事情做得不一样。你没有行动力，你缺少坚持下去的长劲儿。你抗压能力差，你动不动就玻璃心。你不相信自己也不相信别人，你怕犯错。现在是不是觉得这碗鸡汤有点难以下咽了？如果认识到差距，不如从今天开始改变。明天的你只要比今天的你多迈出0.1步，也是进步。</p>
<p>为自己而工作。停止抱怨，用抱怨的时间多做事。把那些夜里冒出来的好点子在白天付诸行动，既然有了设想，那就行动起来。行动是你迈出的第一步，后面可能会更难，历经无数次动摇，面临无数次诱惑，感受无数次失败的苦味和难以为继的辛酸。顶住这一切，比常人更勇敢地去面对，并且坚持下去。排除万难，别被来自世人的非议和质疑影响。相信你自己，相信你的团队。服务好你的客户，之后再想怎么回馈社会。犯足够多的错，年轻时走过的弯路是最棒的收获。</p>
<p>马云还曾经说过“今天很艰难，明天比今天更难，后天可能是美好的，但更多的人死在了明天”。是不是感到膝盖中箭了？不妨干了这碗“毒鸡汤”。<strong>成功的法则本就并非千篇一律，你会有你自己向上的学问。</strong>那不如从明天开始，去摸索，去践行，哪怕只比昨天的你多迈出0.01步。</p>
<p>送给正在找实习工作的自己！加油！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当你乐观的时候，总是会有机会的。那么你可能要问了“机会在哪呢？”你可能没有特别想实现的事，没有迫切要成功的欲望，没有勇攀高峰的决心，没有水滴石穿的毅力，也没有一颗所向披靡的强大心脏。那么，让来自马云的这段演讲来告诉你，你有什么。你有年轻的身体，你有奇妙的想法，你有乐观的心态，你有无限的可能性。&lt;br&gt;
    
    </summary>
    
    
      <category term="励志" scheme="http://yoursite.com/tags/%E5%8A%B1%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 基本知识快速入门</title>
    <link href="http://yoursite.com/2017/08/05/Nginx/"/>
    <id>http://yoursite.com/2017/08/05/Nginx/</id>
    <published>2017-08-05T12:41:33.497Z</published>
    <updated>2017-08-05T14:44:29.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Nginx？"><a href="#什么是-Nginx？" class="headerlink" title="什么是 Nginx？"></a>什么是 Nginx？</h2><p>Nginx 是一个高性能的 HTTP 和反向代理服务器，以高稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。</p>
<h2 id="Nginx-特点"><a href="#Nginx-特点" class="headerlink" title="Nginx 特点"></a>Nginx 特点</h2><ul>
<li>处理静态文件，索引文件以及自动索引；打开文件描述符缓冲．</li>
<li>无缓存的反向代理加速，简单的负载均衡和容错．</li>
<li>FastCGI，简单的负载均衡和容错．</li>
<li>模块化的结构。包括 gzipping, byte ranges, chunked responses,以及 SSI-filter 等 filter。如果由 FastCGI 或其它代理服务器处理单页中存在的多个 SSI，则这项处理可以并行运行，而不需要相互等待。</li>
<li>支持 SSL 和 TLSSNI．</li>
</ul>
<a id="more"></a>
<h2 id="主要应用场合"><a href="#主要应用场合" class="headerlink" title="主要应用场合"></a>主要应用场合</h2><h3 id="1、静态-HTTP-服务器"><a href="#1、静态-HTTP-服务器" class="headerlink" title="1、静态 HTTP 服务器"></a>1、静态 HTTP 服务器</h3><p>首先，Nginx是一个 HTTP 服务器，可以将服务器上的静态文件（如 HTML、图片）通过 HTTP 协议展现给客户端。</p>
<p>配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>; <span class="comment"># 端口号</span></div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">root</span> /usr/share/nginx/html; <span class="comment"># 静态文件路径</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、反向代理服务器"><a href="#2、反向代理服务器" class="headerlink" title="2、反向代理服务器"></a>2、反向代理服务器</h3><p>什么是反向代理？</p>
<p>客户端本来可以直接通过 HTTP 协议访问某网站应用服务器，如果网站管理员在中间加上一个 Nginx，客户端请求Nginx，Nginx 请求应用服务器，然后将结果返回给客户端，此时 Nginx 就是反向代理服务器。</p>
<p><img src="http://7xidft.com1.z0.glb.clouddn.com/blog/20150517220513170.png" alt=""></p>
<p>配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_pass</span> http://192.168.20.1:8080; <span class="comment"># 应用服务器HTTP地址</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>既然服务器可以直接 HTTP 访问，为什么要在中间加上一个反向代理，不是多此一举吗？反向代理有什么作用？继续往下看，下面的负载均衡、虚拟主机，都基于反向代理实现，当然反向代理的功能也不仅仅是这些。</p>
<h3 id="3、负载均衡"><a href="#3、负载均衡" class="headerlink" title="3、负载均衡"></a>3、负载均衡</h3><p>当网站访问量非常大，网站站长开心赚钱的同时，也摊上事儿了。因为网站越来越慢，一台服务器已经不够用了。于是将相同的应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。同时带来的好处是，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。</p>
<p>当我们网站进行大的升级更新时，我们不可能直接将所有的服务器都关掉，然后再升级的。通常我们都是批量的关掉一些服务器，去升级网站，当有用户的请求时则分配给其他还在运作的机器处理。当之前关掉的机器更新完成后，再次开启，然后又批量关掉部分机器，如上循环，直到最后全部机器都更新完成。这样就不会影响用户使用。</p>
<p>Nginx 可以通过反向代理来实现负载均衡。</p>
<p><img src="http://7xidft.com1.z0.glb.clouddn.com/blog/20150517221003659.jpg" alt=""></p>
<p>配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">upstream</span> myapp &#123;</div><div class="line">	<span class="attribute">server</span> <span class="number">192.168.20.1:8080</span>; <span class="comment"># 应用服务器1</span></div><div class="line">	<span class="attribute">server</span> <span class="number">192.168.20.2:8080</span>; <span class="comment"># 应用服务器2</span></div><div class="line">&#125;</div><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_pass</span> http://myapp;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4、虚拟主机"><a href="#4、虚拟主机" class="headerlink" title="4、虚拟主机"></a>4、虚拟主机</h3><p>网站访问量大，需要负载均衡。然而并不是所有网站都如此出色，有的网站，由于访问量太小，需要节省成本，将多个网站部署在同一台服务器上。</p>
<p>例如将 www.aaa.com 和 www.bbb.com 两个网站部署在同一台服务器上，两个域名解析到同一个 IP 地址，但是用户通过两个域名却可以打开两个完全不同的网站，互相不影响，就像访问两个服务器一样，所以叫两个虚拟主机。</p>
<p>配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span> default_server;</div><div class="line">	<span class="attribute">server_name</span> _;</div><div class="line">	<span class="attribute">return</span> <span class="number">444</span>; <span class="comment"># 过滤其他域名的请求，返回444状态码</span></div><div class="line">&#125;</div><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">server_name</span> www.aaa.com; <span class="comment"># www.aaa.com域名</span></div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_pass</span> http://localhost:8080; <span class="comment"># 对应端口号8080</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">server_name</span> www.bbb.com; <span class="comment"># www.bbb.com域名</span></div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_pass</span> http://localhost:8081; <span class="comment"># 对应端口号8081</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在服务器 8080 和 8081 两个端口分别开了一个应用，客户端通过不同的域名访问，根据 server_name 可以反向代理到对应的应用服务器。</p>
<p>虚拟主机的原理是通过 HTTP 请求头中的 Host 是否匹配 server_name 来实现的，有兴趣的同学可以研究一下 HTTP 协议。</p>
<p>另外，server_name 配置还可以过滤有人恶意将某些域名指向你的主机服务器。</p>
<h3 id="5、FastCGI"><a href="#5、FastCGI" class="headerlink" title="5、FastCGI"></a>5、FastCGI</h3><p>Nginx 本身不支持 PHP 等语言，但是它可以通过 FastCGI 来将请求扔给某些语言或框架处理（例如 PHP、Python、Perl）。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</div><div class="line">		<span class="attribute">include</span> fastcgi_params;</div><div class="line">		<span class="attribute">fastcgi_param</span> SCRIPT_FILENAME /PHP文件路径<span class="variable">$fastcgi_script_name</span>; <span class="comment"># PHP文件路径</span></div><div class="line">		<span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>; <span class="comment"># PHP-FPM地址和端口号</span></div><div class="line">		<span class="comment"># 另一种方式：fastcgi_pass unix:/var/run/php5-fpm.sock;</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置中将 .php 结尾的请求通过 FashCGI 交给 PHP-FPM 处理，PHP-FPM 是 PHP 的一个 FastCGI 管理器。有关FashCGI 可以查阅其他资料，本文不再介绍。</p>
<p>fastcgi_pass 和 proxy_pass 有什么区别？下面一张图带你看明白：</p>
<p><img src="http://7xidft.com1.z0.glb.clouddn.com/blog/20150517221800380.jpg" alt=""></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="http://xxgblog.com/2015/05/17/nginx-start/" target="_blank" rel="external">Nginx基本功能极速入门</a></p>
<p>2、<a href="https://www.gitbook.com/book/skyao/leaning-nginx/details" target="_blank" rel="external">Nginx 学习笔记</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-Nginx？&quot;&gt;&lt;a href=&quot;#什么是-Nginx？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Nginx？&quot;&gt;&lt;/a&gt;什么是 Nginx？&lt;/h2&gt;&lt;p&gt;Nginx 是一个高性能的 HTTP 和反向代理服务器，以高稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。&lt;/p&gt;
&lt;h2 id=&quot;Nginx-特点&quot;&gt;&lt;a href=&quot;#Nginx-特点&quot; class=&quot;headerlink&quot; title=&quot;Nginx 特点&quot;&gt;&lt;/a&gt;Nginx 特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;处理静态文件，索引文件以及自动索引；打开文件描述符缓冲．&lt;/li&gt;
&lt;li&gt;无缓存的反向代理加速，简单的负载均衡和容错．&lt;/li&gt;
&lt;li&gt;FastCGI，简单的负载均衡和容错．&lt;/li&gt;
&lt;li&gt;模块化的结构。包括 gzipping, byte ranges, chunked responses,以及 SSI-filter 等 filter。如果由 FastCGI 或其它代理服务器处理单页中存在的多个 SSI，则这项处理可以并行运行，而不需要相互等待。&lt;/li&gt;
&lt;li&gt;支持 SSL 和 TLSSNI．&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>秋招第三站 —— 内推阿里（一面）</title>
    <link href="http://yoursite.com/2017/08/04/alibaba/"/>
    <id>http://yoursite.com/2017/08/04/alibaba/</id>
    <published>2017-08-04T03:36:52.742Z</published>
    <updated>2017-08-04T03:38:20.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3、阿里巴巴（菜鸟网络部门）（一面-49-分钟）"><a href="#3、阿里巴巴（菜鸟网络部门）（一面-49-分钟）" class="headerlink" title="3、阿里巴巴（菜鸟网络部门）（一面 49 分钟）"></a>3、阿里巴巴（菜鸟网络部门）（一面 49 分钟）</h3><p>2017.08.02   晚上9点21打电话过来，预约明天什么时候有空面试，约好第二天下午两点。</p>
<p>2017.08.03   下午两点10分打过来了。</p>
<p>说看了我的<a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">博客</a>和 <a href="https://github.com/zhisheng17" target="_blank" rel="external">GitHub</a>，觉得我学的还行，知识广度都还不错，但是还是要问问具体情况，为什么没看到你春招的记录，什么原因没投阿里？非得说一个原因，那就是：我自己太菜了，不敢投。<br><a id="more"></a><br>1、先自我介绍</p>
<p>2、什么是多态？哪里体现了多态的概念？</p>
<p>3、HashMap 源码分析，把里面的东西问了个遍？最后问是不是线程安全？引出 ConcurrentHashMap</p>
<p>4、ConcurrentHashMap 源码分析</p>
<p>5、类加载，双亲委托机制</p>
<p>6、Java内存模型（一开始说的不是他想要的，主要想问我堆和栈的细节）</p>
<p>7、垃圾回收算法</p>
<p>8、线程池，自己之前看过，所以说的比较多，最后面试官说了句：看你对线程池了解还是很深了</p>
<p>9、事务的四种特性</p>
<p>10、什么是死锁？</p>
<p>11、乐观锁和悲观锁的策略</p>
<p>12、高可用网站的设计（有什么技术实现）</p>
<p>13、低耦合高内聚</p>
<p>14、设计模式了解不？你用过哪几种，为什么用，单例模式帮我们做什么东西？有什么好处？</p>
<p>15、你参与什么项目中成长比较快？学到了什么东西，以前是没有学过的？</p>
<p>16、项目中遇到的最大困难是怎样的？是怎么解决的？</p>
<p>17、智力题（两根不均匀的香，点一头烧完要一个小时，怎么确定15分钟）</p>
<p>18、你有什么问题想要问我的？</p>
<p>19、问了菜鸟网络他们部门主要做什么？</p>
<p>20、对我这次面试做个评价：看了你<a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">博客</a>和 <a href="https://github.com/zhisheng17" target="_blank" rel="external">GitHub</a>，知道你对学习的热情还是很高的，花了不少功夫，但是有些东西还是需要加强深度，阿里需要那种对技术有深度，有自己独到见解的人才。意思就是 GG 了。</p>
<p><strong>总结</strong>：面试总的来说，第一次电话面试，感觉好紧张，好多问题自己会点，但是其中的细节没弄清楚，自己准备的也不够充分。面试官很友好，看到我紧张，也安慰我说不要紧，不管以后出去面试啥的，不需要紧张，公司问的问题可能很广，你只需要把你知道的说出来就行，不会的直接说不会就行。之前一直不敢投阿里，因为自己准备的完全不够充分，但是在朋友磊哥的帮助下，还是试了下，不管结果怎么样，经历过总比没有的好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;3、阿里巴巴（菜鸟网络部门）（一面-49-分钟）&quot;&gt;&lt;a href=&quot;#3、阿里巴巴（菜鸟网络部门）（一面-49-分钟）&quot; class=&quot;headerlink&quot; title=&quot;3、阿里巴巴（菜鸟网络部门）（一面 49 分钟）&quot;&gt;&lt;/a&gt;3、阿里巴巴（菜鸟网络部门）（一面 49 分钟）&lt;/h3&gt;&lt;p&gt;2017.08.02   晚上9点21打电话过来，预约明天什么时候有空面试，约好第二天下午两点。&lt;/p&gt;
&lt;p&gt;2017.08.03   下午两点10分打过来了。&lt;/p&gt;
&lt;p&gt;说看了我的&lt;a href=&quot;http://www.54tianzhisheng.cn/&quot;&gt;博客&lt;/a&gt;和 &lt;a href=&quot;https://github.com/zhisheng17&quot;&gt;GitHub&lt;/a&gt;，觉得我学的还行，知识广度都还不错，但是还是要问问具体情况，为什么没看到你春招的记录，什么原因没投阿里？非得说一个原因，那就是：我自己太菜了，不敢投。&lt;br&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>秋招第二站 —— 内推爱奇艺（一面二面）</title>
    <link href="http://yoursite.com/2017/08/04/iqiyi/"/>
    <id>http://yoursite.com/2017/08/04/iqiyi/</id>
    <published>2017-08-04T03:34:33.403Z</published>
    <updated>2017-08-04T04:34:52.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第-2-站-、爱奇艺-后端-Java-开发实习生"><a href="#第-2-站-、爱奇艺-后端-Java-开发实习生" class="headerlink" title="第 2 站 、爱奇艺   后端 Java 开发实习生"></a>第 2 站 、爱奇艺   后端 Java 开发实习生</h3><h4 id="笔试（半个小时）"><a href="#笔试（半个小时）" class="headerlink" title="笔试（半个小时）"></a>笔试（半个小时）</h4><p>题目：（记得一些）</p>
<p>1、重载重写的区别？</p>
<p>2、转发和重定向的区别？<br><a id="more"></a><br>3、画下 HashMap 的结构图？HashMap 、 HashTable 和 ConcurrentHashMap 的区别？</p>
<p>4、statement 和 preparedstatement 区别？</p>
<p>5、JSP 中一个 <c:value> 中取值与直接取值的区别？会有什么安全问题？</c:value></p>
<p>6、实现一个线程安全的单例模式</p>
<p>7、一个写 sql 语句的题目</p>
<p>8、自己实现一个 List，（主要实现 add等常用方法）</p>
<p>9、Spring 中 IOC 和 AOP 的理解？</p>
<p>10、两个对象的 hashcode 相同，是否对象相同？equal() 相同呢？</p>
<p>11、@RequestBody 和 @ResponseBody 区别？</p>
<p>12、JVM 一个错误，什么情况下会发生？</p>
<p>13、常用的 Linux 命令？</p>
<h4 id="第一轮面试（80-分钟）"><a href="#第一轮面试（80-分钟）" class="headerlink" title="第一轮面试（80 分钟）"></a>第一轮面试（80 分钟）</h4><p>1、自我介绍</p>
<p>2、介绍你最熟悉的一个项目</p>
<p>3、讲下这个 XSS 攻击</p>
<p>4、HashMap 的结构？HashMap 、 HashTable 和 ConcurrentHashMap 的区别？</p>
<p>5、HashMap 中怎么解决冲突的？（要我详细讲下）</p>
<p>6、ConcurrentHashMap 和 HashTable 中线程安全的区别？为啥建议用 ConcurrentHashMap ？能把 ConcurrentHashMap  里面的实现详细的讲下吗？</p>
<p>7、Session 和 Cookie 的区别？</p>
<p>8、你项目中登录是怎样做的，用的 Cookie 和 Session？</p>
<p>9、讲讲你对 Spring 中的 IOC 和 AOP 的理解？</p>
<p>10、问了好几个注解的作用？</p>
<p>11、statement 和 preparedstatement 区别？</p>
<p>12、$ 和 # 的区别？以及这两个在哪些地方用？</p>
<p>13、前面项目介绍了数据是爬虫爬取过来的，那你讲讲你的爬虫是多线程的吧？</p>
<p>14、讲讲 Python 中的多线程和 Java 中的多线程区别？</p>
<p>15、自己刚好前几天在看线程池，立马就把面试官带到我熟悉的线程池，和面试官讲了下 JDK 自带的四种线程池、ThreadPoolExecutor 类中的最重要的构造器里面的七个参数，然后再讲了下线程任务进入线程池和核心线程数、缓冲队列、最大线程数量比较。</p>
<p>16、线程同步，你了解哪几种方式？</p>
<p>17、讲下 Synchronized？</p>
<p>18、讲下 RecentLock 可重入锁？ 什么是可重入锁？为什么要设计可重入锁？</p>
<p>19、讲下 Volatile 吧？他是怎样做到同步的？</p>
<p>20、Volatile 为什么不支持原子性？举个例子</p>
<p>21、Atomic 怎么设计的？（没看过源码，当时回答错了，后来才发现里面全部用 final 修饰的属性和方法）</p>
<p>22、问几个前端的标签吧？（问了一个不会，直接说明我偏后端，前端只是了解，后面就不问了）</p>
<p>23、SpringBoot 的了解？</p>
<p>24、Linux 常用命令？</p>
<p>25、JVM 里的几个问题？</p>
<p>26、事务的特性？</p>
<p>27、隔离级别？</p>
<p>28、网络状态码？以 2、3、4、5 开头的代表什么意思。</p>
<p>29、并发和并行的区别？</p>
<p>30、你有什么问题想问我的？</p>
<p>一面面完后面试官和说这份试卷是用来考 1~3 年开发工作经验的，让我准备一下，接下来的二面。</p>
<h4 id="第二轮面试（半个小时）"><a href="#第二轮面试（半个小时）" class="headerlink" title="第二轮面试（半个小时）"></a>第二轮面试（半个小时）</h4><p>1、一上来就问怎么简历名字都没有，我指了简历第一行的我的名字，还特意大写了，然后就问学校是不是在上海，我回答在南昌（感觉被鄙视了一波，后面我在回答问题的时候面试官就一直在玩手机，估计后面对我的印象就不是很好了）</p>
<p>2、自我介绍</p>
<p>3、说一说数据库建表吧（从范式讲）</p>
<p>4、讲讲多态？（这个我答出来了，可是面试官竟然说不是这样吧，可能面试官没听请，后面还说我是不是平时写多态比较少，感觉这个也让面试官对我印象减分）</p>
<p>5、将两个数转换（不借助第三个参数）</p>
<p>6、手写个插入排序吧（写完了和面试官讲了下执行流程）</p>
<p>7、讲讲你对 Spring 中的 IOC 和 AOP 的理解？</p>
<p>8、问了几个常用的 Linux 命令？</p>
<p>9、也问到多线程？和一面一样把自己最近看的线程池也讲了一遍</p>
<p>10、学 Java 多久了？</p>
<p>11、你有什么想问的？</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>面试题目大概就是这么多了，有些问题自己也忘记了，面试题目顺序不一定是按照上面所写的。再次感谢爱奇艺的第一面面试官了，要不是他帮忙内推的，我可能还没有机会收到面试机会。自己接到爱奇艺面试邀请电话是星期一晚上快7点中的，之后加了面试官微信约好了星期四面试的（时间准备较短，之前没系统的复习过）。星期四一大早（5点就起床了），然后就收拾了下，去等公交车，转了两次车，然后再做地铁去爱奇艺公司的，总共路上花费时间四个多小时。总的来说，这次面试准备的时间不是很充裕，所以准备的个人觉得不是很好，通过这次的面试，发现面试还是比较注重基础和深度的，我也知道了自己的一些弱处，还需要在哪里加强，面试技巧上也要掌握些。为后面的其他公司继续做好充足的准备。加油！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第-2-站-、爱奇艺-后端-Java-开发实习生&quot;&gt;&lt;a href=&quot;#第-2-站-、爱奇艺-后端-Java-开发实习生&quot; class=&quot;headerlink&quot; title=&quot;第 2 站 、爱奇艺   后端 Java 开发实习生&quot;&gt;&lt;/a&gt;第 2 站 、爱奇艺   后端 Java 开发实习生&lt;/h3&gt;&lt;h4 id=&quot;笔试（半个小时）&quot;&gt;&lt;a href=&quot;#笔试（半个小时）&quot; class=&quot;headerlink&quot; title=&quot;笔试（半个小时）&quot;&gt;&lt;/a&gt;笔试（半个小时）&lt;/h4&gt;&lt;p&gt;题目：（记得一些）&lt;/p&gt;
&lt;p&gt;1、重载重写的区别？&lt;/p&gt;
&lt;p&gt;2、转发和重定向的区别？&lt;br&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>秋招第一站 —— 亚信科技</title>
    <link href="http://yoursite.com/2017/08/04/yaxin/"/>
    <id>http://yoursite.com/2017/08/04/yaxin/</id>
    <published>2017-08-04T03:30:50.681Z</published>
    <updated>2017-08-04T03:31:32.737Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第-1-站、亚信科技-Java-开发"><a href="#第-1-站、亚信科技-Java-开发" class="headerlink" title="第 1 站、亚信科技    Java 开发"></a>第 1 站、亚信科技    Java 开发</h3><p>1）自我介绍（说到一个亮点：长期坚持写博客，面试官觉得这个习惯很好，算加分项吧）</p>
<p>2）看到简历项目中用到 Solr，详细的问了下 Solr（自己介绍了下 Solr 的使用场景和建立索引等东西）<br><a id="more"></a><br>3）项目里面写了一个 “ 敏感词和 JS 标签过滤防 XSS 攻击”，面试官让我讲了下这个 XSS 攻击，并且是怎样实现的</p>
<p>4）项目里写了支持 Markdown，问是不是自己写的解析代码，（回答不是，自己引用的是 GitHub上的一个开源项目解析的）</p>
<p>5）想问我前端的知识，我回复到：自己偏后端开发，前端只是了解，然后面试官就不问了</p>
<p>6）问我考不考研？</p>
<p>7）觉得杭州怎么样？是打算就呆在杭州还是把杭州作为一个跳板？</p>
<p>8）有啥小目标？以后是打算继续技术方向，还是先技术后管理（还开玩笑的说：是不是赚他几个亿，当时我笑了笑）</p>
<p>9）有啥兴趣爱好？</p>
<p>大概就记得这么多了，目前已经拿到 Offer 了。</p>
<p><strong>总结</strong>：面试问的问题不算多，主要是通过简历上项目所涉及的东西提问的，如果自己不太会的切记不要写上去。面试主要考察你回答问题来判断你的逻辑是否很清楚。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第-1-站、亚信科技-Java-开发&quot;&gt;&lt;a href=&quot;#第-1-站、亚信科技-Java-开发&quot; class=&quot;headerlink&quot; title=&quot;第 1 站、亚信科技    Java 开发&quot;&gt;&lt;/a&gt;第 1 站、亚信科技    Java 开发&lt;/h3&gt;&lt;p&gt;1）自我介绍（说到一个亮点：长期坚持写博客，面试官觉得这个习惯很好，算加分项吧）&lt;/p&gt;
&lt;p&gt;2）看到简历项目中用到 Solr，详细的问了下 Solr（自己介绍了下 Solr 的使用场景和建立索引等东西）&lt;br&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程池艺术探索</title>
    <link href="http://yoursite.com/2017/07/29/ThreadPool/"/>
    <id>http://yoursite.com/2017/07/29/ThreadPool/</id>
    <published>2017-07-29T14:27:44.446Z</published>
    <updated>2017-07-29T14:45:24.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>Wiki 上是这样解释的：<a href="https://en.wikipedia.org/wiki/Thread_pool" target="_blank" rel="external">Thread Pool</a></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Thread_pool.svg/400px-Thread_pool.svg.png" alt=""></p>
<p>作用：<strong>利用线程池可以大大减少在创建和销毁线程上所花的时间以及系统资源的开销！</strong></p>
<p>下面主要讲下线程池中最重要的一个类 ThreadPoolExecutor 。<br><a id="more"></a></p>
<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p><img src="http://ohfk1r827.bkt.clouddn.com/ThreadPoolExecutor1.jpg" alt="ThreadPoolExecutor1"></p>
<p><strong>ThreadPoolExecutor 构造器：</strong></p>
<p>有四个构造器的，挑了参数最长的一个进行讲解。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/constructor.jpg" alt="constructor"></p>
<p><strong>七个参数：</strong></p>
<ul>
<li>corePoolSize：核心池的大小，在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</li>
<li>maximumPoolSize：线程池最大线程数；</li>
<li>keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止；</li>
<li>unit：参数keepAliveTime的时间单位（DAYS、HOURS、MINUTES、SECONDS 等）；</li>
<li>workQueue：阻塞队列，用来存储等待执行的任务；<ul>
<li>ArrayBlockingQueue （有界队列）</li>
<li>LinkedBlockingQueue  （无界队列）</li>
<li>SynchronousQueue</li>
</ul>
</li>
<li>threadFactory：线程工厂，主要用来创建线程</li>
<li><p>handler：拒绝处理任务的策略</p>
<ul>
<li>AbortPolicy：丢弃任务并抛出 RejectedExecutionException 异常。（默认这种）</li>
<li>DiscardPolicy：也是丢弃任务，但是不抛出异常</li>
<li>DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</li>
<li>CallerRunsPolicy：由调用线程处理该任务</li>
</ul>
<p><img src="http://ohfk1r827.bkt.clouddn.com/Rejected-method-Thread-Pool.jpg" alt="Rejected-method-Thread-Pool"></p>
</li>
</ul>
<p><strong>重要方法：</strong></p>
<ul>
<li>execute()：通过这个方法可以向线程池提交一个任务，交由线程池去执行；</li>
<li>shutdown()：关闭线程池；</li>
</ul>
<p><strong>execute() 方法：</strong></p>
<p>注：JDK 1.7 和 1.8 这个方法有点区别，下面代码是 1.8 中的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="keyword">int</span> c = ctl.get();</div><div class="line">  <span class="comment">//1、如果当前的线程数小于核心线程池的大小，根据现有的线程作为第一个 Worker 运行的线程，新建一个 Worker，addWorker 自动的检查当前线程池的状态和 Worker 的数量，防止线程池在不能添加线程的状态下添加线程</span></div><div class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</div><div class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            c = ctl.get();</div><div class="line">        &#125;</div><div class="line">   <span class="comment">//2、如果线程入队成功，然后还是要进行 double-check 的，因为线程在入队之后状态是可能会发生变化的</span></div><div class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</div><div class="line">            <span class="keyword">int</span> recheck = ctl.get();</div><div class="line">          <span class="comment">// recheck 防止线程池状态的突变，如果突变，那么将 reject 线程，防止 workQueue 中增加新线程</span></div><div class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</div><div class="line">                reject(command);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)<span class="comment">//上下两个操作都有 addWorker 的操作，但是如果在workQueue.offer 的时候 Worker 变为 0，那么将没有 Worker 执行新的 task，所以增加一个 Worker.</span></div><div class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">   <span class="comment">//3、如果 task 不能入队(队列满了)，这时候尝试增加一个新线程，如果增加失败那么当前的线程池状态变化了或者线程池已经满了然后拒绝task</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</div><div class="line">            reject(command);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其中调用了 addWorker() 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;<span class="comment">// firstTask: 新增一个线程并执行这个任务，可空，增加的线程从队列获取任务；core：是否使用 corePoolSize 作为上限，否则使用 maxmunPoolSize</span></div><div class="line">        retry:</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">int</span> c = ctl.get();</div><div class="line">            <span class="keyword">int</span> rs = runStateOf(c);</div><div class="line">            <span class="comment">// Check if queue empty only if necessary.</span></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * rs!=Shutdown || fistTask！=null || workQueue.isEmpty</div><div class="line">    * 如果当前的线程池的状态 &gt; SHUTDOWN 那么拒绝 Worker 的 add 如果 =SHUTDOWN</div><div class="line">    * 那么此时不能新加入不为 null 的 Task，如果在 workQueue 为 empty 的时候不能加入任何类型的 Worker，</div><div class="line">    * 如果不为 empty 可以加入 task 为 null 的 Worker, 增加消费的 Worker</div><div class="line">    */</div><div class="line">            <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; ! (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span> &amp;&amp;! workQueue.isEmpty()))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">int</span> wc = workerCountOf(c);</div><div class="line">          <span class="comment">//如果当前的数量超过了 CAPACITY，或者超过了 corePoolSize 和 maximumPoolSize（试 core 而定）</span></div><div class="line">                <span class="keyword">if</span> (wc &gt;= CAPACITY || wc &gt;= (core ? corePoolSize : maximumPoolSize))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">          <span class="comment">//CAS 尝试增加线程数，如果失败，证明有竞争，那么重新到 retry。</span></div><div class="line">                <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))<span class="comment">// AtomicInteger 的 CAS 操作;</span></div><div class="line">                    <span class="keyword">break</span> retry;</div><div class="line">                c = ctl.get();  <span class="comment">// Re-read ctl</span></div><div class="line">               <span class="comment">//判断当前线程池的运行状态,状态发生改变，重试 retry;</span></div><div class="line">                <span class="keyword">if</span> (runStateOf(c) != rs)</div><div class="line">                    <span class="keyword">continue</span> retry;</div><div class="line">                <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</div><div class="line">        Worker w = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            w = <span class="keyword">new</span> Worker(firstTask);<span class="comment">// Worker 为内部类，封装了线程和任务，通过 ThreadFactory 创建线程，可能失败抛异常或者返回 null</span></div><div class="line">            <span class="keyword">final</span> Thread t = w.thread;</div><div class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">                mainLock.lock();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// Recheck while holding lock.</span></div><div class="line">                    <span class="comment">// Back out on ThreadFactory failure or if</span></div><div class="line">                    <span class="comment">// shut down before lock acquired.</span></div><div class="line">                    <span class="keyword">int</span> rs = runStateOf(ctl.get());</div><div class="line">                    <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</div><div class="line">                        (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</div><div class="line">                        <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></div><div class="line">                         <span class="comment">// SHUTDOWN 以后的状态和 SHUTDOWN 状态下 firstTask 为 null，不可新增线程</span></div><div class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</div><div class="line">                        workers.add(w);</div><div class="line">                        <span class="keyword">int</span> s = workers.size();</div><div class="line">                        <span class="keyword">if</span> (s &gt; largestPoolSize)</div><div class="line">                            largestPoolSize = s;<span class="comment">//记录最大线程数</span></div><div class="line">                        workerAdded = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    mainLock.unlock();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (workerAdded) &#123;</div><div class="line">                    t.start();</div><div class="line">                    workerStarted = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (! workerStarted)</div><div class="line">                addWorkerFailed(w);<span class="comment">//失败回退,从 wokers 移除 w, 线程数减一，尝试结束线程池(调用tryTerminate 方法)</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> workerStarted;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>示意图：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/coreThreadPool.jpg" alt="coreThreadPool"></p>
<p><strong>执行流程：</strong></p>
<p>1、当有任务进入时，线程池创建线程去执行任务，直到核心线程数满为止</p>
<p>2、核心线程数量满了之后，任务就会进入一个缓冲的任务队列中</p>
<ul>
<li>当任务队列为无界队列时，任务就会一直放入缓冲的任务队列中，不会和最大线程数量进行比较</li>
<li>当任务队列为有界队列时，任务先放入缓冲的任务队列中，当任务队列满了之后，才会将任务放入线程池，此时会与线程池中最大的线程数量进行比较，如果超出了，则默认会抛出异常。然后线程池才会执行任务，当任务执行完，又会将缓冲队列中的任务放入线程池中，然后重复此操作。</li>
</ul>
<p><strong>shutdown() 方法：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">        mainLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//判断是否可以操作目标线程</span></div><div class="line">            checkShutdownAccess();</div><div class="line">            <span class="comment">//设置线程池状态为 SHUTDOWN, 此处之后，线程池中不会增加新 Task</span></div><div class="line">            advanceRunState(SHUTDOWN);</div><div class="line">            <span class="comment">//中断所有的空闲线程</span></div><div class="line">            interruptIdleWorkers();</div><div class="line">            onShutdown(); <span class="comment">// hook for ScheduledThreadPoolExecutor</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            mainLock.unlock();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//转到 Terminate</span></div><div class="line">        tryTerminate();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>参考资料：<a href="http://www.jianshu.com/p/ade771d2c9c0" target="_blank" rel="external">深入理解java线程池—ThreadPoolExecutor</a></p>
<h2 id="JDK-自带四种线程池分析与比较"><a href="#JDK-自带四种线程池分析与比较" class="headerlink" title="JDK 自带四种线程池分析与比较"></a>JDK 自带四种线程池分析与比较</h2><p><img src="http://ohfk1r827.bkt.clouddn.com/four-Thread-Pool.jpg" alt="four-Thread-Pool"></p>
<h3 id="1、newFixedThreadPool"><a href="#1、newFixedThreadPool" class="headerlink" title="1、newFixedThreadPool"></a>1、newFixedThreadPool</h3><p>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/newFixedThreadPool.jpg" alt="newFixedThreadPool"></p>
<h3 id="2、newSingleThreadExecutor"><a href="#2、newSingleThreadExecutor" class="headerlink" title="2、newSingleThreadExecutor"></a>2、newSingleThreadExecutor</h3><p>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。<img src="http://ohfk1r827.bkt.clouddn.com/newSingleThreadExecutor.jpg" alt="newSingleThreadExecutor"></p>
<h3 id="3、newCachedThreadPool"><a href="#3、newCachedThreadPool" class="headerlink" title="3、newCachedThreadPool"></a>3、newCachedThreadPool</h3><p>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/newCachedThreadPool.jpg" alt="newCachedThreadPool"></p>
<h3 id="4、newScheduledThreadPool"><a href="#4、newScheduledThreadPool" class="headerlink" title="4、newScheduledThreadPool"></a>4、newScheduledThreadPool</h3><p>创建一个定长线程池，支持定时及周期性任务执行。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/newScheduledThreadPool.jpg" alt="newScheduledThreadPool"></p>
<p>四种线程池其实内部方法都是调用的 ThreadPoolExecutor 类，只不过利用了其不同的构造器方法而已（传入自己需要传入的参数），那么利用这个特性，我们自己也是可以实现自己定义的线程池的。</p>
<h2 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h2><p>1、创建任务类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zhisheng.thread.threadpool.demo;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 10412 on 2017/7/24.</div><div class="line"> * 任务</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> taskId;     <span class="comment">//任务 id</span></div><div class="line">    <span class="keyword">private</span> String taskName;    <span class="comment">//任务名字</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTaskId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> taskId;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTaskId</span><span class="params">(<span class="keyword">int</span> taskId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.taskId = taskId;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTaskName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> taskName;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTaskName</span><span class="params">(String taskName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.taskName = taskName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span> taskId, String taskName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.taskId = taskId;</div><div class="line">        <span class="keyword">this</span>.taskName = taskName;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"当前正在执行 ******   线程Id--&gt;"</span> + taskId + <span class="string">",任务名称--&gt;"</span> + taskName);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.currentThread().sleep(<span class="number">5</span> * <span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"线程Id--&gt;"</span> + taskId + <span class="string">",任务名称--&gt;"</span> + taskName + <span class="string">"   -----------   执行完毕！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、自定义拒绝策略，实现 RejectedExecutionHandler 接口，重写 rejectedExecution 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zhisheng.thread.threadpool.demo;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.RejectedExecutionHandler;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 10412 on 2017/7/24.</div><div class="line"> * 自定义拒绝策略，实现 RejectedExecutionHandler 接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RejectedThreadPoolHandler</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RejectedThreadPoolHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"WARNING 自定义拒绝策略: Task "</span> + r.toString() + <span class="string">" rejected from "</span> + executor.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、创建线程池</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zhisheng.thread.threadpool.demo;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 10412 on 2017/7/24.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//核心线程数量为 2，最大线程数量 4，空闲线程存活的时间 60s，有界队列长度为 3,</span></div><div class="line">        <span class="comment">//ThreadPoolExecutor pool = new ThreadPoolExecutor(2, 4, 60, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;&gt;(3));</span></div><div class="line"></div><div class="line">        <span class="comment">//核心线程数量为 2，最大线程数量 4，空闲线程存活的时间 60s， 无界队列,</span></div><div class="line">        <span class="comment">//ThreadPoolExecutor pool = new ThreadPoolExecutor(2, 4, 60L, TimeUnit.SECONDS, new LinkedBlockingDeque&lt;&gt;());</span></div><div class="line"></div><div class="line">        <span class="comment">//核心线程数量为 2，最大线程数量 4，空闲线程存活的时间 60s，有界队列长度为 3, 使用自定义拒绝策略</span></div><div class="line">        ThreadPoolExecutor pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">4</span>, <span class="number">60</span>, TimeUnit.SECONDS,</div><div class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">3</span>), <span class="keyword">new</span> RejectedThreadPoolHandler());</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="comment">//创建 10 个任务</span></div><div class="line">            MyTask task = <span class="keyword">new</span> MyTask(i, <span class="string">"任务"</span> + i);</div><div class="line">            <span class="comment">//运行</span></div><div class="line">            pool.execute(task);</div><div class="line">            System.out.println(<span class="string">"活跃的线程数："</span>+pool.getActiveCount() + <span class="string">",核心线程数："</span> + pool.getCorePoolSize() + <span class="string">",线程池大小："</span> + pool.getPoolSize() + <span class="string">",队列的大小"</span> + pool.getQueue().size());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//关闭线程池</span></div><div class="line">        pool.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里运行结果就不截图了，我在本地测试了代码是没问题的，感兴趣的建议还是自己跑一下，然后分析下结果是不是和前面分析的一样，如有问题，请在我<a href="http://www.54tianzhisheng.cn/2017/07/29/ThreadPool/" target="_blank" rel="external">博客</a>下面评论！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文一开始讲了线程池的介绍和好处，然后分析了线程池中最核心的 ThreadPoolExecutor 类中构造器的七个参数的作用、类中两个重要的方法，然后在对比研究了下 JDK 中自带的四种线程池的用法和内部代码细节，最后写了一个自定义的线程池。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线程池&quot;&gt;&lt;a href=&quot;#线程池&quot; class=&quot;headerlink&quot; title=&quot;线程池&quot;&gt;&lt;/a&gt;线程池&lt;/h2&gt;&lt;p&gt;Wiki 上是这样解释的：&lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_pool&quot;&gt;Thread Pool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Thread_pool.svg/400px-Thread_pool.svg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作用：&lt;strong&gt;利用线程池可以大大减少在创建和销毁线程上所花的时间以及系统资源的开销！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面主要讲下线程池中最重要的一个类 ThreadPoolExecutor 。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>看透 Spring MVC 源代码分析与实践 ——  Spring MVC 组件分析</title>
    <link href="http://yoursite.com/2017/07/21/Spring-MVC03/"/>
    <id>http://yoursite.com/2017/07/21/Spring-MVC03/</id>
    <published>2017-07-21T02:34:05.009Z</published>
    <updated>2017-07-21T02:49:06.077Z</updated>
    
    <content type="html"><![CDATA[<p>由于星期一接到面试通知，和面试官约好了星期四面试，所以这几天没更新完这系列的文章，面完试后立马就把这个解决掉。通过这次面试，也让我懂得了很多，知道了自己的一些不足之处，后面还要继续下功夫好好的深入复习下去。这几篇文章写的我觉得还是不够仔细，感兴趣的还是建议自己去看看源码。</p>
<h3 id="第-11-章-——-组件概览"><a href="#第-11-章-——-组件概览" class="headerlink" title="第 11 章  ——  组件概览"></a>第 11 章  ——  组件概览</h3><p><strong>HandlerMapping</strong></p>
<p>根据 request 找到对应的处理器 Handler 和 Interceptors。内部只有一个方法<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>;</div></pre></td></tr></table></figure></p>
<p><strong>HandlerAdapter</strong></p>
<p>Handler 适配器，内部方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span></span>;<span class="comment">//判断是否可以使用某个 Handler</span></div><div class="line"><span class="function">ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception</span>; <span class="comment">//具体使用</span></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest request, Object handler)</span></span>;<span class="comment">//获取资源上一次修改的时间</span></div></pre></td></tr></table></figure>
<p><strong>HandlerExceptionResolver</strong></p>
<p>根据异常设置 ModelAndView ，再交给 render 方法进行渲染。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">ModelAndView <span class="title">resolveException</span><span class="params">(</span></span></div><div class="line">			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)</div></pre></td></tr></table></figure>
<p><strong>ViewResolver</strong></p>
<p>用来将 String 类型的视图名和 Locale 解析为 View 类型的视图。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception</span>;</div></pre></td></tr></table></figure>
<p>它的一个实现类 BeanNameViewResolver，它重写 resolveViewName 方法如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		ApplicationContext context = getApplicationContext();</div><div class="line">		<span class="comment">//如果应用上下文没有找到视图，返回 null</span></div><div class="line">		<span class="keyword">if</span> (!context.containsBean(viewName)) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"No matching bean found for view name '"</span> + viewName + <span class="string">"'"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// Allow for ViewResolver chaining...</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//如果找到的视图类型不匹配，也返回 null</span></div><div class="line">		<span class="keyword">if</span> (!context.isTypeMatch(viewName, View.class)) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Found matching bean for view name '"</span> + viewName +</div><div class="line">						<span class="string">"' - to be ignored since it does not implement View"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// Since we're looking into the general ApplicationContext here,</span></div><div class="line">			<span class="comment">// let's accept this as a non-match and allow for chaining as well...</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//根据视图名称从 Spring 容器中查找 Bean，返回找到的 bean</span></div><div class="line">		<span class="keyword">return</span> context.getBean(viewName, View.class);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>RequestToViewNameTranslator</strong></p>
<p>获取 request 中的视图名。接口里面也是只有一个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">getViewName</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>; <span class="comment">//根据 request 查找视图名</span></div></pre></td></tr></table></figure>
<p><strong>LocaleResolver</strong></p>
<p>用于从 request 解析出 Locale。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LocaleResolver</span> </span>&#123;</div><div class="line">  	<span class="comment">//从 request 解析出 Locale</span></div><div class="line">	<span class="function">Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span></span>;</div><div class="line">  	<span class="comment">//根据 request 设置  locale</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, @Nullable Locale locale)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>ThemeResolver</strong></p>
<p>解析主题</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThemeResolver</span> </span>&#123;</div><div class="line">	<span class="comment">//通过给定的 request 查找主题名</span></div><div class="line">	<span class="function">String <span class="title">resolveThemeName</span><span class="params">(HttpServletRequest request)</span></span>;</div><div class="line">	<span class="comment">//根据给定的 request 设置主题名</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setThemeName</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String themeName)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 RequestContext.java 文件中可以获取主题：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getThemeMessage</span><span class="params">(String code, String defaultMessage)</span> </span>&#123;</div><div class="line">		<span class="comment">//获取主题的信息</span></div><div class="line">		<span class="keyword">return</span> getTheme().getMessageSource().getMessage(code, <span class="keyword">null</span>, defaultMessage, <span class="keyword">this</span>.locale);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Theme <span class="title">getTheme</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//判断主题是否为空</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.theme == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">// 通过 RequestContextUtils 获取 request 中的主题名</span></div><div class="line">			<span class="keyword">this</span>.theme = RequestContextUtils.getTheme(<span class="keyword">this</span>.request);</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.theme == <span class="keyword">null</span>) &#123;	<span class="comment">//如果还是为空的话</span></div><div class="line">				<span class="comment">//那就是没有有效的主题解析器和主题</span></div><div class="line">				<span class="keyword">this</span>.theme = getFallbackTheme();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.theme;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>RequestContextUtils.getTheme() 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Theme <span class="title">getTheme</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">		ThemeResolver themeResolver = getThemeResolver(request);</div><div class="line">		ThemeSource themeSource = getThemeSource(request);</div><div class="line">		<span class="keyword">if</span> (themeResolver != <span class="keyword">null</span> &amp;&amp; themeSource != <span class="keyword">null</span>) &#123;</div><div class="line">			String themeName = themeResolver.resolveThemeName(request);</div><div class="line">			<span class="keyword">return</span> themeSource.getTheme(themeName);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>MultipartResolver</strong></p>
<p>用于处理上传请求，处理方法：将普通的 request 包装成 MultipartHttpServletRequest</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MultipartResolver</span> </span>&#123;</div><div class="line">	<span class="comment">//根据 request 判断是否是上传请求</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isMultipart</span><span class="params">(HttpServletRequest request)</span></span>;</div><div class="line">	<span class="comment">//将 request 包装成 MultipartHttpServletRequest</span></div><div class="line">	<span class="function">MultipartHttpServletRequest <span class="title">resolveMultipart</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> MultipartException</span>;</div><div class="line">	<span class="comment">//清理上传过程中产生的临时资源</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">cleanupMultipart</span><span class="params">(MultipartHttpServletRequest request)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>FlashMapManager</strong></p>
<p>FlashMap 主要在 redirect 中传递参数，FlashMapManager 用来管理  FlashMap 的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlashMapManager</span> </span>&#123;</div><div class="line">	<span class="comment">//恢复参数，并将恢复过的和超时的参数从保存介质中删除</span></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function">FlashMap <span class="title">retrieveAndUpdate</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>;</div><div class="line">	<span class="comment">//将参数保存起来</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveOutputFlashMap</span><span class="params">(FlashMap flashMap, HttpServletRequest request, HttpServletResponse response)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>介绍 Spring MVC 中九大组件的接口、作用、内部方法实现及作用进行了简单的介绍，详细的还需大家自己去看源码。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h3 id="Spring-MVC-原理总结"><a href="#Spring-MVC-原理总结" class="headerlink" title="Spring MVC 原理总结"></a>Spring MVC 原理总结</h3><p>本质是一个 Servlet，这个 Servlet 继承自 HttpServlet。Spring MVC 中提供了三个层次的 Servlet：HttpServletBean、FrameworkServlet 和 DispatcherServlet。他们相互继承， HttpServletBean 直接继承自 Java 的 HttpServlet。HttpServletBean 用于将 Servlet 中的 Servlet 中配置的参数设置到相应的属性中，FrameworkServlet 初始化了 Spring MVC 中所使用的 WebApplicationContext，具体处理请求的 9 大组件是在 DispatcherServlet 中初始化的，整个继承图如下：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/spring-mvc1.jpg" alt="spring-mvc1"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>文章可转发，但请注明原创地址，谢谢支持。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于星期一接到面试通知，和面试官约好了星期四面试，所以这几天没更新完这系列的文章，面完试后立马就把这个解决掉。通过这次面试，也让我懂得了很多，知道了自己的一些不足之处，后面还要继续下功夫好好的深入复习下去。这几篇文章写的我觉得还是不够仔细，感兴趣的还是建议自己去看看源码。&lt;/p&gt;
&lt;h3 id=&quot;第-11-章-——-组件概览&quot;&gt;&lt;a href=&quot;#第-11-章-——-组件概览&quot; class=&quot;headerlink&quot; title=&quot;第 11 章  ——  组件概览&quot;&gt;&lt;/a&gt;第 11 章  ——  组件概览&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;HandlerMapping&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据 request 找到对应的处理器 Handler 和 Interceptors。内部只有一个方法&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring MVC" scheme="http://yoursite.com/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>看透 Spring MVC 源代码分析与实践 ——  俯视 Spring MVC</title>
    <link href="http://yoursite.com/2017/07/14/Spring-MVC02/"/>
    <id>http://yoursite.com/2017/07/14/Spring-MVC02/</id>
    <published>2017-07-14T11:15:25.357Z</published>
    <updated>2017-07-14T11:25:37.314Z</updated>
    
    <content type="html"><![CDATA[<p>Spring MVC</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/spring-mvc.png" alt="spring-mvc"><br><a id="more"></a></p>
<h3 id="Spring-MVC-之初体验"><a href="#Spring-MVC-之初体验" class="headerlink" title="Spring MVC 之初体验"></a>Spring MVC 之初体验</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>在 IDEA 中新建一个 web 项目，用 Maven 管理项目的话，在 pom.xml 中加入 Spring MVC 和 Servlet 依赖即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Spring-MVC-简单配置"><a href="#Spring-MVC-简单配置" class="headerlink" title="Spring MVC 简单配置"></a>Spring MVC 简单配置</h4><ul>
<li>在 web.xml 中配置 Servlet</li>
<li>创建 Spring MVC 的 xml 配置文件</li>
<li>创建 Controller 和 View</li>
</ul>
<p>1、web.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring MVC配置 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- ====================================== --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 可以自定义servlet.xml配置文件的位置和名称，默认为WEB-INF目录下，名称为[&lt;servlet-name&gt;]-servlet.xml，如spring-servlet.xml</span></div><div class="line">    &lt;init-param&gt;</div><div class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">        &lt;param-value&gt;/WEB-INF/spring-servlet.xml&lt;/param-value&gt;&amp;nbsp; 默认</div><div class="line">    &lt;/init-param&gt;</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Spring配置 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- ====================================== --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">listenerclass</span>&gt;</span></div><div class="line">     org.springframework.web.context.ContextLoaderListener</div><div class="line">   <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 指定Spring Bean的配置文件所在目录。默认配置在WEB-INF目录下 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、spring-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></div><div class="line">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</div><div class="line">       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</div><div class="line">       http://www.springframework.org/schema/context &lt;a href="<span class="attr">http:</span>//<span class="attr">www.springframework.org</span>/<span class="attr">schema</span>/<span class="attr">context</span>/<span class="attr">spring-context-3.0.xsd</span>"&gt;http://www.springframework.org/schema/context/spring-context-3.0.xsd<span class="tag">&lt;/<span class="name">a</span>&gt;</span>"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 启用spring mvc 注解 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 设置使用注解的类所在的jar包 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 完成请求和注解POJO的映射 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span> /&gt;</span></div><div class="line">　　</div><div class="line">    <span class="comment">&lt;!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">p:prefix</span>=<span class="string">"/jsp/"</span> <span class="attr">p:suffix</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3、Controller</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"></div><div class="line"><span class="keyword">import</span> entity.User;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span>  <span class="comment">//类似Struts的Action</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/login.do"</span>)  <span class="comment">// 请求url地址映射，类似Struts的action-mapping</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testLogin</span><span class="params">(@RequestParam(value=<span class="string">"username"</span>)</span>String username, String password, HttpServletRequest request) </span>&#123;</div><div class="line">        <span class="comment">// @RequestParam是指请求url地址映射中必须含有的参数(除非属性 required=false, 默认为 true)</span></div><div class="line">        <span class="comment">// @RequestParam可简写为：@RequestParam("username")</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!<span class="string">"admin"</span>.equals(username) || !<span class="string">"admin"</span>.equals(password)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"loginError"</span>; <span class="comment">// 跳转页面路径（默认为转发），该路径不需要包含spring-servlet配置文件中配置的前缀和后缀</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">"loginSuccess"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/login2.do"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testLogin2</span><span class="params">(String username, String password, <span class="keyword">int</span> age)</span></span>&#123;</div><div class="line">        <span class="comment">// request和response不必非要出现在方法中，如果用不上的话可以去掉</span></div><div class="line">        <span class="comment">// 参数的名称是与页面控件的name相匹配，参数类型会自动被转换</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!<span class="string">"admin"</span>.equals(username) || !<span class="string">"admin"</span>.equals(password) || age &lt; <span class="number">5</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"loginError"</span>); <span class="comment">// 手动实例化ModelAndView完成跳转页面（转发），效果等同于上面的方法返回字符串</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> RedirectView(<span class="string">"../index.jsp"</span>));  <span class="comment">// 采用重定向方式跳转页面</span></div><div class="line">        <span class="comment">// 重定向还有一种简单写法</span></div><div class="line">        <span class="comment">// return new ModelAndView("redirect:../index.jsp");</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/login3.do"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testLogin3</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        <span class="comment">// 同样支持参数为表单对象，类似于Struts的ActionForm，User不需要任何配置，直接写即可</span></div><div class="line">        String username = user.getUsername();</div><div class="line">        String password = user.getPassword();</div><div class="line">        <span class="keyword">int</span> age = user.getAge();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!<span class="string">"admin"</span>.equals(username) || !<span class="string">"admin"</span>.equals(password) || age &lt; <span class="number">5</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"loginError"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"loginSuccess"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span>(name = <span class="string">"loginService"</span>)  <span class="comment">// 获取applicationContext.xml中bean的id为loginService的，并注入</span></div><div class="line">    <span class="keyword">private</span> LoginService loginService;  <span class="comment">//等价于spring传统注入方式写get和set方法，这样的好处是简洁工整，省去了不必要得代码</span></div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/login4.do"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testLogin4</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (loginService.login(user) == <span class="keyword">false</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"loginError"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">"loginSuccess"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@RequestMapping 可以写在方法上，也可以写在类上，上面代码方法上的 RequestMapping 都含有 <code>/test</code> ， 那么我们就可以将其抽出直接写在类上，那么方法里面就不需要写 <code>/test</code> 了。</p>
<p>如下即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login.do"</span>)  <span class="comment">// 请求url地址映射，类似Struts的action-mapping</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testLogin</span><span class="params">(@RequestParam(value=<span class="string">"username"</span>)</span>String username, String password, HttpServletRequest request) </span>&#123;</div><div class="line">        <span class="comment">// @RequestParam是指请求url地址映射中必须含有的参数(除非属性 required=false, 默认为 true)</span></div><div class="line">        <span class="comment">// @RequestParam可简写为：@RequestParam("username")</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!<span class="string">"admin"</span>.equals(username) || !<span class="string">"admin"</span>.equals(password)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"loginError"</span>; <span class="comment">// 跳转页面路径（默认为转发），该路径不需要包含spring-servlet配置文件中配置的前缀和后缀</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">"loginSuccess"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//省略其他的</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码方法的参数中可以看到有一个 <code>@RequestParam</code> 注解，其实还有 <code>@PathVariable</code> 。这两个的区别是啥呢？</p>
<ul>
<li><code>@PathVariable</code> 标记在方法的参数上，利用它标记的参数可以利用请求路径传值。</li>
<li>@RequestParam是指请求url地址映射中必须含有的参数(除非属性 required=false, 默认为 true)</li>
</ul>
<p>看如下例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/&#123;userId&#125;"</span>)  <span class="comment">// 请求url地址映射</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">userinfo</span><span class="params">(Model model, @PathVariable(<span class="string">"userId"</span>)</span> <span class="keyword">int</span> userId,  HttpSession session) </span>&#123;</div><div class="line">         System.out.println(<span class="string">"进入  userinfo  页面"</span>);</div><div class="line">        <span class="comment">//判断是否有用户登录</span></div><div class="line">        User user1 = (User) session.getAttribute(<span class="string">"user"</span>);</div><div class="line">        <span class="keyword">if</span> (user1 == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</div><div class="line">        &#125;</div><div class="line">        User user = userService.selectUserById(userId);</div><div class="line">        model.addAttribute(<span class="string">"user"</span>, user);</div><div class="line">        <span class="keyword">return</span> <span class="string">"userinfo"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面例子中如果浏览器请求的是 <code>/user/1</code>  的时候，就表示此时的用户 id 为 1，此时就会先从 session 中查找是否有 “user” 属性，如果有的话，就代表用户此时处于登录的状态，如果没有的话，就会让用户返回到登录页面，这种机制在各种网站经常会使用的，然后根据这个 id = 1 ，去查找用户的信息，然后把查找的 “user” 放在 model 中，然后返回用户详情页面，最后在页面中用 <code>$!{user.name}</code> 获取用户的名字，同样的方式可以获取用户的其他信息，把所有的用户详情信息展示出来。</p>
<h3 id="创建-Spring-MVC-之器"><a href="#创建-Spring-MVC-之器" class="headerlink" title="创建 Spring MVC 之器"></a>创建 Spring MVC 之器</h3><p>Spring MVC 核心 Servlet 架构图如下：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/spring-mvc1.jpg" alt="spring-mvc1"></p>
<p>Java 中常用的 Servlet 我在另外一篇文章写的很清楚了，有兴趣的请看：<a href="http://www.54tianzhisheng.cn/2017/07/09/servlet/" target="_blank" rel="external">通过源码详解 Servlet</a>  ，这里我就不再解释了。</p>
<p>这里主要讲 Spring 中的 HttpServletBean、FrameworkServlet、DispatcherServlet 这三个类的创建过程。</p>
<p>通过上面的图，可以看到这三个类直接实现三个接口：EnvironmentCapable、EnvironmentAware、ApplicationContextAware。下面我们直接看下这三个接口的内部是怎样写的。</p>
<p>EnvironmentCapable.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EnvironmentCapable</span> </span>&#123;</div><div class="line">    <span class="comment">//返回组件的环境，可能返回 null 或者默认环境</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function">Environment <span class="title">getEnvironment</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>EnvironmentAware.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EnvironmentAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</div><div class="line">    <span class="comment">//设置组件的运行环境</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ApplicationContextAware.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface ApplicationContextAware extends Aware &#123;</div><div class="line">    //设置运行对象的应用上下文</div><div class="line">    //当类实现这个接口后，这个类可以获取ApplicationContext中所有的bean，也就是说这个类可以直接获取Spring配置文件中所有有引用到的bean对象</div><div class="line">    void setApplicationContext(ApplicationContext applicationContext) throws BeansException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>怎么使用这个这个接口呢？</p>
<p>参考文章：<a href="http://blog.csdn.net/kaiwii/article/details/6872642" target="_blank" rel="external">org.springframework.context.ApplicationContextAware使用理解</a></p>
<p><strong>HttpServletBean</strong></p>
<p>这里就直接看其中最重要的 init() 方法的代码了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将配置参数映射到此servlet的bean属性，并调用子类初始化。</div><div class="line"> *  如果 bean 配置不合法（或者需要的参数丢失）或者子类初始化发生错误，那么就会抛出 ServletException 异常</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">   <span class="comment">//日志代码删除了</span></div><div class="line"></div><div class="line">   <span class="comment">// 从init参数设置bean属性。</span></div><div class="line">   <span class="comment">//获得web.xml中的contextConfigLocation配置属性，就是spring MVC的配置文件</span></div><div class="line">   PropertyValues pvs = <span class="keyword">new</span> ServletConfigPropertyValues(getServletConfig(), <span class="keyword">this</span>.requiredProperties);</div><div class="line">   <span class="keyword">if</span> (!pvs.isEmpty()) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">         BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class="keyword">this</span>);</div><div class="line">         <span class="comment">//获取服务器的各种信息</span></div><div class="line">         ResourceLoader resourceLoader = <span class="keyword">new</span> ServletContextResourceLoader(getServletContext());</div><div class="line">         bw.registerCustomEditor(Resource.class, <span class="keyword">new</span> ResourceEditor(resourceLoader, getEnvironment()));</div><div class="line">         <span class="comment">//模板方法，可以在子类中调用，做一些初始化工作，bw代表DispatcherServelt</span></div><div class="line">         initBeanWrapper(bw);</div><div class="line">         <span class="comment">//将配置的初始化值设置到DispatcherServlet中</span></div><div class="line">         bw.setPropertyValues(pvs, <span class="keyword">true</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">         <span class="comment">//日志代码</span></div><div class="line">         <span class="keyword">throw</span> ex;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// Let subclasses do whatever initialization they like.</span></div><div class="line">   <span class="comment">//模板方法，子类初始化的入口方法</span></div><div class="line">   initServletBean();</div><div class="line"></div><div class="line">   <span class="comment">//日志代码删除了</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>FrameworkServlet</strong></p>
<p>其中重要方法如下：里面也就两句关键代码，日志代码我直接删掉了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        <span class="comment">//日志代码删除了</span></div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">        <span class="comment">//就是 try 语句里面有两句关键代码</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//初始化 webApplicationContext</span></div><div class="line">            <span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</div><div class="line">            <span class="comment">//模板方法，</span></div><div class="line">            initFrameworkServlet();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (ServletException ex) &#123;</div><div class="line">            <span class="keyword">this</span>.logger.error(<span class="string">"Context initialization failed"</span>, ex);</div><div class="line">            <span class="keyword">throw</span> ex;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">            <span class="keyword">this</span>.logger.error(<span class="string">"Context initialization failed"</span>, ex);</div><div class="line">            <span class="keyword">throw</span> ex;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//日志代码删除了</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>再来看看上面代码中调用的 initWebApplicationContext() 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//获取 rootContext</span></div><div class="line">        WebApplicationContext rootContext =</div><div class="line">                WebApplicationContextUtils.getWebApplicationContext(getServletContext());</div><div class="line">        WebApplicationContext wac = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationContext != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 上下文实例在构造时注入 - &gt;使用它</span></div><div class="line">            wac = <span class="keyword">this</span>.webApplicationContext;</div><div class="line">            <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</div><div class="line">                ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</div><div class="line">                <span class="keyword">if</span> (!cwac.isActive()) &#123;</div><div class="line">                <span class="comment">// 如果上下文尚未刷新 -&gt; 提供诸如设置父上下文，设置应用程序上下文ID等服务</span></div><div class="line">                    <span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 上下文实例被注入没有显式的父类 -&gt; 将根应用程序上下文（如果有的话可能为null）设置为父级</span></div><div class="line">                        cwac.setParent(rootContext);</div><div class="line">                    &#125;</div><div class="line">                    configureAndRefreshWebApplicationContext(cwac);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">// 当 WebApplicationContext 已经存在 ServletContext 中时，通过配置在 servlet 中的 ContextAttribute 参数获取</span></div><div class="line">            wac = findWebApplicationContext();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 如果 WebApplicationContext 还没有创建，则创建一个</span></div><div class="line">            wac = createWebApplicationContext(rootContext);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.refreshEventReceived) &#123;</div><div class="line">            <span class="comment">// 当 ContextRefreshedEvent 事件没有触发时调用此方法，模板方法，可以在子类重写</span></div><div class="line">            onRefresh(wac);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.publishContext) &#123;</div><div class="line">            <span class="comment">// 将 ApplicationContext 保存到 ServletContext 中去</span></div><div class="line">            String attrName = getServletContextAttributeName();</div><div class="line">            getServletContext().setAttribute(attrName, wac);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</div><div class="line">                <span class="keyword">this</span>.logger.debug(<span class="string">"Published WebApplicationContext of servlet '"</span> + getServletName() +</div><div class="line">                        <span class="string">"' as ServletContext attribute with name ["</span> + attrName + <span class="string">"]"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> wac;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>initWebApplicationContext 方法做了三件事：</p>
<ul>
<li>获取 Spring 的根容器 rootContext</li>
<li>设置 webApplicationContext 并根据情况调用 onRefresh 方法</li>
<li>将 webApplicationContext 设置到 ServletContext 中</li>
</ul>
<p>这里在讲讲上面代码中的 wac == null 的几种情况：</p>
<p>1）、当 WebApplicationContext 已经存在 ServletContext 中时，通过配置在 servlet 中的 ContextAttribute 参数获取，调用的是 findWebApplicationContext() 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">findWebApplicationContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        String attrName = getContextAttribute();</div><div class="line">        <span class="keyword">if</span> (attrName == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        WebApplicationContext wac =</div><div class="line">                WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName);</div><div class="line">        <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No WebApplicationContext found: initializer not registered?"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> wac;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>2)、如果 WebApplicationContext 还没有创建，调用的是 createWebApplicationContext 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createWebApplicationContext</span><span class="params">(@Nullable ApplicationContext parent)</span> </span>&#123;</div><div class="line">        <span class="comment">//获取创建类型</span></div><div class="line">        Class&lt;?&gt; contextClass = getContextClass();</div><div class="line">        <span class="comment">//删除了打印日志代码</span></div><div class="line"></div><div class="line">        <span class="comment">//检查创建类型</span></div><div class="line">        <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</div><div class="line">                    <span class="string">"Fatal initialization error in servlet with name '"</span> + getServletName() +</div><div class="line">                    <span class="string">"': custom WebApplicationContext class ["</span> + contextClass.getName() +</div><div class="line">                    <span class="string">"] is not of type ConfigurableWebApplicationContext"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//具体创建</span></div><div class="line">        ConfigurableWebApplicationContext wac =</div><div class="line">                (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</div><div class="line"></div><div class="line">        wac.setEnvironment(getEnvironment());</div><div class="line">        wac.setParent(parent);</div><div class="line">  <span class="comment">//并设置的 contextConfigLocation 参数传给 wac，默认是 WEB-INFO/[ServletName]-Servlet.xml</span></div><div class="line">        wac.setConfigLocation(getContextConfigLocation());</div><div class="line"></div><div class="line">        <span class="comment">//调用的是下面的方法</span></div><div class="line">        configureAndRefreshWebApplicationContext(wac);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> wac;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureAndRefreshWebApplicationContext</span><span class="params">(ConfigurableWebApplicationContext wac)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (ObjectUtils.identityToString(wac).equals(wac.getId())) &#123;</div><div class="line">            <span class="comment">// The application context id is still set to its original default value</span></div><div class="line">            <span class="comment">// -&gt; assign a more useful id based on available information</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.contextId != <span class="keyword">null</span>) &#123;</div><div class="line">                wac.setId(<span class="keyword">this</span>.contextId);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Generate default id...</span></div><div class="line">                wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +</div><div class="line">                        ObjectUtils.getDisplayString(getServletContext().getContextPath()) + <span class="string">'/'</span> + getServletName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        wac.setServletContext(getServletContext());</div><div class="line">        wac.setServletConfig(getServletConfig());</div><div class="line">        wac.setNamespace(getNamespace());</div><div class="line">        wac.addApplicationListener(<span class="keyword">new</span> SourceFilteringListener(wac, <span class="keyword">new</span> ContextRefreshListener()));</div><div class="line"></div><div class="line">        <span class="comment">// The wac environment's #initPropertySources will be called in any case when the context</span></div><div class="line">        <span class="comment">// is refreshed; do it eagerly here to ensure servlet property sources are in place for</span></div><div class="line">        <span class="comment">// use in any post-processing or initialization that occurs below prior to #refresh</span></div><div class="line">        ConfigurableEnvironment env = wac.getEnvironment();</div><div class="line">        <span class="keyword">if</span> (env <span class="keyword">instanceof</span> ConfigurableWebEnvironment) &#123;</div><div class="line">            ((ConfigurableWebEnvironment) env).initPropertySources(getServletContext(), getServletConfig());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        postProcessWebApplicationContext(wac);</div><div class="line">        applyInitializers(wac);</div><div class="line">        wac.refresh();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>里面还有 doXXX() 方法，大家感兴趣的可以去看看。</p>
<p><strong>DispatcherServlet</strong></p>
<p>DispatcherServlet 继承自 FrameworkServlet，onRefresh 方法是 DispatcherServlet 的入口方法，在 initStrategies 方法中调用了 9 个初始化的方法。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/onrefresh.jpg" alt="onrefresh"></p>
<p>这里分析其中一个初始化方法：initLocaleResolver() 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLocaleResolver</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//在 context 中获取</span></div><div class="line">            <span class="keyword">this</span>.localeResolver = context.getBean(LOCALE_RESOLVER_BEAN_NAME, LocaleResolver.class);</div><div class="line">            <span class="comment">//删除了打印日志的代码</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</div><div class="line">            <span class="comment">//使用默认的策略</span></div><div class="line">            <span class="keyword">this</span>.localeResolver = getDefaultStrategy(context, LocaleResolver.class);</div><div class="line">            <span class="comment">//删除了打印日志的代码</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>查看默认策略代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">getDefaultStrategy</span><span class="params">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</div><div class="line">        <span class="comment">//调用 getDefaultStrategies 方法</span></div><div class="line">        List&lt;T&gt; strategies = getDefaultStrategies(context, strategyInterface);</div><div class="line">        <span class="keyword">if</span> (strategies.size() != <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</div><div class="line">                    <span class="string">"DispatcherServlet needs exactly 1 strategy for interface ["</span> + strategyInterface.getName() + <span class="string">"]"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> strategies.get(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create a List of default strategy objects for the given strategy interface.</div><div class="line">     * &lt;p&gt;The default implementation uses the "DispatcherServlet.properties" file (in the same</div><div class="line">     * package as the DispatcherServlet class) to determine the class names. It instantiates</div><div class="line">     * the strategy objects through the context's BeanFactory.</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getDefaultStrategies</span><span class="params">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</div><div class="line">        String key = strategyInterface.getName();</div><div class="line">        <span class="comment">//根据策略接口的名字从 defaultStrategies 获取所需策略的类型</span></div><div class="line">        String value = defaultStrategies.getProperty(key);</div><div class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//如果有多个默认值的话，就以逗号分隔为数组</span></div><div class="line">            String[] classNames = StringUtils.commaDelimitedListToStringArray(value);</div><div class="line">            List&lt;T&gt; strategies = <span class="keyword">new</span> ArrayList&lt;&gt;(classNames.length);</div><div class="line">            <span class="comment">//按获取到的类型初始化策略</span></div><div class="line">            <span class="keyword">for</span> (String className : classNames) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Class&lt;?&gt; clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());</div><div class="line">                    Object strategy = createDefaultStrategy(context, clazz);</div><div class="line">                    strategies.add((T) strategy);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</div><div class="line">                            <span class="string">"Could not find DispatcherServlet's default strategy class ["</span> + className + <span class="string">"] for interface ["</span> + key + <span class="string">"]"</span>, ex);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (LinkageError err) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</div><div class="line">                            <span class="string">"Error loading DispatcherServlet's default strategy class ["</span> + className + <span class="string">"] for interface ["</span> + key + <span class="string">"]: problem with class file or dependent class"</span>, err);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> strategies;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其他几个方法大概也类似，我就不再写了。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>主要讲了 Spring MVC 自身创建过程，分析了 Spring MVC 中 Servlet 的三个层次：HttpServletBean、FrameworkServlet 和 DispatcherServlet。HttpServletBean 继承自 Java 的 HttpServlet，其作用是将配置的参数设置到相应的属性上；FrameworkServlet 初始化了 WebApplicationContext；DispatcherServlet 初始化了自身的 9 个组件。</p>
<h3 id="Spring-MVC-之用"><a href="#Spring-MVC-之用" class="headerlink" title="Spring MVC 之用"></a>Spring MVC 之用</h3><p>分析 Spring MVC 是怎么处理请求的。首先分析 HttpServletBean、FrameworkServlet 和 DispatcherServlet 这三个 Servlet 的处理过程，最后分析 doDispatcher 的结构。</p>
<p><strong>HttpServletBean</strong></p>
<p>参与了创建工作，并没有涉及请求的处理。</p>
<p><strong>FrameworkServlet</strong></p>
<p>在类中的 service() 、doGet()、doPost()、doPut()、doDelete()、doOptions()、doTrace() 这些方法中可以看到都调用了一个共同的方法 processRequest() ，它是类在处理请求中最核心的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">        Throwable failureCause = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">//获取 LocaleContextHolder 中原来保存的 LocaleContext</span></div><div class="line">        LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</div><div class="line">        <span class="comment">//获取当前请求的 LocaleContext</span></div><div class="line">        LocaleContext localeContext = buildLocaleContext(request);</div><div class="line">        <span class="comment">//获取 RequestContextHolder 中原来保存的 RequestAttributes</span></div><div class="line">        RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</div><div class="line">        <span class="comment">//获取当前请求的 ServletRequestAttributes</span></div><div class="line">        ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</div><div class="line"></div><div class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">        asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</div><div class="line"><span class="comment">//将当前请求的 LocaleContext 和 ServletRequestAttributes 设置到 LocaleContextHolder 和 RequestContextHolder</span></div><div class="line">        initContextHolders(request, localeContext, requestAttributes);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//实际处理请求的入口，这是一个模板方法，在 Dispatcher 类中才有具体实现</span></div><div class="line">            doService(request, response);</div><div class="line">        &#125;<span class="keyword">catch</span> (ServletException ex) &#123;</div><div class="line">            failureCause = ex;</div><div class="line">            <span class="keyword">throw</span> ex;</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">            failureCause = ex;</div><div class="line">            <span class="keyword">throw</span> ex;</div><div class="line">        &#125;<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">            failureCause = ex;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Request processing failed"</span>, ex);</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">//将 previousLocaleContext，previousAttributes 恢复到 LocaleContextHolder 和 RequestContextHolder 中</span></div><div class="line">            resetContextHolders(request, previousLocaleContext, previousAttributes);</div><div class="line">            <span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</div><div class="line">                requestAttributes.requestCompleted();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//删除了日志打印代码</span></div><div class="line">            <span class="comment">//发布了一个 ServletRequestHandledEvent 类型的消息</span></div><div class="line">            publishRequestHandledEvent(request, response, startTime, failureCause);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>DispatcherServlet</strong></p>
<p>上一章中其实还没把该类讲清楚，在这个类中，里面的智行处理的入口方法应该是 doService 方法，方法里面调用了 doDispatch 进行具体的处理，在调用 doDispatch  方法之前  doService 做了一些事情：首先判断是不是 include 请求，如果是则对 request 的 Attribute 做个快照备份，等 doDispatcher 处理完之后（如果不是异步调用且未完成）进行还原 ，在做完快照后又对 request 设置了一些属性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></div><div class="line">        <span class="comment">// to be able to restore the original attributes after the include.</span></div><div class="line">        Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</div><div class="line">            attributesSnapshot = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">            Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</div><div class="line">            <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</div><div class="line">                String attrName = (String) attrNames.nextElement();</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX))&#123;</div><div class="line">                    attributesSnapshot.put(attrName, request.getAttribute(attrName));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Make framework objects available to handlers and view objects.</span></div><div class="line">        request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</div><div class="line">        request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</div><div class="line">        request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</div><div class="line">        request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</div><div class="line"></div><div class="line">        FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</div><div class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</div><div class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</div><div class="line">        &#125;</div><div class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</div><div class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//调用 doDispatch 方法</span></div><div class="line">            doDispatch(request, response);</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</div><div class="line">                <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></div><div class="line">                <span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</div><div class="line">                    restoreAttributesAfterInclude(request, attributesSnapshot);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>doDispatch() 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        HttpServletRequest processedRequest = request;</div><div class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ModelAndView mv = <span class="keyword">null</span>;</div><div class="line">            Exception dispatchException = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//检查是不是上传请求</span></div><div class="line">                processedRequest = checkMultipart(request);</div><div class="line">                multipartRequestParsed = (processedRequest != request);</div><div class="line"></div><div class="line">                <span class="comment">// Determine handler for the current request.  根据 request 找到 Handler</span></div><div class="line">                mappedHandler = getHandler(processedRequest);</div><div class="line">                <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;</div><div class="line">                    noHandlerFound(processedRequest, response);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Determine handler adapter for the current request.根据 Handler 找到对应的 HandlerAdapter</span></div><div class="line">                HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</div><div class="line">                <span class="comment">// Process last-modified header, if supported by the handler.</span></div><div class="line">                <span class="comment">//处理 GET 、 HEAD 请求的 LastModified</span></div><div class="line">                String method = request.getMethod();</div><div class="line">                <span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</div><div class="line">                <span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</div><div class="line">                    <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</div><div class="line">                    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                        logger.debug(<span class="string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="string">"] is: "</span> + lastModified);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//执行相应的 Interceptor 的 preHandle</span></div><div class="line">                <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// Actually invoke the handler. HandlerAdapter 使用 Handler 处理请求</span></div><div class="line">                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</div><div class="line">                <span class="comment">//如果需要异步处理，直接返回</span></div><div class="line">                <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//当 view 为空时，根据 request 设置默认 view</span></div><div class="line">                applyDefaultViewName(processedRequest, mv);</div><div class="line">                <span class="comment">//执行相应 Interceptor 的 postHandler</span></div><div class="line">                mappedHandler.applyPostHandle(processedRequest, response, mv);</div><div class="line">            &#125;<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">                dispatchException = ex;</div><div class="line">            &#125;<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">                <span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></div><div class="line">                <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></div><div class="line">                dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//调用 processDispatchResult 方法处理上面处理之后的结果（包括处理异常，渲染页面，发出完成通知触发 Interceptor 的 afterCompletion）</span></div><div class="line">            processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</div><div class="line">        &#125;<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">            triggerAfterCompletion(processedRequest, response, mappedHandler,</div><div class="line">                    <span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">          <span class="comment">//判断是否执行异步请求</span></div><div class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">                <span class="comment">// Instead of postHandle and afterCompletion</span></div><div class="line">                <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">                    mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Clean up any resources used by a multipart request. 删除上传请求的资源</span></div><div class="line">                <span class="keyword">if</span> (multipartRequestParsed) &#123;</div><div class="line">                    cleanupMultipart(processedRequest);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p> Handler，HandlerMapping，HandlerAdapter 三个区别：</p>
<ul>
<li>Handler：处理器，对应 MVC 的 C层，也就是 Controller 层，具体表现形式有很多种，可以是类，方法，它的类型是 Object，只要可以处理实际请求就可以是 Handler。</li>
<li>HandlerMapping：用来查找 Handler 的。</li>
<li>HandlerAdapter ：Handler 适配器，</li>
</ul>
<p>另外 View 和 ViewResolver 的原理与 Handler 和 HandlerMapping 的原理类似。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/doDispatcher.png" alt="doDispatcher"></p>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>本章分析了 Spring MVC 的请求处理的过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring MVC&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/spring-mvc.png&quot; alt=&quot;spring-mvc&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring MVC" scheme="http://yoursite.com/tags/Spring-MVC/"/>
    
  </entry>
  
</feed>
